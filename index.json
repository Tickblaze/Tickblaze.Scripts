{
  "README.html": {
    "href": "README.html",
    "title": "| Tickblaze",
    "keywords": "Please refer to GitHub Action for more details how the process is automated. To run it locally: Build the project dotnet build Build the docset and run: docfx docfx.json --serve Now you can preview the docs website on http://localhost:8080."
  },
  "api/Tickblaze.Scripts.Api.Attributes.DisplayNameAttribute.html": {
    "href": "api/Tickblaze.Scripts.Api.Attributes.DisplayNameAttribute.html",
    "title": "Class DisplayNameAttribute | Tickblaze",
    "keywords": "Class DisplayNameAttribute Specifies the display name for displaying in the user interface. Inheritance object Attribute DisplayNameAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Attributes Assembly: Tickblaze.Scripts.Api.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public sealed class DisplayNameAttribute : Attribute Constructors DisplayNameAttribute(string) Specifies the display name for displaying in the user interface. Declaration public DisplayNameAttribute(string name) Parameters Type Name Description string name The display name. Properties DisplayName Gets the display name. Declaration public string? DisplayName { get; } Property Value Type Description string"
  },
  "api/Tickblaze.Scripts.Api.Attributes.NumericRangeAttribute.html": {
    "href": "api/Tickblaze.Scripts.Api.Attributes.NumericRangeAttribute.html",
    "title": "Class NumericRangeAttribute | Tickblaze",
    "keywords": "Class NumericRangeAttribute Specifies the numeric range constraints for a parameter. Inheritance object Attribute NumericRangeAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Attributes Assembly: Tickblaze.Scripts.Api.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class NumericRangeAttribute : Attribute Constructors NumericRangeAttribute(double, double, double) Specifies the numeric range constraints for a parameter. Declaration public NumericRangeAttribute(double minValue = 0, double maxValue = 2147483647, double step = 1) Parameters Type Name Description double minValue The minimum value of the numeric range. Default is 0. double maxValue The maximum value of the numeric range. Default is MaxValue. double step The step value for incrementing within the range. Default is 1. Properties MaxValue Gets or sets the maximum value of the numeric range. Declaration public double MaxValue { get; set; } Property Value Type Description double MinValue Gets or sets the minimum value of the numeric range. Declaration public double MinValue { get; set; } Property Value Type Description double Step Gets or sets the step value for incrementing within the range. Declaration public double Step { get; set; } Property Value Type Description double"
  },
  "api/Tickblaze.Scripts.Api.Attributes.ParameterAttribute.html": {
    "href": "api/Tickblaze.Scripts.Api.Attributes.ParameterAttribute.html",
    "title": "Class ParameterAttribute | Tickblaze",
    "keywords": "Class ParameterAttribute Specifies metadata for parameter property. Inheritance object Attribute ParameterAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Attributes Assembly: Tickblaze.Scripts.Api.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class ParameterAttribute : Attribute Constructors ParameterAttribute(string) Specifies metadata for parameter property. Declaration public ParameterAttribute(string name) Parameters Type Name Description string name The display name of the parameter. Properties Description Description of the parameter. Declaration public string? Description { get; set; } Property Value Type Description string GroupName Group name of the parameter. Declaration public string? GroupName { get; set; } Property Value Type Description string Name Display name of the parameter. Declaration public string Name { get; } Property Value Type Description string"
  },
  "api/Tickblaze.Scripts.Api.Attributes.PlotAttribute.html": {
    "href": "api/Tickblaze.Scripts.Api.Attributes.PlotAttribute.html",
    "title": "Class PlotAttribute | Tickblaze",
    "keywords": "Class PlotAttribute Specifies metadata for PlotSeries or PlotLevel property. Inheritance object Attribute PlotAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Attributes Assembly: Tickblaze.Scripts.Api.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class PlotAttribute : Attribute Constructors PlotAttribute(string) Specifies metadata for PlotSeries or PlotLevel property. Declaration public PlotAttribute(string name) Parameters Type Name Description string name The display name of the plot. Properties Name Display name of the plot. Declaration public string Name { get; } Property Value Type Description string"
  },
  "api/Tickblaze.Scripts.Api.Attributes.html": {
    "href": "api/Tickblaze.Scripts.Api.Attributes.html",
    "title": "Namespace Tickblaze.Scripts.Api.Attributes | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Attributes Classes DisplayNameAttribute Specifies the display name for displaying in the user interface. NumericRangeAttribute Specifies the numeric range constraints for a parameter. ParameterAttribute Specifies metadata for parameter property. PlotAttribute Specifies metadata for PlotSeries or PlotLevel property."
  },
  "api/Tickblaze.Scripts.Api.Bases.BarType.SourceDataType.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.BarType.SourceDataType.html",
    "title": "Enum BarType.SourceDataType | Tickblaze",
    "keywords": "Enum BarType.SourceDataType Enumerates the possible types of source data used to create bars. Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public enum BarType.SourceDataType Fields Name Description Daily Source data is based on daily data. Minute Source data is based on minute data. Tick Source data is based on tick data."
  },
  "api/Tickblaze.Scripts.Api.Bases.BarType.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.BarType.html",
    "title": "Class BarType | Tickblaze",
    "keywords": "Class BarType Represents a base class for defining custom bar types with metadata, bar series, and source data configuration. Inheritance object BarType Implements IMetadata Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class BarType : IMetadata Constructors BarType() Initializes a new instance of the BarType class. Declaration protected BarType() Properties BarSize The size of the bar. Declaration public double BarSize { get; set; } Property Value Type Description double Bars The series of bars associated with this bar type. Declaration public BarSeries Bars { get; } Property Value Type Description BarSeries Description A description of the bar type. Declaration public string Description { get; init; } Property Value Type Description string Metadata Metadata associated with the bar type. Declaration public Metadata Metadata { get; } Property Value Type Description Metadata Name The name of the bar type. Declaration public string Name { get; init; } Property Value Type Description string ShortName The short name of the bar type. Declaration public string ShortName { get; init; } Property Value Type Description string Source The type of source data used to create the bar type. Declaration public BarType.SourceDataType Source { get; init; } Property Value Type Description BarType.SourceDataType Methods AddBar(Bar) Adds a new bar to the bar series. Declaration public void AddBar(Bar bar) Parameters Type Name Description Bar bar The bar to add. OnDataPoint(Bar) Processes a data point to create or update a bar. Declaration public abstract void OnDataPoint(Bar bar) Parameters Type Name Description Bar bar The bar data to process. UpdateBar(Bar) Updates the most recent bar in the bar series. Declaration public void UpdateBar(Bar bar) Parameters Type Name Description Bar bar The bar data to update. Implements IMetadata"
  },
  "api/Tickblaze.Scripts.Api.Bases.Drawing.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.Drawing.html",
    "title": "Class Drawing | Tickblaze",
    "keywords": "Class Drawing Represents a base class for drawing objects that can be rendered on the chart. Inheritance object Script Drawing Implements IScript IDisposable IMetadata IChartObject Inherited Members Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class Drawing : Script, IScript, IDisposable, IMetadata, IChartObject Constructors Drawing() Declaration protected Drawing() Properties Chart The chart to which this object belongs. Declaration public IChart Chart { get; } Property Value Type Description IChart ChartScale The scale used by this object on the chart. Declaration public IChartScale ChartScale { get; } Property Value Type Description IChartScale IsCreated Indicates whether the drawing object has been created. Declaration public bool IsCreated { get; } Property Value Type Description bool Points Declaration public IChartPoints Points { get; } Property Value Type Description IChartPoints PointsCount Gets the number of points in the drawing. Declaration public abstract int PointsCount { get; } Property Value Type Description int ShowOnChart Indicates whether the object is visible on the chart. Declaration public bool ShowOnChart { get; set; } Property Value Type Description bool SnapToBar Gets or sets a value indicating whether the drawing is snapped to the bar. Declaration public bool SnapToBar { get; set; } Property Value Type Description bool Symbol Declaration public ISymbol Symbol { get; } Property Value Type Description ISymbol Methods OnCreated() Performs actions when the drawing is created. Declaration public virtual void OnCreated() OnRender(IDrawingContext) Draws the chart object using the specified drawing context. Declaration public abstract void OnRender(IDrawingContext context) Parameters Type Name Description IDrawingContext context The context used for rendering. SetPoint(IComparable, IComparable, int) Sets a point on the drawing at the specified index. Declaration public virtual void SetPoint(IComparable xDataValue, IComparable yDataValue, int index) Parameters Type Name Description IComparable xDataValue The x data value of the point. IComparable yDataValue The y data value of the point. int index The index of the point to set. Implements IScript IDisposable IMetadata IChartObject"
  },
  "api/Tickblaze.Scripts.Api.Bases.IIndicator.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.IIndicator.html",
    "title": "Interface IIndicator | Tickblaze",
    "keywords": "Interface IIndicator Represents an indicator script that can be overlaid on a chart or displayed on a separate indicator panel. Inherited Members IScript.Initialize() IScript.Metadata IScript.Parameters IScript.IsInitialized IDisposable.Dispose() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IIndicator : IScript, IDisposable Properties AutoRescale Indicates whether this instance automatically rescales the chart or not. Default value is true. Declaration bool AutoRescale { get; } Property Value Type Description bool IsOverlay Indicates whether this instance is overlayed on the chart or plotted on a separate indicator panel. Declaration bool IsOverlay { get; } Property Value Type Description bool IsPercentage Indicates whether the indicator is a percentage indicator. The default value is false. Declaration bool IsPercentage { get; } Property Value Type Description bool LevelsSerializable Gets the levels of the indicator as a serializable dictionary. Declaration [JsonPropertyOrder(8001)] [JsonPropertyName(\"Levels\")] IReadOnlyDictionary<string, PlotLevel> LevelsSerializable { get; } Property Value Type Description IReadOnlyDictionary<string, PlotLevel> PlotsSerializable Gets the plots of the indicator as a serializable dictionary. Declaration [JsonPropertyOrder(8000)] [JsonPropertyName(\"Plots\")] IReadOnlyDictionary<string, IPlot> PlotsSerializable { get; } Property Value Type Description IReadOnlyDictionary<string, IPlot> ScalePrecision The number of decimals displayed on the price scale of the indicator panel. Declaration int? ScalePrecision { get; } Property Value Type Description int?"
  },
  "api/Tickblaze.Scripts.Api.Bases.ITradeManagmentStrategyScriptBase.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.ITradeManagmentStrategyScriptBase.html",
    "title": "Interface ITradeManagmentStrategyScriptBase | Tickblaze",
    "keywords": "Interface ITradeManagmentStrategyScriptBase Interface for a trade management strategy script base, providing methods to start and stop the strategy. Inherited Members IOrderManager.ExecuteMarketOrder(OrderAction, double, TimeInForce, string) IOrderManager.PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) IOrderManager.PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) IOrderManager.PlaceStopOrder(OrderAction, double, double, TimeInForce, string) IOrderManager.PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) IOrderManager.SetStopLoss(IOrder, double, string) IOrderManager.SetStopLossTicks(IOrder, int, string) IOrderManager.SetStopLossPercent(IOrder, double, string) IOrderManager.SetTakeProfit(IOrder, double, string) IOrderManager.SetTakeProfitTicks(IOrder, int, string) IOrderManager.SetTakeProfitPercent(IOrder, double, string) IOrderManager.ModifyOrder(IOrder, double, double?, double?, TimeInForce) IOrderManager.CancelOrder(IOrder, string, bool) IOrderManager.ClosePosition(string) IOrderManager.GetOrderExpectedPrice(IOrder) IOrderAccessor.GetExchangeRate(string, string) IOrderAccessor.Symbol IOrderAccessor.Account IOrderAccessor.PendingOrders IOrderAccessor.Position Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public interface ITradeManagmentStrategyScriptBase : IOrderManager, IOrderAccessor Properties IsActive Indicates whether the strategy is currently active. Declaration bool IsActive { get; } Property Value Type Description bool Methods Start() Starts the strategy. Declaration void Start() Stop() Stops the strategy. Declaration void Stop()"
  },
  "api/Tickblaze.Scripts.Api.Bases.Indicator.BandShading.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.Indicator.BandShading.html",
    "title": "Class Indicator.BandShading | Tickblaze",
    "keywords": "Class Indicator.BandShading Represents a shading between two values or plot series. Inheritance object Indicator.BandShading Implements IEquatable<Indicator.BandShading> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public record Indicator.BandShading : IEquatable<Indicator.BandShading> Constructors BandShading(object, object, Color?, Color?) Represents a shading between two values or plot series. Declaration public BandShading(object FirstSource, object SecondSource, Color? FirstColor, Color? SecondColor) Parameters Type Name Description object FirstSource object SecondSource Color? FirstColor Color? SecondColor BandShading(BandShading) Declaration protected BandShading(Indicator.BandShading original) Parameters Type Name Description Indicator.BandShading original Properties FirstColor Declaration public Color? FirstColor { get; init; } Property Value Type Description Color? FirstSource Declaration public object FirstSource { get; init; } Property Value Type Description object SecondColor Declaration public Color? SecondColor { get; init; } Property Value Type Description Color? SecondSource Declaration public object SecondSource { get; init; } Property Value Type Description object Methods Deconstruct(out object, out object, out Color?, out Color?) Declaration public void Deconstruct(out object FirstSource, out object SecondSource, out Color? FirstColor, out Color? SecondColor) Parameters Type Name Description object FirstSource object SecondSource Color? FirstColor Color? SecondColor Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) Equals(BandShading?) Declaration public virtual bool Equals(Indicator.BandShading? other) Parameters Type Name Description Indicator.BandShading other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() get_EqualityContract() Declaration protected virtual Type get_EqualityContract() Returns Type Description Type Operators operator ==(BandShading?, BandShading?) Declaration public static bool operator ==(Indicator.BandShading? left, Indicator.BandShading? right) Parameters Type Name Description Indicator.BandShading left Indicator.BandShading right Returns Type Description bool operator !=(BandShading?, BandShading?) Declaration public static bool operator !=(Indicator.BandShading? left, Indicator.BandShading? right) Parameters Type Name Description Indicator.BandShading left Indicator.BandShading right Returns Type Description bool Implements IEquatable<T>"
  },
  "api/Tickblaze.Scripts.Api.Bases.Indicator.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.Indicator.html",
    "title": "Class Indicator | Tickblaze",
    "keywords": "Class Indicator Represents a base class for indicator scripts. Provides functionality for calculating and rendering the indicator on the chart. Inheritance object Script Indicator Implements IMetadata IIndicator IScript IDisposable IChartObject Inherited Members Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class Indicator : Script, IMetadata, IIndicator, IScript, IDisposable, IChartObject Constructors Indicator() Initializes a new instance of the Indicator class. Declaration protected Indicator() Properties AutoRescale Indicates whether this instance automatically rescales the chart or not. Default value is true. Declaration public bool AutoRescale { get; init; } Property Value Type Description bool Chart The chart to which this object belongs. Declaration public IChart Chart { get; } Property Value Type Description IChart ChartScale The scale used by this object on the chart. Declaration public IChartScale ChartScale { get; } Property Value Type Description IChartScale DisplayName Gets the display name of the indicator. Declaration public virtual string DisplayName { get; } Property Value Type Description string IsOverlay Indicates whether this instance is overlayed on the chart or plotted on a separate indicator panel. Declaration public bool IsOverlay { get; init; } Property Value Type Description bool IsPercentage Indicates whether the indicator is a percentage indicator. The default value is false. Declaration public bool IsPercentage { get; init; } Property Value Type Description bool Levels Gets the levels of the indicator. Declaration public IReadOnlyList<PlotLevel> Levels { get; } Property Value Type Description IReadOnlyList<PlotLevel> LevelsSerializable Gets the levels of the indicator as a serializable dictionary. Declaration [Browsable(false)] public IReadOnlyDictionary<string, PlotLevel> LevelsSerializable { get; } Property Value Type Description IReadOnlyDictionary<string, PlotLevel> Plots Gets the plots of the indicator. Declaration public IReadOnlyList<PlotSeries> Plots { get; } Property Value Type Description IReadOnlyList<PlotSeries> PlotsSerializable Gets the plots of the indicator as a serializable dictionary. Declaration [Browsable(false)] public IReadOnlyDictionary<string, IPlot> PlotsSerializable { get; } Property Value Type Description IReadOnlyDictionary<string, IPlot> ScalePrecision The number of decimals displayed on the price scale of the indicator panel. Declaration public int? ScalePrecision { get; init; } Property Value Type Description int? ShowOnChart Indicates whether the object is visible on the chart. Declaration public bool ShowOnChart { get; set; } Property Value Type Description bool Symbol Declaration public ISymbol Symbol { get; } Property Value Type Description ISymbol Methods Calculate() Calculates the values for the indicator. Declaration public void Calculate() Calculate(int) Calculate the value(s) of the indicator for a given index. Declaration protected virtual void Calculate(int index) Parameters Type Name Description int index The index of the calculated value. ConfigureWatchlistCell(WatchlistCellString) Configures the watchlist cell representation. Declaration public virtual void ConfigureWatchlistCell(WatchlistCellString cellString) Parameters Type Name Description WatchlistCellString cellString The watchlist cell string to configure. OnRender(IDrawingContext) Renders the indicator on the chart. Declaration public virtual void OnRender(IDrawingContext context) Parameters Type Name Description IDrawingContext context The drawing context to render the indicator. ShadeBetween(PlotSeries, PlotSeries, Color?, Color?, float) Shades the area between two plot series. Declaration protected virtual void ShadeBetween(PlotSeries series1, PlotSeries series2, Color? fill1, Color? fill2, float opacity = 1) Parameters Type Name Description PlotSeries series1 The first plot series. PlotSeries series2 The second plot series. Color? fill1 The color to shade when first series is above second series. Color? fill2 The color to shade when first series is below second series. float opacity The opacity of the shading, ranging from 0.0 (fully transparent) to 1.0 (fully opaque). Implements IMetadata IIndicator IScript IDisposable IChartObject"
  },
  "api/Tickblaze.Scripts.Api.Bases.PositionSizer.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.PositionSizer.html",
    "title": "Class PositionSizer | Tickblaze",
    "keywords": "Class PositionSizer A base class for position sizing scripts. Inheritance object Script PositionSizer Implements IScript IDisposable IMetadata IOrderAccessor Inherited Members Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class PositionSizer : Script, IScript, IDisposable, IMetadata, IOrderAccessor Constructors PositionSizer() Declaration protected PositionSizer() Properties Account The account associated with the orders and position. Declaration public IAccount Account { get; } Property Value Type Description IAccount PendingOrders A collection of orders that are currently pending execution. Declaration public IReadOnlyList<IOrder> PendingOrders { get; } Property Value Type Description IReadOnlyList<IOrder> Position The position associated with the current symbol and account. Declaration public IPosition Position { get; } Property Value Type Description IPosition Symbol The financial symbol associated with the orders and position. Declaration public ISymbol Symbol { get; } Property Value Type Description ISymbol Methods GetExchangeRate(string, string) Retrieves the exchange rate for converting one currency to another. Declaration public double GetExchangeRate(string fromCurrency, string toCurrency) Parameters Type Name Description string fromCurrency The currency to convert from (e.g., \"USD\"). string toCurrency The currency to convert to (e.g., \"EUR\"). Returns Type Description double The exchange rate between the specified currencies. GetPositionSize(IOrder) Calculates the position size based on the given order. This method must be implemented by derived classes. Declaration protected abstract double GetPositionSize(IOrder order) Parameters Type Name Description IOrder order The order for which the position size is calculated. Returns Type Description double The position size for the given order. Implements IScript IDisposable IMetadata IOrderAccessor"
  },
  "api/Tickblaze.Scripts.Api.Bases.Script.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.Script.html",
    "title": "Class Script | Tickblaze",
    "keywords": "Class Script Represents a base class for scripts that can interact with chart data, parameters, and initialization processes. Inheritance object Script Drawing Indicator PositionSizer TradingScript Implements IScript IDisposable IMetadata Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class Script : IScript, IDisposable, IMetadata Properties Bars The bar series associated with the script. Declaration public BarSeries Bars { get; } Property Value Type Description BarSeries Description A description of the script. Declaration public string Description { get; init; } Property Value Type Description string IsInitialized Indicates whether the script has been initialized. Declaration public bool IsInitialized { get; } Property Value Type Description bool Metadata The metadata associated with the script. Declaration public Metadata Metadata { get; } Property Value Type Description Metadata Name The name of the script. Declaration public string Name { get; init; } Property Value Type Description string Parameters The parameters for the script. Declaration public Parameters Parameters { get; } Property Value Type Description Parameters ShortName The short name of the script. Declaration public string ShortName { get; init; } Property Value Type Description string UiDispatcher The UI dispatcher for the script. Declaration public IDispatcher UiDispatcher { get; set; } Property Value Type Description IDispatcher Methods CreateChartToolbarMenuItem() Creates a control that will be displayed in the chart's toolbar. Declaration public virtual object? CreateChartToolbarMenuItem() Returns Type Description object Dispose() Declaration public void Dispose() Initialize() A method call when the script is being initialized. Declaration protected virtual void Initialize() OnDestroy() A method call when the script is being destroyed. Declaration protected virtual void OnDestroy() Print(object) Prints the specified value to the console. Declaration protected void Print(object value) Parameters Type Name Description object value The value to print. Implements IScript IDisposable IMetadata"
  },
  "api/Tickblaze.Scripts.Api.Bases.Strategy.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.Strategy.html",
    "title": "Class Strategy | Tickblaze",
    "keywords": "Class Strategy Represents a base class for strategy scripts allowing order management. Inheritance object Script TradingScript Strategy Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor IChartObject Inherited Members TradingScript.OnOrderUpdate(IOrder) TradingScript.OnOrderFillUpdate(IOrder) TradingScript.OnPositionUpdate() TradingScript.OnBarUpdate() TradingScript.ExecuteMarketOrder(OrderAction, double, TimeInForce, string) TradingScript.PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) TradingScript.PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) TradingScript.PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) TradingScript.PlaceStopOrder(OrderAction, double, double, TimeInForce, string) TradingScript.SetStopLoss(IOrder, double, string) TradingScript.SetStopLossTicks(IOrder, int, string) TradingScript.SetStopLossPercent(IOrder, double, string) TradingScript.SetTakeProfit(IOrder, double, string) TradingScript.SetTakeProfitTicks(IOrder, int, string) TradingScript.SetTakeProfitPercent(IOrder, double, string) TradingScript.ModifyOrder(IOrder, double, double?, double?, TimeInForce) TradingScript.CancelOrder(IOrder, string, bool) TradingScript.ClosePosition(string) TradingScript.GetExchangeRate(string, string) TradingScript.GetOrderExpectedPrice(IOrder) TradingScript.Symbol TradingScript.Account TradingScript.PendingOrders TradingScript.Position Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class Strategy : TradingScript, IScript, IDisposable, IMetadata, IOrderManager, IOrderAccessor, IChartObject Constructors Strategy() Declaration protected Strategy() Properties Chart The chart to which this object belongs. Declaration public IChart Chart { get; } Property Value Type Description IChart ChartScale The scale used by this object on the chart. Declaration public IChartScale ChartScale { get; } Property Value Type Description IChartScale ShowOnChart Indicates whether the object is visible on the chart. Declaration public bool ShowOnChart { get; set; } Property Value Type Description bool Methods OnBar(int) Method to handle bar updates for the strategy. Declaration protected virtual void OnBar(int index) Parameters Type Name Description int index The index of the bar being processed. OnRender(IDrawingContext) Draws the chart object using the specified drawing context. Declaration public virtual void OnRender(IDrawingContext context) Parameters Type Name Description IDrawingContext context The context used for rendering. OnShutdown() Method called when the strategy is shutting down. Declaration protected virtual void OnShutdown() OnTick() Method to handle tick updates for the strategy. Declaration protected virtual void OnTick() Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor IChartObject"
  },
  "api/Tickblaze.Scripts.Api.Bases.TradeManagementStrategy.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.TradeManagementStrategy.html",
    "title": "Class TradeManagementStrategy | Tickblaze",
    "keywords": "Class TradeManagementStrategy A base class for trade management strategies, providing methods to control the activation and deactivation of the strategy. Inheritance object Script TradingScript TradeManagementStrategy Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor Inherited Members TradingScript.OnOrderUpdate(IOrder) TradingScript.OnOrderFillUpdate(IOrder) TradingScript.OnPositionUpdate() TradingScript.OnBarUpdate() TradingScript.ExecuteMarketOrder(OrderAction, double, TimeInForce, string) TradingScript.PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) TradingScript.PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) TradingScript.PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) TradingScript.PlaceStopOrder(OrderAction, double, double, TimeInForce, string) TradingScript.SetStopLoss(IOrder, double, string) TradingScript.SetStopLossTicks(IOrder, int, string) TradingScript.SetStopLossPercent(IOrder, double, string) TradingScript.SetTakeProfit(IOrder, double, string) TradingScript.SetTakeProfitTicks(IOrder, int, string) TradingScript.SetTakeProfitPercent(IOrder, double, string) TradingScript.ModifyOrder(IOrder, double, double?, double?, TimeInForce) TradingScript.CancelOrder(IOrder, string, bool) TradingScript.ClosePosition(string) TradingScript.GetExchangeRate(string, string) TradingScript.GetOrderExpectedPrice(IOrder) TradingScript.Symbol TradingScript.Account TradingScript.PendingOrders TradingScript.Position Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class TradeManagementStrategy : TradingScript, IScript, IDisposable, IMetadata, IOrderManager, IOrderAccessor Constructors TradeManagementStrategy() Declaration protected TradeManagementStrategy() Properties IsActive Indicates whether the trade management strategy is active. Declaration public bool IsActive { get; } Property Value Type Description bool Methods OnEntryOrder(IOrder) Handles the entry order when it is placed. Declaration protected virtual void OnEntryOrder(IOrder order) Parameters Type Name Description IOrder order The entry order for the trade. OnShutdown() Handles shutdown operations when the strategy is stopped or the script is terminated. Declaration protected virtual void OnShutdown() Start() Starts the strategy if it is not already active. Declaration protected void Start() Stop() Stops the strategy if it is currently active. Declaration protected void Stop() Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor"
  },
  "api/Tickblaze.Scripts.Api.Bases.TradingScript.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.TradingScript.html",
    "title": "Class TradingScript | Tickblaze",
    "keywords": "Class TradingScript Represents a trading script that allows the execution and management of orders and positions in a trading system. Inheritance object Script TradingScript Strategy TradeManagementStrategy Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor Inherited Members Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class TradingScript : Script, IScript, IDisposable, IMetadata, IOrderManager, IOrderAccessor Constructors TradingScript() Declaration protected TradingScript() Properties Account The account associated with the orders and position. Declaration public IAccount Account { get; } Property Value Type Description IAccount PendingOrders A collection of orders that are currently pending execution. Declaration public IReadOnlyList<IOrder> PendingOrders { get; } Property Value Type Description IReadOnlyList<IOrder> Position The position associated with the current symbol and account. Declaration public IPosition Position { get; } Property Value Type Description IPosition Symbol The financial symbol associated with the orders and position. Declaration public ISymbol Symbol { get; } Property Value Type Description ISymbol Methods CancelOrder(IOrder, string, bool) Cancels the specified order with an optional comment. The order to cancel. Optional comment for the order. Indicates if the cancellation should be silent. Declaration public void CancelOrder(IOrder order, string comment = \"\", bool cancelSilently = false) Parameters Type Name Description IOrder order string comment bool cancelSilently ClosePosition(string) Closes the entire position with an optional comment. Optional comment for the order. Declaration public void ClosePosition(string comment = \"\") Parameters Type Name Description string comment ExecuteMarketOrder(OrderAction, double, TimeInForce, string) Executes a market order immediately based on the given action and quantity. Declaration public IOrder ExecuteMarketOrder(OrderAction action, double quantity, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action The buy or sell action. double quantity The order quantity. TimeInForce timeInForce Order duration setting. Defaults to Day. string comment Optional order comment. Returns Type Description IOrder GetExchangeRate(string, string) Retrieves the exchange rate for converting one currency to another. Declaration public double GetExchangeRate(string fromCurrency, string toCurrency) Parameters Type Name Description string fromCurrency The currency to convert from (e.g., \"USD\"). string toCurrency The currency to convert to (e.g., \"EUR\"). Returns Type Description double The exchange rate between the specified currencies. GetOrderExpectedPrice(IOrder) Gets estimated fill price of pending order. Declaration public double GetOrderExpectedPrice(IOrder order) Parameters Type Name Description IOrder order The pending order. Returns Type Description double ModifyOrder(IOrder, double, double?, double?, TimeInForce) Modifies an existing order. The order of open position. Order quantity. Stop price if applicable. Limit price if applicable. Order duration. Defaults to Day. Declaration public void ModifyOrder(IOrder order, double quantity, double? stopPrice, double? limitPrice, TimeInForce timeInForce = TimeInForce.Day) Parameters Type Name Description IOrder order double quantity double? stopPrice double? limitPrice TimeInForce timeInForce OnBarUpdate() Called when the bar data is updated. Declaration protected virtual void OnBarUpdate() OnOrderFillUpdate(IOrder) Called when an order's fill status is updated. Declaration protected virtual void OnOrderFillUpdate(IOrder order) Parameters Type Name Description IOrder order The updated order. OnOrderUpdate(IOrder) Called when an order's status is updated. Declaration protected virtual void OnOrderUpdate(IOrder order) Parameters Type Name Description IOrder order The updated order. OnPositionUpdate() Called when the position's status is updated. Declaration protected virtual void OnPositionUpdate() PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) Places a limit order. Declaration public IOrder PlaceLimitOrder(OrderAction action, double quantity, double limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action The buy or sell action. double quantity Order quantity. double limitPrice Limit price. TimeInForce timeInForce Order duration. Defaults to Day. string comment Optional comment for the order. Returns Type Description IOrder PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) Places an order of specified type with defined price parameters. Declaration public IOrder PlaceOrder(OrderAction action, OrderType type, double quantity, double? stopPrice, double? limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action The buy or sell action. OrderType type Order type (e.g., Limit, Stop). double quantity Order quantity. double? stopPrice Stop price if applicable. double? limitPrice Limit price if applicable. TimeInForce timeInForce Order duration. Defaults to Day. string comment Optional comment for the order. Returns Type Description IOrder PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) Places a stop-limit order. The buy or sell action. Order quantity. Stop price. Limit price. Order duration. Defaults to Day. Optional comment for the order. Declaration public IOrder PlaceStopLimitOrder(OrderAction action, double quantity, double stopPrice, double limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action double quantity double stopPrice double limitPrice TimeInForce timeInForce string comment Returns Type Description IOrder PlaceStopOrder(OrderAction, double, double, TimeInForce, string) Places a stop order that activates when the stop price is reached. The buy or sell action. Order quantity. Stop price. Order duration. Defaults to Day. Optional comment for the order. Declaration public IOrder PlaceStopOrder(OrderAction action, double quantity, double stopPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action double quantity double stopPrice TimeInForce timeInForce string comment Returns Type Description IOrder SetStopLoss(IOrder, double, string) Sets a stop-loss order on an open position at a specified price. Declaration public IOrder SetStopLoss(IOrder order, double stopPrice, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the stop-loss is applied. double stopPrice The price at which the stop-loss order is set. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the stop-loss applied. SetStopLossPercent(IOrder, double, string) Sets a stop-loss order on an open position based on a specified percentage from the entry price. Declaration public IOrder SetStopLossPercent(IOrder order, double percent, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the stop-loss is applied. double percent The percentage away from the entry price to place the stop-loss. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the stop-loss applied. SetStopLossTicks(IOrder, int, string) Sets a stop-loss order on an open position based on a specified number of ticks from the entry price. Declaration public IOrder SetStopLossTicks(IOrder order, int ticks, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the stop-loss is applied. int ticks The number of ticks away from the entry price to place the stop-loss. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the stop-loss applied. SetTakeProfit(IOrder, double, string) Sets a take-profit order at a specified price to close a position when the price is reached. Declaration public IOrder SetTakeProfit(IOrder order, double limitPrice, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the take-profit is applied. double limitPrice The price at which the take-profit order is set. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the take-profit applied. SetTakeProfitPercent(IOrder, double, string) Sets a take-profit order on an open position based on a specified percentage from the entry price. Declaration public IOrder SetTakeProfitPercent(IOrder order, double percent, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the take-profit is applied. double percent The percentage away from the entry price to place the take-profit. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the take-profit applied. SetTakeProfitTicks(IOrder, int, string) Sets a take-profit order on an open position based on a specified number of ticks from the entry price. Declaration public IOrder SetTakeProfitTicks(IOrder order, int ticks, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the take-profit is applied. int ticks The number of ticks away from the entry price to place the take-profit. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the take-profit applied. Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor"
  },
  "api/Tickblaze.Scripts.Api.Bases.WatchlistCellString.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.WatchlistCellString.html",
    "title": "Class WatchlistCellString | Tickblaze",
    "keywords": "Class WatchlistCellString Represents a cell in the watchlist with string value and associated colors. Inheritance object WatchlistCellString Implements IEquatable<WatchlistCellString> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public record WatchlistCellString : IEquatable<WatchlistCellString> Constructors WatchlistCellString() Declaration public WatchlistCellString() WatchlistCellString(WatchlistCellString) Declaration protected WatchlistCellString(WatchlistCellString original) Parameters Type Name Description WatchlistCellString original Properties Background The background color of the watchlist cell. Declaration public Color Background { get; set; } Property Value Type Description Color Foreground The foreground color of the watchlist cell. Declaration public Color Foreground { get; set; } Property Value Type Description Color Value The string value of the watchlist cell. Declaration public string Value { get; set; } Property Value Type Description string Methods Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) Equals(WatchlistCellString?) Declaration public virtual bool Equals(WatchlistCellString? other) Parameters Type Name Description WatchlistCellString other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() get_EqualityContract() Declaration protected virtual Type get_EqualityContract() Returns Type Description Type Operators operator ==(WatchlistCellString?, WatchlistCellString?) Declaration public static bool operator ==(WatchlistCellString? left, WatchlistCellString? right) Parameters Type Name Description WatchlistCellString left WatchlistCellString right Returns Type Description bool operator !=(WatchlistCellString?, WatchlistCellString?) Declaration public static bool operator !=(WatchlistCellString? left, WatchlistCellString? right) Parameters Type Name Description WatchlistCellString left WatchlistCellString right Returns Type Description bool Implements IEquatable<T>"
  },
  "api/Tickblaze.Scripts.Api.Bases.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.html",
    "title": "Namespace Tickblaze.Scripts.Api.Bases | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Bases Classes BarType Represents a base class for defining custom bar types with metadata, bar series, and source data configuration. Drawing Represents a base class for drawing objects that can be rendered on the chart. Indicator Represents a base class for indicator scripts. Provides functionality for calculating and rendering the indicator on the chart. Indicator.BandShading Represents a shading between two values or plot series. PositionSizer A base class for position sizing scripts. Script Represents a base class for scripts that can interact with chart data, parameters, and initialization processes. Strategy Represents a base class for strategy scripts allowing order management. TradeManagementStrategy A base class for trade management strategies, providing methods to control the activation and deactivation of the strategy. TradingScript Represents a trading script that allows the execution and management of orders and positions in a trading system. WatchlistCellString Represents a cell in the watchlist with string value and associated colors. Interfaces IIndicator Represents an indicator script that can be overlaid on a chart or displayed on a separate indicator panel. ITradeManagmentStrategyScriptBase Interface for a trade management strategy script base, providing methods to start and stop the strategy. Enums BarType.SourceDataType Enumerates the possible types of source data used to create bars."
  },
  "api/Tickblaze.Scripts.Api.CollectionExtensions.html": {
    "href": "api/Tickblaze.Scripts.Api.CollectionExtensions.html",
    "title": "Class CollectionExtensions | Tickblaze",
    "keywords": "Class CollectionExtensions Extensions for collections. Inheritance object CollectionExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api Assembly: Tickblaze.Scripts.Api.dll Syntax public static class CollectionExtensions Methods BinarySearch<TItem>(IReadOnlyList<TItem>, TItem) Performs a binary search on a sorted list to find the index of the specified item. Declaration public static int BinarySearch<TItem>(this IReadOnlyList<TItem> items, TItem item) Parameters Type Name Description IReadOnlyList<TItem> items The sorted list of items. TItem item The item to search for. Returns Type Description int The index of the item if found; otherwise, a negative index indicating where the item would be inserted. Type Parameters Name Description TItem The type of elements in the list. Remarks The implementation is a refactored copy of this."
  },
  "api/Tickblaze.Scripts.Api.Enums.FontStyle.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.FontStyle.html",
    "title": "Enum FontStyle | Tickblaze",
    "keywords": "Enum FontStyle Specifies the style of a font. Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum FontStyle Fields Name Description Italic Italic text style. Normal Normal text style. Oblique Oblique text style."
  },
  "api/Tickblaze.Scripts.Api.Enums.FontWeight.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.FontWeight.html",
    "title": "Enum FontWeight | Tickblaze",
    "keywords": "Enum FontWeight Specifies the weight of a font. Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum FontWeight Fields Name Description Black Black font weight. Bold Bold font weight. DemiBold DemiBold font weight. ExtraBlack ExtraBlack font weight. ExtraBold ExtraBold font weight. ExtraLight ExtraLight font weight. Heavy Heavy font weight. Light Light font weight. Medium Medium font weight. Normal Normal font weight. Regular Regular font weight. SemiBold SemiBold font weight. Thin Thin font weight. UltraBlack UltraBlack font weight. UltraBold UltraBold font weight. UltraLight UltraLight font weight."
  },
  "api/Tickblaze.Scripts.Api.Enums.HorizontalAlignment.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.HorizontalAlignment.html",
    "title": "Enum HorizontalAlignment | Tickblaze",
    "keywords": "Enum HorizontalAlignment Specifies the horizontal aligment. Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum HorizontalAlignment Fields Name Description Center Aligns content to the center. Left Aligns content to the left. Right Aligns content to the right."
  },
  "api/Tickblaze.Scripts.Api.Enums.LineStyle.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.LineStyle.html",
    "title": "Enum LineStyle | Tickblaze",
    "keywords": "Enum LineStyle Specifies the style of a line. Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum LineStyle Fields Name Description Dash Dashed line. DashDot Dash-dot line. DashDotDot Dash-dot-dot line. Dot Dotted line. Solid Solid line."
  },
  "api/Tickblaze.Scripts.Api.Enums.OrderAction.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.OrderAction.html",
    "title": "Enum OrderAction | Tickblaze",
    "keywords": "Enum OrderAction Specifies the action of an order. Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum OrderAction Fields Name Description Buy Buy order action. BuyToCover Buy to cover order action. Sell Sell order action. SellShort Sell short order action."
  },
  "api/Tickblaze.Scripts.Api.Enums.OrderDirection.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.OrderDirection.html",
    "title": "Enum OrderDirection | Tickblaze",
    "keywords": "Enum OrderDirection Specifies the direction of an order. Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum OrderDirection Fields Name Description Long Long position direction. Short Short position direction."
  },
  "api/Tickblaze.Scripts.Api.Enums.OrderStatus.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.OrderStatus.html",
    "title": "Enum OrderStatus | Tickblaze",
    "keywords": "Enum OrderStatus Specifies the status of an order. Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum OrderStatus Fields Name Description Cancelled Order has been cancelled. Executed Order has been executed. Pending Order is pending. Unknown Status is unknown."
  },
  "api/Tickblaze.Scripts.Api.Enums.OrderType.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.OrderType.html",
    "title": "Enum OrderType | Tickblaze",
    "keywords": "Enum OrderType Specifies the type of an order. Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum OrderType Fields Name Description Limit Limit order type. Market Market order type. Stop Stop order type. StopLimit Stop limit order type."
  },
  "api/Tickblaze.Scripts.Api.Enums.PlotStyle.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.PlotStyle.html",
    "title": "Enum PlotStyle | Tickblaze",
    "keywords": "Enum PlotStyle Specifies the style of a plot. Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum PlotStyle Fields Name Description Cross Cross plot style. Dot Dot plot style. Hash Hash plot style. Histogram Histogram plot style. Line Line plot style. Square Square plot style. Stair Stair plot style. TriangleDown Triangle down plot style. TriangleLeft Triangle left plot style. TriangleRight Triangle right plot style. TriangleUp Triangle up plot style."
  },
  "api/Tickblaze.Scripts.Api.Enums.PositionStatus.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.PositionStatus.html",
    "title": "Enum PositionStatus | Tickblaze",
    "keywords": "Enum PositionStatus Specifies the status of a position. Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum PositionStatus Fields Name Description Close Closed position. Open Open position."
  },
  "api/Tickblaze.Scripts.Api.Enums.RoundingMode.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.RoundingMode.html",
    "title": "Enum RoundingMode | Tickblaze",
    "keywords": "Enum RoundingMode Specifies the mode of rounding. Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum RoundingMode Fields Name Description Down Rounds down. ToNearest Rounds to the nearest value. Up Rounds up."
  },
  "api/Tickblaze.Scripts.Api.Enums.TimeInForce.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.TimeInForce.html",
    "title": "Enum TimeInForce | Tickblaze",
    "keywords": "Enum TimeInForce Specifies the time in force for an order. Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum TimeInForce Fields Name Description Day Order is valid for the current day only. FillOrKill Order must be filled immediately or canceled. GoodTillCancel Order remains active until canceled. ImmediateOrCancel Order must be filled immediately, partially or fully, or canceled."
  },
  "api/Tickblaze.Scripts.Api.Enums.VerticalAlignment.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.VerticalAlignment.html",
    "title": "Enum VerticalAlignment | Tickblaze",
    "keywords": "Enum VerticalAlignment Specifies the vertical alignment. Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum VerticalAlignment Fields Name Description Bottom Aligns the content to the bottom. Center Aligns the content to the center. Top Aligns the content to the top."
  },
  "api/Tickblaze.Scripts.Api.Enums.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.html",
    "title": "Namespace Tickblaze.Scripts.Api.Enums | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Enums Enums FontStyle Specifies the style of a font. FontWeight Specifies the weight of a font. HorizontalAlignment Specifies the horizontal aligment. LineStyle Specifies the style of a line. OrderAction Specifies the action of an order. OrderDirection Specifies the direction of an order. OrderStatus Specifies the status of an order. OrderType Specifies the type of an order. PlotStyle Specifies the style of a plot. PositionStatus Specifies the status of a position. RoundingMode Specifies the mode of rounding. TimeInForce Specifies the time in force for an order. VerticalAlignment Specifies the vertical alignment."
  },
  "api/Tickblaze.Scripts.Api.IndexedDictionary-2.html": {
    "href": "api/Tickblaze.Scripts.Api.IndexedDictionary-2.html",
    "title": "Class IndexedDictionary<TKey, TValue> | Tickblaze",
    "keywords": "Class IndexedDictionary<TKey, TValue> A dictionary with an indexer that allows accessing elements by their index in addition to the key. Inheritance object Dictionary<TKey, TValue> IndexedDictionary<TKey, TValue> Parameters Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IDictionary ICollection IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable ISerializable IDeserializationCallback Inherited Members Dictionary<TKey, TValue>.Add(TKey, TValue) Dictionary<TKey, TValue>.Clear() Dictionary<TKey, TValue>.ContainsKey(TKey) Dictionary<TKey, TValue>.ContainsValue(TValue) Dictionary<TKey, TValue>.GetEnumerator() Dictionary<TKey, TValue>.OnDeserialization(object) Dictionary<TKey, TValue>.Remove(TKey) Dictionary<TKey, TValue>.Remove(TKey, out TValue) Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue) Dictionary<TKey, TValue>.TryAdd(TKey, TValue) Dictionary<TKey, TValue>.EnsureCapacity(int) Dictionary<TKey, TValue>.TrimExcess() Dictionary<TKey, TValue>.TrimExcess(int) Dictionary<TKey, TValue>.Comparer Dictionary<TKey, TValue>.Count Dictionary<TKey, TValue>.Keys Dictionary<TKey, TValue>.Values Dictionary<TKey, TValue>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api Assembly: Tickblaze.Scripts.Api.dll Syntax public class IndexedDictionary<TKey, TValue> : Dictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, ISerializable, IDeserializationCallback where TKey : notnull Type Parameters Name Description TKey The type of the key in the dictionary. TValue The type of the value in the dictionary. Constructors IndexedDictionary() Declaration public IndexedDictionary() Properties this[int] Gets or sets the value associated with the specified index in the dictionary. Declaration public TValue this[int index] { get; set; } Parameters Type Name Description int index The zero-based index of the element to get or set. Property Value Type Description TValue The value at the specified index. Implements IDictionary<TKey, TValue> ICollection<T> IDictionary ICollection IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IEnumerable ISerializable IDeserializationCallback"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IAccount.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IAccount.html",
    "title": "Interface IAccount | Tickblaze",
    "keywords": "Interface IAccount Represents trading account with balance, margin, positions, and equity details. Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IAccount Properties BaseCurrencyCode The currency code for the account's base currency. Declaration string BaseCurrencyCode { get; } Property Value Type Description string BuyingPower The available buying power for the account. Declaration double BuyingPower { get; } Property Value Type Description double Cash The cash balance in the account. Declaration double Cash { get; } Property Value Type Description double CashValue The current cash value in the account. Declaration double CashValue { get; } Property Value Type Description double Equity The equity in the account, which is the value of the account's assets. Declaration double Equity { get; } Property Value Type Description double ExcessEquity The excess equity available in the account. Declaration double ExcessEquity { get; } Property Value Type Description double ExcessInitialMargin The excess initial margin available in the account. Declaration double ExcessInitialMargin { get; } Property Value Type Description double ExcessIntradayMargin The excess intraday margin available in the account. Declaration double ExcessIntradayMargin { get; } Property Value Type Description double GrossRealizedPnL The gross realized profit and loss for the account. Declaration double GrossRealizedPnL { get; } Property Value Type Description double InitialCash The initial cash amount deposited into the account. Declaration double InitialCash { get; } Property Value Type Description double InitialMargin The initial margin required for opening positions in the account. Declaration double InitialMargin { get; } Property Value Type Description double InitialMarginOvernight The initial margin required for holding overnight positions. Declaration double InitialMarginOvernight { get; } Property Value Type Description double IntradayMargin The intraday margin requirement for the account. Declaration double IntradayMargin { get; } Property Value Type Description double MaintenanceMargin The maintenance margin requirement for the account. Declaration double MaintenanceMargin { get; } Property Value Type Description double MaintenanceMarginOvernight The maintenance margin required for holding overnight positions. Declaration double MaintenanceMarginOvernight { get; } Property Value Type Description double MarketValue The market value of all positions held in the account. Declaration double MarketValue { get; } Property Value Type Description double Name The account name. Declaration string Name { get; } Property Value Type Description string NetLiquidation The net liquidation value, which is the current total value of the account. Declaration double NetLiquidation { get; } Property Value Type Description double NetLiquidationValue The net liquidation value including all assets and liabilities in the account. Declaration double NetLiquidationValue { get; } Property Value Type Description double Positions A list of positions currently held in the account. Declaration IReadOnlyList<IPosition> Positions { get; } Property Value Type Description IReadOnlyList<IPosition> RealizedPnL The realized profit and loss, representing closed positions. Declaration double RealizedPnL { get; } Property Value Type Description double TotalNetValue The total net value of the account, which combines equity and any liabilities. Declaration double TotalNetValue { get; } Property Value Type Description double TotalPnL The total profit and loss, combining both realized and unrealized profits/losses. Declaration double TotalPnL { get; } Property Value Type Description double UnrealizedPnL The unrealized profit and loss from open positions in the account. Declaration double UnrealizedPnL { get; } Property Value Type Description double"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IChart.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IChart.html",
    "title": "Interface IChart | Tickblaze",
    "keywords": "Interface IChart Represents a chart that displays financial data. Inherited Members ISize.Height ISize.Width Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IChart : ISize Properties FirstVisibleBarIndex The index of the first visible bar on the chart. Declaration int FirstVisibleBarIndex { get; } Property Value Type Description int LastVisibleBarIndex The index of the last visible bar on the chart. Declaration int LastVisibleBarIndex { get; } Property Value Type Description int Methods FormatTime(DateTime) Formats the given datetime into a string representation. Declaration string FormatTime(DateTime time) Parameters Type Name Description DateTime time The datetime value to format. Returns Type Description string A string representing the formatted datetime. GetBarIndexByXCoordinate(double) Gets the bar index by the specified X coordinate. Declaration int GetBarIndexByXCoordinate(double x) Parameters Type Name Description double x The X coordinate to get the bar index for. Returns Type Description int The bar index corresponding to the specified X coordinate. GetTimeByXCoordinate(double) Gets the time value by the specified X coordinate. Declaration DateTime GetTimeByXCoordinate(double x) Parameters Type Name Description double x The X coordinate to get the time value for. Returns Type Description DateTime The time value corresponding to the specified X coordinate. GetXCoordinateByBarIndex(int) Gets the X coordinate by the given bar index. Declaration double GetXCoordinateByBarIndex(int barIndex) Parameters Type Name Description int barIndex The index of the bar. Returns Type Description double The X coordinate corresponding to the specified bar index. GetXCoordinateByTime(DateTime) Gets the X coordinate by the specified time. Declaration double GetXCoordinateByTime(DateTime time) Parameters Type Name Description DateTime time The time to get the X coordinate for. Returns Type Description double The X coordinate corresponding to the specified time."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IChartObject.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IChartObject.html",
    "title": "Interface IChartObject | Tickblaze",
    "keywords": "Interface IChartObject Represents an object displayed on a chart, including its scale, and rendering behavior. Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IChartObject Properties Chart The chart to which this object belongs. Declaration IChart? Chart { get; } Property Value Type Description IChart ChartScale The scale used by this object on the chart. Declaration IChartScale? ChartScale { get; } Property Value Type Description IChartScale ShowOnChart Indicates whether the object is visible on the chart. Declaration bool ShowOnChart { get; } Property Value Type Description bool Methods OnRender(IDrawingContext) Draws the chart object using the specified drawing context. Declaration void OnRender(IDrawingContext context) Parameters Type Name Description IDrawingContext context The context used for rendering."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IChartPoint.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IChartPoint.html",
    "title": "Interface IChartPoint | Tickblaze",
    "keywords": "Interface IChartPoint Represents a point on a chart with a specific index, time, and value. Used to store data points on the chart, where each point has a unique index and associated time and value. Inherited Members IPoint.X IPoint.Y Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IChartPoint : IPoint Properties Index The index of the chart point, which serves as the position identifier of the point in the chart's data series. Declaration int Index { get; } Property Value Type Description int Time The time associated with the chart point. It represents the time at which the data point occurred. Declaration IComparable Time { get; set; } Property Value Type Description IComparable Value The value associated with the chart point, representing the data value at the given time. Declaration IComparable Value { get; set; } Property Value Type Description IComparable"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IChartPoints.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IChartPoints.html",
    "title": "Interface IChartPoints | Tickblaze",
    "keywords": "Interface IChartPoints Represents a collection of chart points that can be accessed and manipulated. Each chart point consists of X (time) and Y (value) data values. Inherited Members IReadOnlyList<IChartPoint>.this[int] IReadOnlyCollection<IChartPoint>.Count IEnumerable<IChartPoint>.GetEnumerator() Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IChartPoints : IReadOnlyList<IChartPoint>, IReadOnlyCollection<IChartPoint>, IEnumerable<IChartPoint>, IEnumerable Methods Add(IComparable, IComparable) Adds a new chart point to the collection with specified X and Y data values. Declaration void Add(IComparable xDataValue, IComparable yDataValue) Parameters Type Name Description IComparable xDataValue The X coordinate (time) of the chart point. IComparable yDataValue The Y coordinate (value) of the chart point. Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IChartScale.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IChartScale.html",
    "title": "Interface IChartScale | Tickblaze",
    "keywords": "Interface IChartScale Represents the scale for the price axis in a chart, including the maximum and minimum price. It provides methods to format prices and convert between price values and their corresponding Y coordinates. Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IChartScale Properties MaxPrice The maximum price value on the scale. Declaration double MaxPrice { get; } Property Value Type Description double MinPrice The minimum price value on the scale. Declaration double MinPrice { get; } Property Value Type Description double Methods FormatPrice(double) Formats the given price value into a string representation. Declaration string FormatPrice(double value) Parameters Type Name Description double value The price value to format. Returns Type Description string A string representing the formatted price. GetValueByYCoordinate(double) Gets the axis value for the specified Y coordinate in pixels. Declaration double GetValueByYCoordinate(double y) Parameters Type Name Description double y The Y coordinate in pixels to convert. Returns Type Description double The axis value corresponding to the specified Y coordinate in pixels. GetYCoordinateByValue(double) Gets the Y coordinate in pixels for the specified axis value. Declaration double GetYCoordinateByValue(double value) Parameters Type Name Description double value The axis value to convert. Returns Type Description double The Y coordinate in pixels corresponding to the specified axis value."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IDispatcher.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IDispatcher.html",
    "title": "Interface IDispatcher | Tickblaze",
    "keywords": "Interface IDispatcher Provides the ability to execute delegates on the UI thread Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IDispatcher Methods Invoke(Action) Executes the specified Action synchronously on the UI thread. Declaration void Invoke(Action action) Parameters Type Name Description Action action An Action delegate to invoke through the dispatcher. InvokeAsync(Action) Executes the specified Action asynchronously on the UI thread. Declaration Task InvokeAsync(Action action) Parameters Type Name Description Action action An Action delegate to invoke through the dispatcher. Returns Type Description Task InvokeAsync<T>(Func<T>) Executes the specified Action asynchronously on the UI thread. Declaration Task<T> InvokeAsync<T>(Func<T> callback) Parameters Type Name Description Func<T> callback A Func delegate to invoke through the dispatcher. Returns Type Description Task<T> The value returned by callback. Type Parameters Name Description T The return value type of the specified delegate. Invoke<T>(Func<T>) Executes the specified Func synchronously on the UI thread. Declaration T Invoke<T>(Func<T> callback) Parameters Type Name Description Func<T> callback A Func delegate to invoke through the dispatcher. Returns Type Description T The value returned by callback. Type Parameters Name Description T The return value type of the specified delegate."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IDrawingAnnotation.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IDrawingAnnotation.html",
    "title": "Interface IDrawingAnnotation | Tickblaze",
    "keywords": "Interface IDrawingAnnotation Represents a drawing annotation on a chart, typically used for visual elements such as lines, shapes, or markers. It contains a collection of points that define the shape or path of the annotation on the chart. Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IDrawingAnnotation Properties Points Gets the collection of points associated with the drawing annotation. Declaration IChartPoints Points { get; } Property Value Type Description IChartPoints"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IDrawingContext.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IDrawingContext.html",
    "title": "Interface IDrawingContext | Tickblaze",
    "keywords": "Interface IDrawingContext Defines a context for rendering graphical elements, including shapes, text, and lines. Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IDrawingContext Properties RenderSize The size of the rendering area. Declaration ISize RenderSize { get; } Property Value Type Description ISize Methods DrawEllipse(IPoint, double, double, Color?, Color?, int, LineStyle) Draws an ellipse with the specified dimensions and styling. Declaration void DrawEllipse(IPoint center, double radiusX, double radiusY, Color? fillColor, Color? lineColor = null, int lineThickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters Type Name Description IPoint center The center point of the ellipse. double radiusX The horizontal radius of the ellipse. double radiusY The vertical radius of the ellipse. Color? fillColor The color used to fill the ellipse. Color? lineColor The color of the ellipse's outline. int lineThickness The thickness of the outline. LineStyle lineStyle The style of the outline. DrawExtendedLine(IPoint, IPoint, Color, int, LineStyle) Draws a line extended in both directions beyond its endpoints. Declaration void DrawExtendedLine(IPoint pointA, IPoint pointB, Color color, int thickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters Type Name Description IPoint pointA The first point on the line. IPoint pointB The second point on the line. Color color The color of the line. int thickness The thickness of the line. LineStyle lineStyle The style of the line. DrawLine(IPoint, IPoint, Color, int, LineStyle) Draws a line between two points. Declaration void DrawLine(IPoint pointA, IPoint pointB, Color color, int thickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters Type Name Description IPoint pointA The first point of the line. IPoint pointB The second point of the line. Color color The color of the line. int thickness The thickness of the line. LineStyle lineStyle The style of the line. DrawPolygon(IEnumerable<IPoint>, Color?, Color?, int, LineStyle) Draws a polygon defined by a sequence of points. Declaration void DrawPolygon(IEnumerable<IPoint> points, Color? fillColor, Color? lineColor = null, int lineThickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters Type Name Description IEnumerable<IPoint> points The vertices of the polygon. Color? fillColor The color used to fill the polygon. Color? lineColor The color of the polygon's outline. int lineThickness The thickness of the outline. LineStyle lineStyle The style of the outline. DrawRay(IPoint, IPoint, Color, int, LineStyle) Draws a ray originating from a point and extending through a second point. Declaration void DrawRay(IPoint pointA, IPoint pointB, Color color, int thickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters Type Name Description IPoint pointA The starting point of the ray. IPoint pointB A point along the direction of the ray. Color color The color of the ray. int thickness The thickness of the ray. LineStyle lineStyle The style of the ray. DrawRectangle(IPoint, double, double, Color?, Color?, int, LineStyle) Draws a rectangle at the specified location with the given dimensions and styling. Declaration void DrawRectangle(IPoint pointA, double width, double height, Color? fillColor, Color? lineColor = null, int lineThickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters Type Name Description IPoint pointA The top-left corner of the rectangle. double width The width of the rectangle. double height The height of the rectangle. Color? fillColor The color used to fill the rectangle. Color? lineColor The color of the rectangle's outline. int lineThickness The thickness of the outline. LineStyle lineStyle The style of the outline. DrawRectangle(IPoint, IPoint, Color?, Color?, int, LineStyle) Draws a rectangle defined by two points with the given styling. Declaration void DrawRectangle(IPoint pointA, IPoint pointB, Color? fillColor, Color? lineColor = null, int lineThickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters Type Name Description IPoint pointA The corner of the rectangle. IPoint pointB The opposite corner of the rectangle. Color? fillColor The color used to fill the rectangle. Color? lineColor The color of the rectangle's outline. int lineThickness The thickness of the outline. LineStyle lineStyle The style of the outline. DrawText(IPoint, string, Color, Font?) Draws text at the specified origin point. Declaration void DrawText(IPoint origin, string text, Color color, Font? font = null) Parameters Type Name Description IPoint origin The location where the text is drawn. string text The text to draw. Color color The color of the text. Font font The font used for rendering the text. MeasureText(string, Font) Measures the dimensions of a given text string using the specified font. Declaration ISize MeasureText(string text, Font font) Parameters Type Name Description string text The text to measure. Font font The font used for measurement. Returns Type Description ISize The size of the rendered text."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IExchangeCalendar.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IExchangeCalendar.html",
    "title": "Interface IExchangeCalendar | Tickblaze",
    "keywords": "Interface IExchangeCalendar Defines methods for handling exchange calendars, including date/time conversion and session status. Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IExchangeCalendar Methods ExchangeDateTimeToUtcDateTime(DateTime) Converts a specified exchange date/time to a UTC date/time. Declaration DateTime ExchangeDateTimeToUtcDateTime(DateTime exchangeDateTime) Parameters Type Name Description DateTime exchangeDateTime The exchange date/time to convert. Returns Type Description DateTime The specified exchange date/time converted to UTC date/time. GetSession(DateTime) Retrieves a session at a specific UTC date/time. Declaration IExchangeSession? GetSession(DateTime utcDateTime) Parameters Type Name Description DateTime utcDateTime The UTC date/time to convert. Returns Type Description IExchangeSession The session at the specified UTC date/time, or null if none exists. IsSessionOpen(DateTime, bool) Determines whether there is an open session at a specified date/time. Declaration bool IsSessionOpen(DateTime utcDateTime, bool isIntraday) Parameters Type Name Description DateTime utcDateTime The UTC date/time. bool isIntraday Indicates whether the test is for intraday data. Returns Type Description bool True if there is an open session, false otherwise. UtcDateTimeToExchangeDateTime(DateTime) Converts a specified UTC date/time to an exchange date/time. Declaration DateTime UtcDateTimeToExchangeDateTime(DateTime utcDateTime) Parameters Type Name Description DateTime utcDateTime The UTC date/time to convert. Returns Type Description DateTime The specified UTC date/time converted to exchange date/time."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IExchangeSession.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IExchangeSession.html",
    "title": "Interface IExchangeSession | Tickblaze",
    "keywords": "Interface IExchangeSession Defines methods and properties for handling exchange sessions, including session times and duration. Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IExchangeSession Properties EndExchangeDateTime The end exchange date/time of the session. Declaration DateTime EndExchangeDateTime { get; } Property Value Type Description DateTime EndUtcDateTime The end UTC date/time of the session. Declaration DateTime EndUtcDateTime { get; } Property Value Type Description DateTime SessionMinutes The session duration in minutes. Declaration int SessionMinutes { get; } Property Value Type Description int SessionSeconds The session duration in seconds. Declaration int SessionSeconds { get; } Property Value Type Description int StartExchangeDateTime The start exchange date/time of the session. Declaration DateTime StartExchangeDateTime { get; } Property Value Type Description DateTime StartUtcDateTime The start UTC date/time of the session. Declaration DateTime StartUtcDateTime { get; } Property Value Type Description DateTime TotalMinutes The total minute count from the first minute of the first session. Declaration int TotalMinutes { get; } Property Value Type Description int Methods Contains(DateTime) Determines whether the provided UTC date/time is within the session. Declaration bool Contains(DateTime utcDateTime) Parameters Type Name Description DateTime utcDateTime The UTC date/time to check. Returns Type Description bool True if the date/time is within the session, false otherwise."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IMetadata.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IMetadata.html",
    "title": "Interface IMetadata | Tickblaze",
    "keywords": "Interface IMetadata Defines metadata properties for a script, including name, description, and related metadata. Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IMetadata Properties Description A description of the script. Declaration string Description { get; } Property Value Type Description string Metadata Associated metadata for the script. Declaration Metadata Metadata { get; } Property Value Type Description Metadata Name The name of the script. Declaration string Name { get; } Property Value Type Description string ShortName The short name of the script. Declaration string ShortName { get; } Property Value Type Description string"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IPlot.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IPlot.html",
    "title": "Interface IPlot | Tickblaze",
    "keywords": "Interface IPlot Defines properties for a plot including visual appearance. Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IPlot Properties Color The color of the plot. Declaration Color Color { get; } Property Value Type Description Color IsVisible Indicates whether the plot is visible. Declaration bool IsVisible { get; } Property Value Type Description bool LineStyle The line style of the plot. Declaration LineStyle LineStyle { get; } Property Value Type Description LineStyle Name The name of the plot. Declaration [JsonIgnore] string Name { get; } Property Value Type Description string Thickness The thickness of the plot's line. Declaration int Thickness { get; } Property Value Type Description int"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IPoint.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IPoint.html",
    "title": "Interface IPoint | Tickblaze",
    "keywords": "Interface IPoint Defines properties for a point with X and Y coordinates. Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IPoint Properties X The X coordinate of the point. Declaration double X { get; set; } Property Value Type Description double Y The Y coordinate of the point. Declaration double Y { get; set; } Property Value Type Description double"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IScript.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IScript.html",
    "title": "Interface IScript | Tickblaze",
    "keywords": "Interface IScript Defines properties and methods for a script, including initialization and metadata. Inherited Members IDisposable.Dispose() Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IScript : IDisposable Properties IsInitialized Indicates whether the script has been initialized. Declaration bool IsInitialized { get; } Property Value Type Description bool Metadata The metadata associated with the script. Declaration Metadata Metadata { get; } Property Value Type Description Metadata Parameters The parameters for the script. Declaration Parameters Parameters { get; } Property Value Type Description Parameters Methods Initialize() Initializes the script. Declaration void Initialize()"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.ISeries-1.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.ISeries-1.html",
    "title": "Interface ISeries<TItem> | Tickblaze",
    "keywords": "Interface ISeries<TItem> Defines a series of items and provides methods to retrieve specific items from the series. Inherited Members IReadOnlyList<TItem>.this[int] IReadOnlyCollection<TItem>.Count IEnumerable<TItem>.GetEnumerator() Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface ISeries<out TItem> : IReadOnlyList<TItem?>, IReadOnlyCollection<TItem?>, IEnumerable<TItem?>, IEnumerable Type Parameters Name Description TItem The type of items in the series. Methods Last(int) Retrieves the last item in the series, optionally going back a specified number of bars. Declaration TItem? Last(int barsAgo = 0) Parameters Type Name Description int barsAgo The number of bars ago to retrieve the item from. Returns Type Description TItem The item at the specified position in the series, or null if not found. Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.ISize.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.ISize.html",
    "title": "Interface ISize | Tickblaze",
    "keywords": "Interface ISize Defines properties for the size, including height and width. Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface ISize Properties Height The height of the size. Declaration double Height { get; } Property Value Type Description double Width The width of the size. Declaration double Width { get; } Property Value Type Description double"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.ISymbol.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.ISymbol.html",
    "title": "Interface ISymbol | Tickblaze",
    "keywords": "Interface ISymbol Defines properties and methods related to a symbol, including tick size, point size, and volume normalization. Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface ISymbol Properties CurrencyCode The currency code of the symbol. Declaration string CurrencyCode { get; } Property Value Type Description string Decimals The number of decimals for the symbol. Declaration int Decimals { get; } Property Value Type Description int Description The description of the symbol. Declaration string Description { get; } Property Value Type Description string ExchangeCalendar The exchange calendar for the symbol. Declaration IExchangeCalendar ExchangeCalendar { get; } Property Value Type Description IExchangeCalendar MinimumVolume The minimum volume for the symbol. Declaration decimal MinimumVolume { get; } Property Value Type Description decimal Name The name of the symbol. Declaration string Name { get; } Property Value Type Description string PointSize The point size of the symbol. Declaration double PointSize { get; } Property Value Type Description double PointValue The point value of the symbol. Declaration double PointValue { get; } Property Value Type Description double TickSize The tick size of the symbol. Declaration double TickSize { get; } Property Value Type Description double TickValue The tick value of the symbol. Declaration double TickValue { get; } Property Value Type Description double TicksPerPoint The number of ticks per point for the symbol. Declaration double TicksPerPoint { get; } Property Value Type Description double Methods FormatPrice(double) Formats a price as a string for the symbol. Declaration string FormatPrice(double price) Parameters Type Name Description double price The price to format. Returns Type Description string The formatted price as a string. NormalizeVolume(double, RoundingMode) Normalizes a volume to the symbol's tradable volume, applying the specified rounding mode. Declaration decimal NormalizeVolume(double volume, RoundingMode roundingMode) Parameters Type Name Description double volume The volume to normalize. RoundingMode roundingMode The rounding mode to apply. Returns Type Description decimal The normalized volume. RoundToTick(double) Rounds a value to the nearest tick. Declaration double RoundToTick(double value) Parameters Type Name Description double value The value to round. Returns Type Description double The value rounded to the nearest tick."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrder.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrder.html",
    "title": "Interface IOrder | Tickblaze",
    "keywords": "Interface IOrder Represents an order within the trading system, containing details about the order's characteristics and state. Namespace: Tickblaze.Scripts.Api.Interfaces.Orders Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IOrder Properties Direction The direction of the order (e.g., long, short). Declaration OrderDirection Direction { get; } Property Value Type Description OrderDirection Index The index of the order, providing a unique identifier within the system. Declaration int Index { get; } Property Value Type Description int LimitPrice The limit price for the order, if applicable. Declaration double LimitPrice { get; } Property Value Type Description double Price The execution price of the order. Declaration double Price { get; } Property Value Type Description double Quantity The quantity of the order, representing the number of units to buy or sell. Declaration double Quantity { get; } Property Value Type Description double Status The current status of the order (e.g., pending, executed, canceled). Declaration OrderStatus Status { get; } Property Value Type Description OrderStatus StopPrice The stop price for the order, if applicable. Declaration double StopPrice { get; } Property Value Type Description double Symbol The financial symbol associated with the order. Declaration ISymbol Symbol { get; } Property Value Type Description ISymbol TimeInForce Specifies how long the order remains active in the market (e.g., Good Till Cancelled, Immediate or Cancel). Declaration TimeInForce TimeInForce { get; } Property Value Type Description TimeInForce Type The type of the order (e.g., market, limit, stop). Declaration OrderType Type { get; } Property Value Type Description OrderType"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrderAccessor.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrderAccessor.html",
    "title": "Interface IOrderAccessor | Tickblaze",
    "keywords": "Interface IOrderAccessor Provides access to order-related information and functionality within the trading system. Namespace: Tickblaze.Scripts.Api.Interfaces.Orders Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IOrderAccessor Properties Account The account associated with the orders and position. Declaration IAccount Account { get; } Property Value Type Description IAccount PendingOrders A collection of orders that are currently pending execution. Declaration IReadOnlyList<IOrder> PendingOrders { get; } Property Value Type Description IReadOnlyList<IOrder> Position The position associated with the current symbol and account. Declaration IPosition Position { get; } Property Value Type Description IPosition Symbol The financial symbol associated with the orders and position. Declaration ISymbol Symbol { get; } Property Value Type Description ISymbol Methods GetExchangeRate(string, string) Retrieves the exchange rate for converting one currency to another. Declaration double GetExchangeRate(string fromCurrency, string toCurrency) Parameters Type Name Description string fromCurrency The currency to convert from (e.g., \"USD\"). string toCurrency The currency to convert to (e.g., \"EUR\"). Returns Type Description double The exchange rate between the specified currencies."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrderManager.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrderManager.html",
    "title": "Interface IOrderManager | Tickblaze",
    "keywords": "Interface IOrderManager Provides methods for managing orders and positions within the trading system. Inherited Members IOrderAccessor.GetExchangeRate(string, string) IOrderAccessor.Symbol IOrderAccessor.Account IOrderAccessor.PendingOrders IOrderAccessor.Position Namespace: Tickblaze.Scripts.Api.Interfaces.Orders Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IOrderManager : IOrderAccessor Methods CancelOrder(IOrder, string, bool) Cancels the specified order with an optional comment. The order to cancel. Optional comment for the order. Indicates if the cancellation should be silent. Declaration void CancelOrder(IOrder order, string comment = \"\", bool cancelSilently = false) Parameters Type Name Description IOrder order string comment bool cancelSilently ClosePosition(string) Closes the entire position with an optional comment. Optional comment for the order. Declaration void ClosePosition(string comment = \"\") Parameters Type Name Description string comment ExecuteMarketOrder(OrderAction, double, TimeInForce, string) Executes a market order immediately based on the given action and quantity. Declaration IOrder ExecuteMarketOrder(OrderAction action, double quantity, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action The buy or sell action. double quantity The order quantity. TimeInForce timeInForce Order duration setting. Defaults to Day. string comment Optional order comment. Returns Type Description IOrder GetOrderExpectedPrice(IOrder) Gets estimated fill price of pending order. Declaration double GetOrderExpectedPrice(IOrder order) Parameters Type Name Description IOrder order The pending order. Returns Type Description double ModifyOrder(IOrder, double, double?, double?, TimeInForce) Modifies an existing order. The order of open position. Order quantity. Stop price if applicable. Limit price if applicable. Order duration. Defaults to Day. Declaration void ModifyOrder(IOrder order, double quantity, double? stopPrice, double? limitPrice, TimeInForce timeInForce = TimeInForce.Day) Parameters Type Name Description IOrder order double quantity double? stopPrice double? limitPrice TimeInForce timeInForce PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) Places a limit order. Declaration IOrder PlaceLimitOrder(OrderAction action, double quantity, double limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action The buy or sell action. double quantity Order quantity. double limitPrice Limit price. TimeInForce timeInForce Order duration. Defaults to Day. string comment Optional comment for the order. Returns Type Description IOrder PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) Places an order of specified type with defined price parameters. Declaration IOrder PlaceOrder(OrderAction action, OrderType type, double quantity, double? stopPrice, double? limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action The buy or sell action. OrderType type Order type (e.g., Limit, Stop). double quantity Order quantity. double? stopPrice Stop price if applicable. double? limitPrice Limit price if applicable. TimeInForce timeInForce Order duration. Defaults to Day. string comment Optional comment for the order. Returns Type Description IOrder PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) Places a stop-limit order. The buy or sell action. Order quantity. Stop price. Limit price. Order duration. Defaults to Day. Optional comment for the order. Declaration IOrder PlaceStopLimitOrder(OrderAction action, double quantity, double stopPrice, double limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action double quantity double stopPrice double limitPrice TimeInForce timeInForce string comment Returns Type Description IOrder PlaceStopOrder(OrderAction, double, double, TimeInForce, string) Places a stop order that activates when the stop price is reached. The buy or sell action. Order quantity. Stop price. Order duration. Defaults to Day. Optional comment for the order. Declaration IOrder PlaceStopOrder(OrderAction action, double quantity, double stopPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action double quantity double stopPrice TimeInForce timeInForce string comment Returns Type Description IOrder SetStopLoss(IOrder, double, string) Sets a stop-loss order on an open position at a specified price. Declaration IOrder SetStopLoss(IOrder order, double stopPrice, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the stop-loss is applied. double stopPrice The price at which the stop-loss order is set. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the stop-loss applied. SetStopLossPercent(IOrder, double, string) Sets a stop-loss order on an open position based on a specified percentage from the entry price. Declaration IOrder SetStopLossPercent(IOrder order, double percent, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the stop-loss is applied. double percent The percentage away from the entry price to place the stop-loss. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the stop-loss applied. SetStopLossTicks(IOrder, int, string) Sets a stop-loss order on an open position based on a specified number of ticks from the entry price. Declaration IOrder SetStopLossTicks(IOrder order, int ticks, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the stop-loss is applied. int ticks The number of ticks away from the entry price to place the stop-loss. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the stop-loss applied. SetTakeProfit(IOrder, double, string) Sets a take-profit order at a specified price to close a position when the price is reached. Declaration IOrder SetTakeProfit(IOrder order, double limitPrice, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the take-profit is applied. double limitPrice The price at which the take-profit order is set. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the take-profit applied. SetTakeProfitPercent(IOrder, double, string) Sets a take-profit order on an open position based on a specified percentage from the entry price. Declaration IOrder SetTakeProfitPercent(IOrder order, double percent, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the take-profit is applied. double percent The percentage away from the entry price to place the take-profit. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the take-profit applied. SetTakeProfitTicks(IOrder, int, string) Sets a take-profit order on an open position based on a specified number of ticks from the entry price. Declaration IOrder SetTakeProfitTicks(IOrder order, int ticks, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the take-profit is applied. int ticks The number of ticks away from the entry price to place the take-profit. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the take-profit applied."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrders.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrders.html",
    "title": "Interface IOrders | Tickblaze",
    "keywords": "Interface IOrders Represents a collection of orders. Inherited Members IEnumerable<IOrder>.GetEnumerator() Namespace: Tickblaze.Scripts.Api.Interfaces.Orders Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IOrders : IEnumerable<IOrder>, IEnumerable Properties Count Gets the total number of orders in the collection. Declaration int Count { get; } Property Value Type Description int this[int] Gets the order at the specified index. Declaration IOrder this[int index] { get; } Parameters Type Name Description int index The zero-based index of the order to retrieve. Property Value Type Description IOrder The order at the specified index. Events Cancelled Occurs when an order is canceled. Declaration event Action<IOrder> Cancelled Event Type Type Description Action<IOrder> Created Occurs when a new order is created. Declaration event Action<IOrder> Created Event Type Type Description Action<IOrder> Filled Occurs when an order is filled. Declaration event Action<IOrder> Filled Event Type Type Description Action<IOrder> Modified Occurs when an existing order is modified. Declaration event Action<IOrder> Modified Event Type Type Description Action<IOrder>"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.Orders.IPosition.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.Orders.IPosition.html",
    "title": "Interface IPosition | Tickblaze",
    "keywords": "Interface IPosition Represents a trading position in the market, providing details about its state, pricing, and quantity. Namespace: Tickblaze.Scripts.Api.Interfaces.Orders Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IPosition Properties Commission Gets the total commission incurred for the position. Declaration double Commission { get; } Property Value Type Description double Direction Gets the direction of the position, indicating whether it is long or short. Declaration OrderDirection Direction { get; } Property Value Type Description OrderDirection EntryPrice Gets the price at which the position was entered. Declaration double EntryPrice { get; } Property Value Type Description double ExitPrice Gets the price at which the position was exited. This is zero for an open position. Declaration double ExitPrice { get; } Property Value Type Description double Quantity Gets the quantity of the position. Declaration double Quantity { get; } Property Value Type Description double Status Gets the current status of the position. Declaration PositionStatus Status { get; } Property Value Type Description PositionStatus Symbol Gets the trading symbol associated with the position. Declaration ISymbol Symbol { get; } Property Value Type Description ISymbol"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.Orders.IPositions.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.Orders.IPositions.html",
    "title": "Interface IPositions | Tickblaze",
    "keywords": "Interface IPositions Represents a collection of positions. Inherited Members IEnumerable<IPosition>.GetEnumerator() Namespace: Tickblaze.Scripts.Api.Interfaces.Orders Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IPositions : IEnumerable<IPosition>, IEnumerable Properties Count Gets the number of positions in the collection. Declaration int Count { get; } Property Value Type Description int this[int] Gets the position at the specified index in the collection. Declaration IPosition this[int index] { get; } Parameters Type Name Description int index The zero-based index of the position. Property Value Type Description IPosition The position at the specified index. Events Closed Occurs when a position is closed. Declaration event Action<IPosition> Closed Event Type Type Description Action<IPosition> Modified Occurs when an existing position is modified. Declaration event Action<IPosition> Modified Event Type Type Description Action<IPosition> Opened Occurs when a new position is opened. Declaration event Action<IPosition> Opened Event Type Type Description Action<IPosition>"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.Orders.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.Orders.html",
    "title": "Namespace Tickblaze.Scripts.Api.Interfaces.Orders | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Interfaces.Orders Interfaces IOrder Represents an order within the trading system, containing details about the order's characteristics and state. IOrderAccessor Provides access to order-related information and functionality within the trading system. IOrderManager Provides methods for managing orders and positions within the trading system. IOrders Represents a collection of orders. IPosition Represents a trading position in the market, providing details about its state, pricing, and quantity. IPositions Represents a collection of positions."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.html",
    "title": "Namespace Tickblaze.Scripts.Api.Interfaces | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Interfaces Interfaces IAccount Represents trading account with balance, margin, positions, and equity details. IChart Represents a chart that displays financial data. IChartObject Represents an object displayed on a chart, including its scale, and rendering behavior. IChartPoint Represents a point on a chart with a specific index, time, and value. Used to store data points on the chart, where each point has a unique index and associated time and value. IChartPoints Represents a collection of chart points that can be accessed and manipulated. Each chart point consists of X (time) and Y (value) data values. IChartScale Represents the scale for the price axis in a chart, including the maximum and minimum price. It provides methods to format prices and convert between price values and their corresponding Y coordinates. IDispatcher Provides the ability to execute delegates on the UI thread IDrawingAnnotation Represents a drawing annotation on a chart, typically used for visual elements such as lines, shapes, or markers. It contains a collection of points that define the shape or path of the annotation on the chart. IDrawingContext Defines a context for rendering graphical elements, including shapes, text, and lines. IExchangeCalendar Defines methods for handling exchange calendars, including date/time conversion and session status. IExchangeSession Defines methods and properties for handling exchange sessions, including session times and duration. IMetadata Defines metadata properties for a script, including name, description, and related metadata. IPlot Defines properties for a plot including visual appearance. IPoint Defines properties for a point with X and Y coordinates. IScript Defines properties and methods for a script, including initialization and metadata. ISeries<TItem> Defines a series of items and provides methods to retrieve specific items from the series. ISize Defines properties for the size, including height and width. ISymbol Defines properties and methods related to a symbol, including tick size, point size, and volume normalization."
  },
  "api/Tickblaze.Scripts.Api.Models.Bar.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Bar.html",
    "title": "Class Bar | Tickblaze",
    "keywords": "Class Bar Represents a single bar of market data, including the open, high, low, close prices, volume, and time. Inheritance object Bar Implements IEquatable<Bar> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public record Bar : IEquatable<Bar> Constructors Bar(DateTime, double, double, double, double, double) Represents a single bar of market data, including the open, high, low, close prices, volume, and time. Declaration public Bar(DateTime Time, double Open, double High, double Low, double Close, double Volume) Parameters Type Name Description DateTime Time The time of the bar. double Open The opening price of the bar. double High The highest price of the bar. double Low The lowest price of the bar. double Close The closing price of the bar. double Volume The traded volume of the bar. Bar(Bar) Declaration protected Bar(Bar original) Parameters Type Name Description Bar original Properties Close The closing price of the bar. Declaration public double Close { get; init; } Property Value Type Description double High The highest price of the bar. Declaration public double High { get; init; } Property Value Type Description double Low The lowest price of the bar. Declaration public double Low { get; init; } Property Value Type Description double Open The opening price of the bar. Declaration public double Open { get; init; } Property Value Type Description double Time The time of the bar. Declaration public DateTime Time { get; init; } Property Value Type Description DateTime Volume The traded volume of the bar. Declaration public double Volume { get; init; } Property Value Type Description double Methods Deconstruct(out DateTime, out double, out double, out double, out double, out double) Declaration public void Deconstruct(out DateTime Time, out double Open, out double High, out double Low, out double Close, out double Volume) Parameters Type Name Description DateTime Time double Open double High double Low double Close double Volume Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) Equals(Bar?) Declaration public virtual bool Equals(Bar? other) Parameters Type Name Description Bar other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() get_EqualityContract() Declaration protected virtual Type get_EqualityContract() Returns Type Description Type Operators operator ==(Bar?, Bar?) Declaration public static bool operator ==(Bar? left, Bar? right) Parameters Type Name Description Bar left Bar right Returns Type Description bool operator !=(Bar?, Bar?) Declaration public static bool operator !=(Bar? left, Bar? right) Parameters Type Name Description Bar left Bar right Returns Type Description bool Implements IEquatable<T>"
  },
  "api/Tickblaze.Scripts.Api.Models.BarPeriod.PeriodType.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.BarPeriod.PeriodType.html",
    "title": "Enum BarPeriod.PeriodType | Tickblaze",
    "keywords": "Enum BarPeriod.PeriodType Defines the different period types for the bar. Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public enum BarPeriod.PeriodType Fields Name Description BidAsk The bid-ask period. Custom The custom period type defined by the user. Day The daily period. HeikinAshi The Heikin Ashi period, a type of candlestick chart. Kagi The Kagi chart period. Level2 The Level 2 period, typically used for market depth data. LineBreak The Line Break chart period. Minute The period based on minutes. Momentum The momentum-based period. Month The monthly period. None No period type specified. PointAndFigureClose The Point and Figure chart with close-based periods. PointAndFigureHighLow The Point and Figure chart with high-low periods. ProfileDay The profile-based period with day granularity. ProfileMinute The profile-based period with minute granularity. ProfileMonth The profile-based period with month granularity. ProfileRange The profile-based period with range granularity. ProfileTick The profile-based period with tick granularity. ProfileVolume The profile-based period with volume granularity. ProfileWeek The profile-based period with week granularity. ProfileYear The profile-based period with year granularity. Range The range-based period. Renko The Renko period, another type of chart that ignores time. Second The period based on seconds. Tick The tick-based period. Volume The volume-based period. Week The weekly period. Year The yearly period."
  },
  "api/Tickblaze.Scripts.Api.Models.BarPeriod.SourceType.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.BarPeriod.SourceType.html",
    "title": "Enum BarPeriod.SourceType | Tickblaze",
    "keywords": "Enum BarPeriod.SourceType Defines the different source types for the bar. Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public enum BarPeriod.SourceType Fields Name Description Ask The ask price data. Bid The bid price data. Day Daily price data. Level2 Level 2 market data. Minute Minute-based price data. Trade Trade data."
  },
  "api/Tickblaze.Scripts.Api.Models.BarPeriod.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.BarPeriod.html",
    "title": "Class BarPeriod | Tickblaze",
    "keywords": "Class BarPeriod Represents the period of a bar, including its source type, period type, and size. Inheritance object BarPeriod Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public sealed class BarPeriod Constructors BarPeriod(SourceType, PeriodType, double) Represents the period of a bar, including its source type, period type, and size. Declaration public BarPeriod(BarPeriod.SourceType source, BarPeriod.PeriodType type, double size) Parameters Type Name Description BarPeriod.SourceType source BarPeriod.PeriodType type double size Properties Size The size of the bar period (e.g., 5 minutes, 1 day). Declaration public double Size { get; } Property Value Type Description double Source The source of the bar period (e.g., Ask, Bid, Trade). Declaration public BarPeriod.SourceType Source { get; } Property Value Type Description BarPeriod.SourceType Type The type of period for the bar (e.g., Day, Week, Minute). Declaration public BarPeriod.PeriodType Type { get; } Property Value Type Description BarPeriod.PeriodType"
  },
  "api/Tickblaze.Scripts.Api.Models.BarSeries.BarEventArgs.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.BarSeries.BarEventArgs.html",
    "title": "Class BarSeries.BarEventArgs | Tickblaze",
    "keywords": "Class BarSeries.BarEventArgs Event arguments for the BarClosed event. Inheritance object EventArgs BarSeries.BarEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class BarSeries.BarEventArgs : EventArgs Constructors BarEventArgs() Declaration public BarEventArgs() Properties Bar The closed bar. Declaration public required Bar Bar { get; set; } Property Value Type Description Bar Index The index of the closed bar. Declaration public required int Index { get; set; } Property Value Type Description int"
  },
  "api/Tickblaze.Scripts.Api.Models.BarSeries.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.BarSeries.html",
    "title": "Class BarSeries | Tickblaze",
    "keywords": "Class BarSeries Represents a series of bars, with various calculated series such as Low, High, Open, Close, and others. Inheritance object Series<Bar> BarSeries Implements ISeries<Bar> IReadOnlyList<Bar> IReadOnlyCollection<Bar> IEnumerable<Bar> IEnumerable Inherited Members Series<Bar>.Values Series<Bar>.get_DefaultValue() Series<Bar>.Last(int) Series<Bar>.Append(Bar) Series<Bar>.GetEnumerator() Series<Bar>.Count object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class BarSeries : Series<Bar>, ISeries<Bar>, IReadOnlyList<Bar?>, IReadOnlyCollection<Bar?>, IEnumerable<Bar?>, IEnumerable Constructors BarSeries(Symbol, BarPeriod) Initializes a new instance of the BarSeries class with a specified symbol and period. Declaration public BarSeries(Symbol symbol, BarPeriod period) Parameters Type Name Description Symbol symbol The symbol of the bar series. BarPeriod period The period of the bars in the series. Properties Close The series of close prices for each bar. Declaration public ISeries<double> Close { get; } Property Value Type Description ISeries<double> High The series of high prices for each bar. Declaration public ISeries<double> High { get; } Property Value Type Description ISeries<double> this[int] Indexer to access bars in the series by their index. Declaration public override Bar? this[int index] { get; set; } Parameters Type Name Description int index The index of the bar. Property Value Type Description Bar The bar at the specified index. Overrides Series<Bar>.this[int] Low The series of low prices for each bar. Declaration public ISeries<double> Low { get; } Property Value Type Description ISeries<double> MedianPrice The series of median prices for each bar. Declaration public ISeries<double> MedianPrice { get; } Property Value Type Description ISeries<double> Open The series of open prices for each bar. Declaration public ISeries<double> Open { get; } Property Value Type Description ISeries<double> Period The period of the bars in the series. Declaration public BarPeriod Period { get; } Property Value Type Description BarPeriod Symbol The symbol associated with the bar series. Declaration public Symbol Symbol { get; } Property Value Type Description Symbol Time The series of time for each bar. Declaration public ISeries<DateTime> Time { get; } Property Value Type Description ISeries<DateTime> TypicalPrice The series of typical prices for each bar. Declaration public ISeries<double> TypicalPrice { get; } Property Value Type Description ISeries<double> Volume The series of volumes for each bar. Declaration public ISeries<double> Volume { get; } Property Value Type Description ISeries<double> Methods Slice(DateTime) Slices the series starting from a specific UTC date/time. Declaration public IEnumerable<int> Slice(DateTime dateTimeUtc) Parameters Type Name Description DateTime dateTimeUtc The UTC date/time to slice from. Returns Type Description IEnumerable<int> A sequence of indexes starting from the given date/time. Events BarClosed Event triggered when a bar is closed. Declaration public event Action<BarSeries.BarEventArgs> BarClosed Event Type Type Description Action<BarSeries.BarEventArgs> Implements ISeries<TItem> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "api/Tickblaze.Scripts.Api.Models.ChartPoint.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.ChartPoint.html",
    "title": "Class ChartPoint | Tickblaze",
    "keywords": "Class ChartPoint Represents a point on a chart with a specific index, time, and value. Used to store data points on the chart, where each point has a unique index and associated time and value. Inheritance object Point ChartPoint Implements IChartPoint IPoint Inherited Members Point.X Point.Y object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class ChartPoint : Point, IChartPoint, IPoint Constructors ChartPoint() Declaration public ChartPoint() Properties Index The index of the chart point, which serves as the position identifier of the point in the chart's data series. Declaration public int Index { get; } Property Value Type Description int Time The time associated with the chart point. It represents the time at which the data point occurred. Declaration public IComparable Time { get; set; } Property Value Type Description IComparable Value The value associated with the chart point, representing the data value at the given time. Declaration public IComparable Value { get; set; } Property Value Type Description IComparable Implements IChartPoint IPoint"
  },
  "api/Tickblaze.Scripts.Api.Models.Color.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Color.html",
    "title": "Struct Color | Tickblaze",
    "keywords": "Struct Color Represents a color with alpha, red, green, and blue values. Implements IEquatable<Color> Inherited Members ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public readonly struct Color : IEquatable<Color> Constructors Color(byte, byte, byte, byte) Represents a color with alpha, red, green, and blue values. Declaration public Color(byte a, byte r, byte g, byte b) Parameters Type Name Description byte a The alpha value of the color. byte r The red value of the color. byte g The green value of the color. byte b The blue value of the color. Fields Black Declaration public static readonly Color Black Field Value Type Description Color Blue Declaration public static readonly Color Blue Field Value Type Description Color CoolGray Declaration public static readonly Color CoolGray Field Value Type Description Color Cyan Declaration public static readonly Color Cyan Field Value Type Description Color DarkGray Declaration public static readonly Color DarkGray Field Value Type Description Color DeepPurple Declaration public static readonly Color DeepPurple Field Value Type Description Color DimGray Declaration public static readonly Color DimGray Field Value Type Description Color Empty Declaration public static readonly Color Empty Field Value Type Description Color Gray Declaration public static readonly Color Gray Field Value Type Description Color Green Declaration public static readonly Color Green Field Value Type Description Color Gunmetal Declaration public static readonly Color Gunmetal Field Value Type Description Color LightGray Declaration public static readonly Color LightGray Field Value Type Description Color Orange Declaration public static readonly Color Orange Field Value Type Description Color Pink Declaration public static readonly Color Pink Field Value Type Description Color Purple Declaration public static readonly Color Purple Field Value Type Description Color Red Declaration public static readonly Color Red Field Value Type Description Color Silver Declaration public static readonly Color Silver Field Value Type Description Color SteelGray Declaration public static readonly Color SteelGray Field Value Type Description Color TealGreen Declaration public static readonly Color TealGreen Field Value Type Description Color Transparent Declaration public static readonly Color Transparent Field Value Type Description Color White Declaration public static readonly Color White Field Value Type Description Color Yellow Declaration public static readonly Color Yellow Field Value Type Description Color Properties A The alpha value of the color. Declaration public byte A { get; } Property Value Type Description byte B The blue value of the color. Declaration public byte B { get; } Property Value Type Description byte G The green value of the color. Declaration public byte G { get; } Property Value Type Description byte Hex The HEX value of the color. Declaration public string Hex { get; } Property Value Type Description string R The red value of the color. Declaration public byte R { get; } Property Value Type Description byte Methods CanArgbHexBeParsed(string) Checks if an ARGB hex string can be parsed into a valid color. Declaration public static bool CanArgbHexBeParsed(string hex) Parameters Type Name Description string hex The ARGB hex string to check. Returns Type Description bool True if the string can be parsed; otherwise, false. Equals(object) Checks if the current color is equal to an object. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with. Returns Type Description bool True if the object is a color and equals the current color; otherwise, false. Overrides ValueType.Equals(object) Equals(Color) Checks if the current color is equal to another color. Declaration public bool Equals(Color other) Parameters Type Name Description Color other The other color to compare with. Returns Type Description bool True if the colors are equal; otherwise, false. FromArgb(byte, byte, byte, byte) Creates a color from ARGB values. Declaration public static Color FromArgb(byte a, byte r, byte g, byte b) Parameters Type Name Description byte a Alpha value (0-255). byte r Red value (0-255). byte g Green value (0-255). byte b Blue value (0-255). Returns Type Description Color A new Color instance with the specified ARGB values. FromDrawingColor(Color) Converts a Color to a Color. Declaration public static Color FromDrawingColor(Color color) Parameters Type Name Description Color color The Color instance. Returns Type Description Color A new Color instance representing the system drawing color. FromName(string, string?) Creates a color from the specified name. Declaration public static Color FromName(string colorName, string? fallbackColorName = null) Parameters Type Name Description string colorName The name of the color. string fallbackColorName The fallback color name if the first is not found. Returns Type Description Color A new Color instance corresponding to the name. FromRgb(byte, byte, byte) Creates a color from RGB values. Declaration public static Color FromRgb(byte r, byte g, byte b) Parameters Type Name Description byte r Red value (0-255). byte g Green value (0-255). byte b Blue value (0-255). Returns Type Description Color A new Color instance with the specified RGB values. FromRgba(byte, byte, byte, byte) Creates a color from RGBA values. Declaration public static Color FromRgba(byte r, byte g, byte b, byte a) Parameters Type Name Description byte r Red value (0-255). byte g Green value (0-255). byte b Blue value (0-255). byte a Alpha value (0-255). Returns Type Description Color A new Color instance with the specified RGBA values. GetHashCode() Gets the hash code for the color. Declaration public override int GetHashCode() Returns Type Description int The hash code of the color. Overrides ValueType.GetHashCode() New(Color, float) Creates a new Color instance with the specified opacity level. Declaration public static Color New(Color color, float opacity) Parameters Type Name Description Color color The base color to adjust. float opacity The desired opacity level as a float (0.0 to 1.0). Returns Type Description Color A new Color instance with the specified opacity. ParseArgbHex(string) Parses an ARGB hex string into a Color instance. Declaration public static Color ParseArgbHex(string hex) Parameters Type Name Description string hex The ARGB hex string to parse. Returns Type Description Color A new Color instance representing the parsed hex string. ParseRgbaHex(string) Parses an RGBA hex string into a Color instance. Declaration public static Color ParseRgbaHex(string hex) Parameters Type Name Description string hex The RGBA hex string to parse. Returns Type Description Color A new Color instance representing the parsed hex string. ToArgbHex() Converts the color to its ARGB hex representation. Declaration public string ToArgbHex() Returns Type Description string A string representing the ARGB hex value of the color. ToRgbHex() Converts the color to its RGB hex representation. Declaration public string ToRgbHex() Returns Type Description string A string representing the RGB hex value of the color. ToRgbaHex() Converts the color to its RGBA hex representation. Declaration public string ToRgbaHex() Returns Type Description string A string representing the RGBA hex value of the color. TryParse(string, string, out Color) Tries to parse a color from a hex string or color name. Declaration public static bool TryParse(string hexOrName, string fallbackColorName, out Color color) Parameters Type Name Description string hexOrName The hex string or color name. string fallbackColorName The fallback color name if parsing fails. Color color The resulting color. Returns Type Description bool True if the parsing was successful; otherwise, false. Operators operator ==(Color, Color) Determines whether two Color objects are equal. Declaration public static bool operator ==(Color left, Color right) Parameters Type Name Description Color left The first Color to compare. Color right The second Color to compare. Returns Type Description bool true if the two Color objects are equal; otherwise, false. implicit operator Color(byte[]) Implicitly converts a byte array to a Color object. Declaration public static implicit operator Color(byte[] bytes) Parameters Type Name Description byte[] bytes A byte array representing a color in RGBA or RGB format. Returns Type Description Color A Color based on the provided byte array. Exceptions Type Condition InvalidOperationException Thrown when the byte array does not have 3 or 4 elements. implicit operator Color(Color) Implicitly converts a Color to a Color object. Declaration public static implicit operator Color(Color color) Parameters Type Name Description Color color The Color to convert. Returns Type Description Color A Color with the same color values as the Color. implicit operator Color(string) Implicitly converts a hexadecimal color string to a Color object. Declaration public static implicit operator Color(string hex) Parameters Type Name Description string hex The hexadecimal color string. Returns Type Description Color A Color corresponding to the provided hex string. implicit operator byte[](Color) Implicitly converts a Color object to a byte array. Declaration public static implicit operator byte[](Color color) Parameters Type Name Description Color color The Color to convert. Returns Type Description byte[] A byte array representing the color in RGBA format. implicit operator Color(Color) Implicitly converts a Color object to a Color. Declaration public static implicit operator Color(Color color) Parameters Type Name Description Color color The Color to convert. Returns Type Description Color A Color with the same color values as the Color. operator !=(Color, Color) Determines whether two Color objects are not equal. Declaration public static bool operator !=(Color left, Color right) Parameters Type Name Description Color left The first Color to compare. Color right The second Color to compare. Returns Type Description bool true if the two Color objects are not equal; otherwise, false. Implements IEquatable<T>"
  },
  "api/Tickblaze.Scripts.Api.Models.DataSeries.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.DataSeries.html",
    "title": "Class DataSeries | Tickblaze",
    "keywords": "Class DataSeries Represents a series of double values for data points, with a default value of NaN. Inheritance object Series<double> DataSeries PlotSeries Implements ISeries<double> IReadOnlyList<double> IReadOnlyCollection<double> IEnumerable<double> IEnumerable Inherited Members Series<double>.Values Series<double>.Last(int) Series<double>.Append(double) Series<double>.GetEnumerator() Series<double>.Count Series<double>.this[int] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class DataSeries : Series<double>, ISeries<double>, IReadOnlyList<double>, IReadOnlyCollection<double>, IEnumerable<double>, IEnumerable Constructors DataSeries() Declaration public DataSeries() Methods get_DefaultValue() Declaration protected override double get_DefaultValue() Returns Type Description double Overrides Series<double>.get_DefaultValue() Implements ISeries<TItem> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "api/Tickblaze.Scripts.Api.Models.Font.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Font.html",
    "title": "Class Font | Tickblaze",
    "keywords": "Class Font Represents a font with a family name, size, style, and weight. Inheritance object Font Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class Font Constructors Font(string, int, FontStyle, FontWeight) Represents a font with a family name, size, style, and weight. Declaration public Font(string familyName = \"Segoe UI\", int size = 12, FontStyle style = FontStyle.Normal, FontWeight weight = FontWeight.Regular) Parameters Type Name Description string familyName The font family name. Defaults to \"Segoe UI\". int size The font size. Defaults to 12. FontStyle style The font style. Defaults to Normal. FontWeight weight The font weight. Defaults to Regular. Properties FamilyName Gets or sets the font family name. Declaration public string FamilyName { get; set; } Property Value Type Description string Size Gets or sets the font size. Declaration public int Size { get; set; } Property Value Type Description int Style Gets or sets the font style. Declaration public FontStyle Style { get; set; } Property Value Type Description FontStyle Weight Gets or sets the font weight. Declaration public FontWeight Weight { get; set; } Property Value Type Description FontWeight"
  },
  "api/Tickblaze.Scripts.Api.Models.Metadata.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Metadata.html",
    "title": "Class Metadata | Tickblaze",
    "keywords": "Class Metadata Represents metadata about a given object, including its name, type, assembly, and version. Inheritance object Metadata Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class Metadata Constructors Metadata() Initializes a new instance of the Metadata class. Declaration public Metadata() Properties Assembly The assembly name containing the metadata. Declaration public string Assembly { get; } Property Value Type Description string Description A description of the metadata. Declaration public string Description { get; } Property Value Type Description string Name The name of the metadata. Declaration public string Name { get; } Property Value Type Description string ResourceId The resource ID associated with the metadata. Declaration public int ResourceId { get; } Property Value Type Description int ShortName The short name of the metadata, typically consisting of uppercase characters from the name. Declaration public string ShortName { get; } Property Value Type Description string Type The full type name of the metadata. Declaration public string Type { get; } Property Value Type Description string Version The version of the metadata. Declaration public string Version { get; } Property Value Type Description string"
  },
  "api/Tickblaze.Scripts.Api.Models.PlotLevel.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.PlotLevel.html",
    "title": "Class PlotLevel | Tickblaze",
    "keywords": "Class PlotLevel Represents a level on a plot with configurable value, color, line style, thickness, and visibility. Inheritance object PlotLevel Implements IPlot ICloneable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class PlotLevel : IPlot, ICloneable Constructors PlotLevel(double, string, LineStyle, int) Initializes a new instance of the PlotLevel class with the specified value, color string, line style, and thickness. Declaration public PlotLevel(double value, string color, LineStyle lineStyle = LineStyle.Dash, int thickness = 1) Parameters Type Name Description double value The value of the plot level. string color The color string of the plot level. LineStyle lineStyle The line style for the plot level (default is Dash). int thickness The thickness of the plot level line (default is 1). PlotLevel(double, Color, LineStyle, int) Initializes a new instance of the PlotLevel class with the specified value, color, line style, and thickness. Declaration public PlotLevel(double value, Color color, LineStyle lineStyle = LineStyle.Dash, int thickness = 1) Parameters Type Name Description double value The value of the plot level. Color color The color of the plot level. LineStyle lineStyle The line style for the plot level (default is Dash). int thickness The thickness of the plot level line (default is 1). PlotLevel(string, double, Color, LineStyle, int, bool) Initializes a new instance of the PlotLevel class with the specified name, value, color, line style, thickness, and visibility. Declaration public PlotLevel(string name, double value, Color color, LineStyle lineStyle = LineStyle.Dash, int thickness = 1, bool isVisible = true) Parameters Type Name Description string name The name of the plot level. double value The value of the plot level. Color color The color of the plot level. LineStyle lineStyle The line style for the plot level (default is Dash). int thickness The thickness of the plot level line (default is 1). bool isVisible Indicates whether the plot level is visible (default is true). Properties Color The color of the plot level. Declaration public Color Color { get; set; } Property Value Type Description Color IsVisible Indicates whether the plot level is visible. Declaration public bool IsVisible { get; set; } Property Value Type Description bool LineStyle The line style for the plot level. Declaration public LineStyle LineStyle { get; set; } Property Value Type Description LineStyle Name The name of the plot level. Declaration [JsonIgnore] public string Name { get; } Property Value Type Description string Thickness The thickness of the plot level line. Declaration public int Thickness { get; set; } Property Value Type Description int Value The value of the plot level. Declaration public double Value { get; set; } Property Value Type Description double Methods Clone() Creates a copy of the current PlotLevel instance. Declaration public object Clone() Returns Type Description object A new instance of PlotLevel with the same values. Implements IPlot ICloneable"
  },
  "api/Tickblaze.Scripts.Api.Models.PlotSeries.PlotColors.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.PlotSeries.PlotColors.html",
    "title": "Class PlotSeries.PlotColors | Tickblaze",
    "keywords": "Class PlotSeries.PlotColors A class representing a collection of plot colors for the PlotSeries. Inheritance object Series<Color> PlotSeries.PlotColors Implements ISeries<Color> IReadOnlyList<Color> IReadOnlyCollection<Color> IEnumerable<Color> IEnumerable Inherited Members Series<Color>.Values Series<Color>.Last(int) Series<Color>.Append(Color) Series<Color>.GetEnumerator() Series<Color>.Count object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class PlotSeries.PlotColors : Series<Color>, ISeries<Color>, IReadOnlyList<Color>, IReadOnlyCollection<Color>, IEnumerable<Color>, IEnumerable Constructors PlotColors(PlotSeries) A class representing a collection of plot colors for the PlotSeries. Declaration public PlotColors(PlotSeries plotSeries) Parameters Type Name Description PlotSeries plotSeries Properties this[int] Gets or sets the plot color at the specified index. Declaration public override Color this[int index] { get; set; } Parameters Type Name Description int index The index of the color in the series. Property Value Type Description Color The plot color at the specified index. Overrides Series<Color>.this[int] Methods get_DefaultValue() Declaration protected override Color get_DefaultValue() Returns Type Description Color Overrides Series<Color>.get_DefaultValue() Implements ISeries<TItem> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "api/Tickblaze.Scripts.Api.Models.PlotSeries.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.PlotSeries.html",
    "title": "Class PlotSeries | Tickblaze",
    "keywords": "Class PlotSeries Represents a series of plot data, including properties for color, line style, thickness, and visibility. Inheritance object Series<double> DataSeries PlotSeries Implements ISeries<double> IReadOnlyList<double> IReadOnlyCollection<double> IEnumerable<double> IEnumerable IPlot ICloneable Inherited Members DataSeries.get_DefaultValue() Series<double>.Values Series<double>.Last(int) Series<double>.Append(double) Series<double>.GetEnumerator() Series<double>.Count Series<double>.this[int] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class PlotSeries : DataSeries, ISeries<double>, IReadOnlyList<double>, IReadOnlyCollection<double>, IEnumerable<double>, IEnumerable, IPlot, ICloneable Constructors PlotSeries() Initializes a new instance of the PlotSeries class. Declaration public PlotSeries() PlotSeries(string, Color, PlotStyle, LineStyle, int, bool) Initializes a new instance of the PlotSeries class with the specified name, color, plot style, line style, thickness, and visibility. Declaration public PlotSeries(string name, Color color, PlotStyle plotStyle = PlotStyle.Line, LineStyle lineStyle = LineStyle.Solid, int thickness = 1, bool isVisible = true) Parameters Type Name Description string name The name of the plot series. Color color The color of the plot series. PlotStyle plotStyle The style of the plot. LineStyle lineStyle The line style for the plot series. int thickness The thickness of the plot series line. bool isVisible Indicates whether the plot series is visible. PlotSeries(Color) Initializes a new instance of the PlotSeries class with the specified color. Declaration public PlotSeries(Color color) Parameters Type Name Description Color color The color of the plot series. PlotSeries(Color, LineStyle, int) Initializes a new instance of the PlotSeries class with the specified color, line style, and thickness. Declaration public PlotSeries(Color color, LineStyle lineStyle = LineStyle.Solid, int thickness = 1) Parameters Type Name Description Color color The color of the plot series. LineStyle lineStyle The line style for the plot series. int thickness The thickness of the plot series line. PlotSeries(Color, PlotStyle, int) Initializes a new instance of the PlotSeries class with the specified color, plot style, and thickness. Declaration public PlotSeries(Color color, PlotStyle plotStyle = PlotStyle.Line, int thickness = 1) Parameters Type Name Description Color color The color of the plot series. PlotStyle plotStyle The style of the plot. int thickness The thickness of the plot series line. Properties Color The color of the plot series. Declaration public Color Color { get; set; } Property Value Type Description Color Colors The collection of plot colors. Declaration public PlotSeries.PlotColors Colors { get; set; } Property Value Type Description PlotSeries.PlotColors IsLineBreak A series representing line break points in the plot series. Declaration [Obsolete] public Series<bool> IsLineBreak { get; set; } Property Value Type Description Series<bool> IsVisible Indicates whether the plot series is visible. Declaration public bool IsVisible { get; set; } Property Value Type Description bool LineStyle The line style for the plot series. Declaration public LineStyle LineStyle { get; set; } Property Value Type Description LineStyle Name The name of the plot series. Declaration [JsonIgnore] public string Name { get; } Property Value Type Description string PlotStyle The style of the plot (line, bars, etc.). Declaration public PlotStyle PlotStyle { get; set; } Property Value Type Description PlotStyle Thickness The thickness of the plot series line. Declaration public int Thickness { get; set; } Property Value Type Description int Methods Clone() Creates a copy of the current PlotSeries instance. Declaration public object Clone() Returns Type Description object A new instance of PlotSeries with the same values. Implements ISeries<TItem> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IPlot ICloneable Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "api/Tickblaze.Scripts.Api.Models.Point.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Point.html",
    "title": "Class Point | Tickblaze",
    "keywords": "Class Point Represents a point in a 2D space with X and Y coordinates. Inheritance object Point ChartPoint Implements IPoint Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class Point : IPoint Constructors Point() Initializes a new instance of the Point class. Declaration public Point() Point(double, double) Initializes a new instance of the Point class with the specified coordinates. Declaration public Point(double x, double y) Parameters Type Name Description double x The X coordinate of the point. double y The Y coordinate of the point. Point(IPoint) Initializes a new instance of the Point class with the specified point. Declaration public Point(IPoint point) Parameters Type Name Description IPoint point The point to copy coordinates from. Properties X The X coordinate of the point. Declaration public virtual double X { get; set; } Property Value Type Description double Y The Y coordinate of the point. Declaration public virtual double Y { get; set; } Property Value Type Description double Operators operator +(Point, Point) Adds two points together. Declaration public static Point operator +(Point p1, Point p2) Parameters Type Name Description Point p1 The first point. Point p2 The second point. Returns Type Description Point A new Point that is the result of adding p1 and p2. operator -(Point, Point) Subtracts one point from another. Declaration public static Point operator -(Point p1, Point p2) Parameters Type Name Description Point p1 The point to subtract from. Point p2 The point to subtract. Returns Type Description Point A new Point that is the result of subtracting p2 from p1. Implements IPoint"
  },
  "api/Tickblaze.Scripts.Api.Models.Series-1.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Series-1.html",
    "title": "Class Series<T> | Tickblaze",
    "keywords": "Class Series<T> Represents a series of values of type T. Provides methods to append, access, and enumerate over the values in the series. Inheritance object Series<T> BarSeries DataSeries PlotSeries.PlotColors Implements ISeries<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class Series<T> : ISeries<T>, IReadOnlyList<T?>, IReadOnlyCollection<T?>, IEnumerable<T?>, IEnumerable Type Parameters Name Description T The type of the values in the series. Constructors Series() Declaration public Series() Fields Values The list of values in the series. Declaration protected List<T?> Values Field Value Type Description List<T> Properties Count Gets the count of values in the series. Declaration public int Count { get; } Property Value Type Description int this[int] Indexer for accessing values by index. Declaration public virtual T? this[int index] { get; set; } Parameters Type Name Description int index The index of the value to retrieve. Property Value Type Description T The value at the specified index. Methods Append(T?) Appends a value to the series. Declaration public void Append(T? value) Parameters Type Name Description T value The value to append. GetEnumerator() Gets an enumerator for the series values. Declaration public IEnumerator<T?> GetEnumerator() Returns Type Description IEnumerator<T> An enumerator for the series values. Last(int) Gets the last value in the series, offset by the specified number of bars. Declaration public T? Last(int barsAgo = 0) Parameters Type Name Description int barsAgo The number of bars ago to retrieve the value for. Returns Type Description T The value at the specified index from the end of the series. get_DefaultValue() Declaration protected virtual T? get_DefaultValue() Returns Type Description T Implements ISeries<TItem> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "api/Tickblaze.Scripts.Api.Models.SeriesTransform-2.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.SeriesTransform-2.html",
    "title": "Class SeriesTransform<TSource, TDestination> | Tickblaze",
    "keywords": "Class SeriesTransform<TSource, TDestination> Represents a transformation of a source series into a destination series, where each element of the source series is transformed using a selector function. Inheritance object SeriesTransform<TSource, TDestination> Implements ISeries<TDestination> IReadOnlyList<TDestination> IReadOnlyCollection<TDestination> IEnumerable<TDestination> IEnumerable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public sealed class SeriesTransform<TSource, TDestination> : ISeries<TDestination>, IReadOnlyList<TDestination?>, IReadOnlyCollection<TDestination?>, IEnumerable<TDestination?>, IEnumerable Type Parameters Name Description TSource The type of the elements in the source series. TDestination The type of the elements in the destination series. Constructors SeriesTransform(ISeries<TSource>, Func<TSource, TDestination>) Initializes a new instance of the SeriesTransform<TSource, TDestination> class. Declaration public SeriesTransform(ISeries<TSource> series, Func<TSource, TDestination> selector) Parameters Type Name Description ISeries<TSource> series The source series to transform. Func<TSource, TDestination> selector The function used to transform each element of the source series. Properties Count The number of elements in the transformed series. Declaration public int Count { get; } Property Value Type Description int this[int] Retrieves the element at the specified index in the transformed series. Declaration public TDestination? this[int index] { get; } Parameters Type Name Description int index The index of the element to retrieve. Property Value Type Description TDestination The transformed element at the specified index. Methods GetEnumerator() Returns an enumerator that iterates through the transformed series. Declaration public IEnumerator<TDestination?> GetEnumerator() Returns Type Description IEnumerator<TDestination> An enumerator for the transformed series. Last(int) Retrieves the last element in the transformed series, offset by the specified number of bars. Declaration public TDestination? Last(int barsAgo = 0) Parameters Type Name Description int barsAgo The number of bars ago to retrieve the element from. Returns Type Description TDestination The transformed last element. Implements ISeries<TItem> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "api/Tickblaze.Scripts.Api.Models.Size.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Size.html",
    "title": "Struct Size | Tickblaze",
    "keywords": "Struct Size Represents the size of an object with width and height. Implements ISize Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public struct Size : ISize Constructors Size() Initializes a new instance of the Size struct. Declaration public Size() Size(double, double) Initializes a new instance of the Size struct with specified width and height. Declaration public Size(double width, double height) Parameters Type Name Description double width The width of the size. double height The height of the size. Properties Height The height of the size. Declaration public double Height { readonly get; set; } Property Value Type Description double Width The width of the size. Declaration public double Width { readonly get; set; } Property Value Type Description double Implements ISize"
  },
  "api/Tickblaze.Scripts.Api.Models.Symbol.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Symbol.html",
    "title": "Class Symbol | Tickblaze",
    "keywords": "Class Symbol Defines properties and methods related to a symbol, including tick size, point size, and volume normalization. Inheritance object Symbol Implements ISymbol Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class Symbol : ISymbol Properties CurrencyCode The currency code of the symbol. Declaration public required string CurrencyCode { get; init; } Property Value Type Description string Decimals The number of decimals for the symbol. Declaration public required int Decimals { get; init; } Property Value Type Description int Description The description of the symbol. Declaration public string Description { get; } Property Value Type Description string ExchangeCalendar The exchange calendar for the symbol. Declaration public required IExchangeCalendar ExchangeCalendar { get; init; } Property Value Type Description IExchangeCalendar MinimumVolume The minimum volume for the symbol. Declaration public decimal MinimumVolume { get; init; } Property Value Type Description decimal Name The name of the symbol. Declaration public string Name { get; } Property Value Type Description string PointSize The point size of the symbol. Declaration public double PointSize { get; } Property Value Type Description double PointValue The point value of the symbol. Declaration public double PointValue { get; } Property Value Type Description double TickSize The tick size of the symbol. Declaration public required double TickSize { get; init; } Property Value Type Description double TickValue The tick value of the symbol. Declaration public required double TickValue { get; init; } Property Value Type Description double TicksPerPoint The number of ticks per point for the symbol. Declaration public double TicksPerPoint { get; } Property Value Type Description double Methods FormatPrice(double) Formats a price as a string for the symbol. Declaration public string FormatPrice(double price) Parameters Type Name Description double price The price to format. Returns Type Description string The formatted price as a string. NormalizeVolume(double, RoundingMode) Normalizes a volume to the symbol's tradable volume, applying the specified rounding mode. Declaration public decimal NormalizeVolume(double volume, RoundingMode roundingMode) Parameters Type Name Description double volume The volume to normalize. RoundingMode roundingMode The rounding mode to apply. Returns Type Description decimal The normalized volume. RoundToTick(double) Rounds a value to the nearest tick. Declaration public double RoundToTick(double value) Parameters Type Name Description double value The value to round. Returns Type Description double The value rounded to the nearest tick. Implements ISymbol"
  },
  "api/Tickblaze.Scripts.Api.Models.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.html",
    "title": "Namespace Tickblaze.Scripts.Api.Models | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Models Classes Bar Represents a single bar of market data, including the open, high, low, close prices, volume, and time. BarPeriod Represents the period of a bar, including its source type, period type, and size. BarSeries Represents a series of bars, with various calculated series such as Low, High, Open, Close, and others. BarSeries.BarEventArgs Event arguments for the BarClosed event. ChartPoint Represents a point on a chart with a specific index, time, and value. Used to store data points on the chart, where each point has a unique index and associated time and value. DataSeries Represents a series of double values for data points, with a default value of NaN. Font Represents a font with a family name, size, style, and weight. Metadata Represents metadata about a given object, including its name, type, assembly, and version. PlotLevel Represents a level on a plot with configurable value, color, line style, thickness, and visibility. PlotSeries Represents a series of plot data, including properties for color, line style, thickness, and visibility. PlotSeries.PlotColors A class representing a collection of plot colors for the PlotSeries. Point Represents a point in a 2D space with X and Y coordinates. SeriesTransform<TSource, TDestination> Represents a transformation of a source series into a destination series, where each element of the source series is transformed using a selector function. Series<T> Represents a series of values of type T. Provides methods to append, access, and enumerate over the values in the series. Symbol Defines properties and methods related to a symbol, including tick size, point size, and volume normalization. Structs Color Represents a color with alpha, red, green, and blue values. Size Represents the size of an object with width and height. Enums BarPeriod.PeriodType Defines the different period types for the bar. BarPeriod.SourceType Defines the different source types for the bar."
  },
  "api/Tickblaze.Scripts.Api.Parameter.html": {
    "href": "api/Tickblaze.Scripts.Api.Parameter.html",
    "title": "Class Parameter | Tickblaze",
    "keywords": "Class Parameter Represents a parameter with associated attributes, value, and an optional numeric range and property reference. Inheritance object Parameter Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api Assembly: Tickblaze.Scripts.Api.dll Syntax public class Parameter Constructors Parameter() Default constructor for a parameter. Declaration public Parameter() Parameter(object, PropertyInfo, ParameterAttribute) Initializes a new instance of the Parameter class with the specified object, property, and attributes. Declaration public Parameter(object obj, PropertyInfo property, ParameterAttribute attributes) Parameters Type Name Description object obj The object that owns the property. PropertyInfo property The property representing the parameter. ParameterAttribute attributes The attributes associated with the parameter. Properties Attributes The attributes associated with the parameter. Declaration public ParameterAttribute Attributes { get; } Property Value Type Description ParameterAttribute NumericRange The optional numeric range attribute for the parameter. Declaration public NumericRangeAttribute? NumericRange { get; } Property Value Type Description NumericRangeAttribute Property The property information of the parameter if available. Declaration public PropertyInfo? Property { get; } Property Value Type Description PropertyInfo Value The value of the parameter. If a property is associated, it gets or sets the value through the property; otherwise, it uses the backing field. Declaration public object Value { get; set; } Property Value Type Description object"
  },
  "api/Tickblaze.Scripts.Api.Parameters.html": {
    "href": "api/Tickblaze.Scripts.Api.Parameters.html",
    "title": "Class Parameters | Tickblaze",
    "keywords": "Class Parameters Represents a collection of parameters, either from an object or a dictionary of key-value pairs. Inheritance object Dictionary<string, Parameter> IndexedDictionary<string, Parameter> Parameters Implements IDictionary<string, Parameter> ICollection<KeyValuePair<string, Parameter>> IDictionary ICollection IReadOnlyDictionary<string, Parameter> IReadOnlyCollection<KeyValuePair<string, Parameter>> IEnumerable<KeyValuePair<string, Parameter>> IEnumerable ISerializable IDeserializationCallback Inherited Members IndexedDictionary<string, Parameter>.this[int] Dictionary<string, Parameter>.Add(string, Parameter) Dictionary<string, Parameter>.Clear() Dictionary<string, Parameter>.ContainsKey(string) Dictionary<string, Parameter>.ContainsValue(Parameter) Dictionary<string, Parameter>.GetEnumerator() Dictionary<string, Parameter>.OnDeserialization(object) Dictionary<string, Parameter>.Remove(string) Dictionary<string, Parameter>.Remove(string, out Parameter) Dictionary<string, Parameter>.TryGetValue(string, out Parameter) Dictionary<string, Parameter>.TryAdd(string, Parameter) Dictionary<string, Parameter>.EnsureCapacity(int) Dictionary<string, Parameter>.TrimExcess() Dictionary<string, Parameter>.TrimExcess(int) Dictionary<string, Parameter>.Comparer Dictionary<string, Parameter>.Count Dictionary<string, Parameter>.Keys Dictionary<string, Parameter>.Values Dictionary<string, Parameter>.this[string] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api Assembly: Tickblaze.Scripts.Api.dll Syntax [JsonSerializable(typeof(IReadOnlyDictionary<string, Parameter>))] public class Parameters : IndexedDictionary<string, Parameter>, IDictionary<string, Parameter>, ICollection<KeyValuePair<string, Parameter>>, IDictionary, ICollection, IReadOnlyDictionary<string, Parameter>, IReadOnlyCollection<KeyValuePair<string, Parameter>>, IEnumerable<KeyValuePair<string, Parameter>>, IEnumerable, ISerializable, IDeserializationCallback Constructors Parameters(object?) Initializes a new instance of the Parameters class. Declaration public Parameters(object? obj) Parameters Type Name Description object obj The object or dictionary from which parameters are derived. Implements IDictionary<TKey, TValue> ICollection<T> IDictionary ICollection IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IEnumerable ISerializable IDeserializationCallback"
  },
  "api/Tickblaze.Scripts.Api.html": {
    "href": "api/Tickblaze.Scripts.Api.html",
    "title": "Namespace Tickblaze.Scripts.Api | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api Classes CollectionExtensions Extensions for collections. IndexedDictionary<TKey, TValue> A dictionary with an indexer that allows accessing elements by their index in addition to the key. Parameter Represents a parameter with associated attributes, value, and an optional numeric range and property reference. Parameters Represents a collection of parameters, either from an object or a dictionary of key-value pairs."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Tickblaze",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Tickblaze",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Tickblaze",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}