{
  "API/Tickblaze.Scripts.Api.Attributes.DisplayNameAttribute.html": {
    "href": "API/Tickblaze.Scripts.Api.Attributes.DisplayNameAttribute.html",
    "title": "Class DisplayNameAttribute | Tickblaze",
    "keywords": "Class DisplayNameAttribute Specifies the display name for displaying in the user interface. Inheritance object Attribute DisplayNameAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Attributes Assembly: Tickblaze.Scripts.Api.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public sealed class DisplayNameAttribute : Attribute Constructors DisplayNameAttribute(string) Specifies the display name for displaying in the user interface. Declaration public DisplayNameAttribute(string name) Parameters Type Name Description string name The display name. Properties DisplayName Gets the display name. Declaration public string? DisplayName { get; } Property Value Type Description string"
  },
  "API/Tickblaze.Scripts.Api.Attributes.NumericRangeAttribute.html": {
    "href": "API/Tickblaze.Scripts.Api.Attributes.NumericRangeAttribute.html",
    "title": "Class NumericRangeAttribute | Tickblaze",
    "keywords": "Class NumericRangeAttribute Specifies the numeric range constraints for a parameter. Inheritance object Attribute NumericRangeAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Attributes Assembly: Tickblaze.Scripts.Api.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class NumericRangeAttribute : Attribute Constructors NumericRangeAttribute(double, double, double) Specifies the numeric range constraints for a parameter. Declaration public NumericRangeAttribute(double minValue = 0, double maxValue = 2147483647, double step = 1) Parameters Type Name Description double minValue The minimum value of the numeric range. Default is 0. double maxValue The maximum value of the numeric range. Default is MaxValue. double step The step value for incrementing within the range. Default is 1. Properties MaxValue Gets or sets the maximum value of the numeric range. Declaration public double MaxValue { get; set; } Property Value Type Description double MinValue Gets or sets the minimum value of the numeric range. Declaration public double MinValue { get; set; } Property Value Type Description double Step Gets or sets the step value for incrementing within the range. Declaration public double Step { get; set; } Property Value Type Description double"
  },
  "API/Tickblaze.Scripts.Api.Attributes.ParameterAttribute.html": {
    "href": "API/Tickblaze.Scripts.Api.Attributes.ParameterAttribute.html",
    "title": "Class ParameterAttribute | Tickblaze",
    "keywords": "Class ParameterAttribute Specifies metadata for parameter property. Inheritance object Attribute ParameterAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Attributes Assembly: Tickblaze.Scripts.Api.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class ParameterAttribute : Attribute Constructors ParameterAttribute(string) Specifies metadata for parameter property. Declaration public ParameterAttribute(string name) Parameters Type Name Description string name The display name of the parameter. Properties Description Description of the parameter. Declaration public string? Description { get; set; } Property Value Type Description string GroupName Group name of the parameter. Declaration public string? GroupName { get; set; } Property Value Type Description string Name Display name of the parameter. Declaration public string Name { get; } Property Value Type Description string"
  },
  "API/Tickblaze.Scripts.Api.Attributes.PlotAttribute.html": {
    "href": "API/Tickblaze.Scripts.Api.Attributes.PlotAttribute.html",
    "title": "Class PlotAttribute | Tickblaze",
    "keywords": "Class PlotAttribute Specifies metadata for PlotSeries or PlotLevel property. Inheritance object Attribute PlotAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Attributes Assembly: Tickblaze.Scripts.Api.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class PlotAttribute : Attribute Constructors PlotAttribute(string) Specifies metadata for PlotSeries or PlotLevel property. Declaration public PlotAttribute(string name) Parameters Type Name Description string name The display name of the plot. Properties Name Display name of the plot. Declaration public string Name { get; } Property Value Type Description string"
  },
  "API/Tickblaze.Scripts.Api.Attributes.html": {
    "href": "API/Tickblaze.Scripts.Api.Attributes.html",
    "title": "Namespace Tickblaze.Scripts.Api.Attributes | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Attributes Classes DisplayNameAttribute Specifies the display name for displaying in the user interface. NumericRangeAttribute Specifies the numeric range constraints for a parameter. ParameterAttribute Specifies metadata for parameter property. PlotAttribute Specifies metadata for PlotSeries or PlotLevel property."
  },
  "API/Tickblaze.Scripts.Api.Bases.BarType.SourceDataType.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.BarType.SourceDataType.html",
    "title": "Enum BarType.SourceDataType | Tickblaze",
    "keywords": "Enum BarType.SourceDataType Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public enum BarType.SourceDataType Fields Name Description Daily Minute Tick"
  },
  "API/Tickblaze.Scripts.Api.Bases.BarType.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.BarType.html",
    "title": "Class BarType | Tickblaze",
    "keywords": "Class BarType Inheritance object BarType Implements IMetadata Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class BarType : IMetadata Constructors BarType() Declaration protected BarType() Properties BarSize Declaration public double BarSize { get; set; } Property Value Type Description double Bars Declaration public BarSeries Bars { get; } Property Value Type Description BarSeries Description Declaration public string Description { get; init; } Property Value Type Description string Metadata Declaration public Metadata Metadata { get; } Property Value Type Description Metadata Name Declaration public string Name { get; init; } Property Value Type Description string ShortName Declaration public string ShortName { get; init; } Property Value Type Description string Source Declaration public BarType.SourceDataType Source { get; init; } Property Value Type Description BarType.SourceDataType Methods AddBar(Bar) Declaration public void AddBar(Bar bar) Parameters Type Name Description Bar bar OnDataPoint(Bar) Declaration public abstract void OnDataPoint(Bar bar) Parameters Type Name Description Bar bar UpdateBar(Bar) Declaration public void UpdateBar(Bar bar) Parameters Type Name Description Bar bar Implements IMetadata"
  },
  "API/Tickblaze.Scripts.Api.Bases.Drawing.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.Drawing.html",
    "title": "Class Drawing | Tickblaze",
    "keywords": "Class Drawing Inheritance object Script Drawing Implements IScript IDisposable IMetadata IChartObject Inherited Members Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class Drawing : Script, IScript, IDisposable, IMetadata, IChartObject Constructors Drawing() Declaration protected Drawing() Properties Chart The chart associated with this chart object. Declaration public IChart Chart { get; } Property Value Type Description IChart ChartPanel The chart panel associated with this chart object. Declaration public IChartPanel ChartPanel { get; } Property Value Type Description IChartPanel ChartScale The chart scale associated with this chart object. Declaration public IChartScale ChartScale { get; } Property Value Type Description IChartScale IsCreated Declaration public bool IsCreated { get; } Property Value Type Description bool Points Declaration public IChartPoints Points { get; } Property Value Type Description IChartPoints PointsCount Declaration public abstract int PointsCount { get; } Property Value Type Description int ShowOnChart A value indicating whether this chart object will show on the chart. Declaration public bool ShowOnChart { get; set; } Property Value Type Description bool SnapToBar Declaration public bool SnapToBar { get; set; } Property Value Type Description bool Symbol Declaration public ISymbol Symbol { get; } Property Value Type Description ISymbol Methods OnCreated() Declaration public virtual void OnCreated() OnRender(IDrawingContext) Renders the chart object using the provided drawing context. Declaration public abstract void OnRender(IDrawingContext context) Parameters Type Name Description IDrawingContext context The drawing context used to render the chart object. SetPoint(IComparable, IComparable, int) Declaration public virtual void SetPoint(IComparable xDataValue, IComparable yDataValue, int index) Parameters Type Name Description IComparable xDataValue IComparable yDataValue int index Implements IScript IDisposable IMetadata IChartObject"
  },
  "API/Tickblaze.Scripts.Api.Bases.IIndicator.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.IIndicator.html",
    "title": "Interface IIndicator | Tickblaze",
    "keywords": "Interface IIndicator Inherited Members IScript.Initialize() IScript.Metadata IScript.Parameters IScript.IsInitialized IDisposable.Dispose() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IIndicator : IScript, IDisposable Properties AutoRescale Indicates whether this instance automatically rescales the chart or not. Default value is true. Declaration bool AutoRescale { get; } Property Value Type Description bool IsOverlay Indicates whether this instance is overlayed on the chart or plotted on a separate indicator panel. Declaration bool IsOverlay { get; } Property Value Type Description bool IsPercentage Indicates whether the indicator is a percentage indicator. The default value is false. Declaration bool IsPercentage { get; } Property Value Type Description bool LevelsSerializable Declaration [JsonPropertyOrder(8001)] [JsonPropertyName(\"Levels\")] IReadOnlyDictionary<string, PlotLevel> LevelsSerializable { get; } Property Value Type Description IReadOnlyDictionary<string, PlotLevel> PlotsSerializable Declaration [JsonPropertyOrder(8000)] [JsonPropertyName(\"Plots\")] IReadOnlyDictionary<string, IPlot> PlotsSerializable { get; } Property Value Type Description IReadOnlyDictionary<string, IPlot> ScalePrecision The number of decimals displayed on the price scale of the indicator panel. Declaration int? ScalePrecision { get; } Property Value Type Description int?"
  },
  "API/Tickblaze.Scripts.Api.Bases.IStrategyScriptBase.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.IStrategyScriptBase.html",
    "title": "Interface IStrategyScriptBase | Tickblaze",
    "keywords": "Interface IStrategyScriptBase Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IStrategyScriptBase"
  },
  "API/Tickblaze.Scripts.Api.Bases.ITradeManagmentStrategyScriptBase.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.ITradeManagmentStrategyScriptBase.html",
    "title": "Interface ITradeManagmentStrategyScriptBase | Tickblaze",
    "keywords": "Interface ITradeManagmentStrategyScriptBase Inherited Members IOrderManager.ExecuteMarketOrder(OrderAction, double, TimeInForce, string) IOrderManager.PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) IOrderManager.PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) IOrderManager.PlaceStopOrder(OrderAction, double, double, TimeInForce, string) IOrderManager.PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) IOrderManager.SetStopLoss(IOrder, double, string) IOrderManager.SetStopLossTicks(IOrder, int, string) IOrderManager.SetStopLossPercent(IOrder, double, string) IOrderManager.SetTakeProfit(IOrder, double, string) IOrderManager.SetTakeProfitTicks(IOrder, int, string) IOrderManager.SetTakeProfitPercent(IOrder, double, string) IOrderManager.ModifyOrder(IOrder, double, double?, double?, TimeInForce) IOrderManager.CancelOrder(IOrder, string, bool) IOrderManager.ClosePosition(string) IOrderManager.GetOrderExpectedPrice(IOrder) IOrderAccessor.GetExchangeRate(string, string) IOrderAccessor.Symbol IOrderAccessor.Account IOrderAccessor.PendingOrders IOrderAccessor.Position Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public interface ITradeManagmentStrategyScriptBase : IOrderManager, IOrderAccessor Properties IsActive Declaration bool IsActive { get; } Property Value Type Description bool Methods Start() Declaration void Start() Stop() Declaration void Stop()"
  },
  "API/Tickblaze.Scripts.Api.Bases.Indicator.BandShading.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.Indicator.BandShading.html",
    "title": "Class Indicator.BandShading | Tickblaze",
    "keywords": "Class Indicator.BandShading Inheritance object Indicator.BandShading Implements IEquatable<Indicator.BandShading> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public record Indicator.BandShading : IEquatable<Indicator.BandShading> Constructors BandShading(object, object, Color?, Color?) Declaration public BandShading(object FirstSource, object SecondSource, Color? FirstColor, Color? SecondColor) Parameters Type Name Description object FirstSource object SecondSource Color? FirstColor Color? SecondColor BandShading(BandShading) Declaration protected BandShading(Indicator.BandShading original) Parameters Type Name Description Indicator.BandShading original Properties FirstColor Declaration public Color? FirstColor { get; init; } Property Value Type Description Color? FirstSource Declaration public object FirstSource { get; init; } Property Value Type Description object SecondColor Declaration public Color? SecondColor { get; init; } Property Value Type Description Color? SecondSource Declaration public object SecondSource { get; init; } Property Value Type Description object Methods Deconstruct(out object, out object, out Color?, out Color?) Declaration public void Deconstruct(out object FirstSource, out object SecondSource, out Color? FirstColor, out Color? SecondColor) Parameters Type Name Description object FirstSource object SecondSource Color? FirstColor Color? SecondColor Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) Equals(BandShading?) Declaration public virtual bool Equals(Indicator.BandShading? other) Parameters Type Name Description Indicator.BandShading other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() get_EqualityContract() Declaration protected virtual Type get_EqualityContract() Returns Type Description Type Operators operator ==(BandShading?, BandShading?) Declaration public static bool operator ==(Indicator.BandShading? left, Indicator.BandShading? right) Parameters Type Name Description Indicator.BandShading left Indicator.BandShading right Returns Type Description bool operator !=(BandShading?, BandShading?) Declaration public static bool operator !=(Indicator.BandShading? left, Indicator.BandShading? right) Parameters Type Name Description Indicator.BandShading left Indicator.BandShading right Returns Type Description bool Implements IEquatable<T>"
  },
  "API/Tickblaze.Scripts.Api.Bases.Indicator.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.Indicator.html",
    "title": "Class Indicator | Tickblaze",
    "keywords": "Class Indicator Inheritance object Script Indicator Implements IMetadata IIndicator IScript IDisposable IChartObject Inherited Members Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class Indicator : Script, IMetadata, IIndicator, IScript, IDisposable, IChartObject Constructors Indicator() Declaration protected Indicator() Properties AutoRescale Indicates whether this instance automatically rescales the chart or not. Default value is true. Declaration public bool AutoRescale { get; init; } Property Value Type Description bool Chart The chart associated with this chart object. Declaration public IChart Chart { get; } Property Value Type Description IChart ChartPanel The chart panel associated with this chart object. Declaration public IChartPanel ChartPanel { get; } Property Value Type Description IChartPanel ChartScale The chart scale associated with this chart object. Declaration public IChartScale ChartScale { get; } Property Value Type Description IChartScale DisplayName Declaration public virtual string DisplayName { get; } Property Value Type Description string IsOverlay Indicates whether this instance is overlayed on the chart or plotted on a separate indicator panel. Declaration public bool IsOverlay { get; init; } Property Value Type Description bool IsPercentage Indicates whether the indicator is a percentage indicator. The default value is false. Declaration public bool IsPercentage { get; init; } Property Value Type Description bool Levels Declaration public IReadOnlyList<PlotLevel> Levels { get; } Property Value Type Description IReadOnlyList<PlotLevel> LevelsSerializable Declaration [Browsable(false)] public IReadOnlyDictionary<string, PlotLevel> LevelsSerializable { get; } Property Value Type Description IReadOnlyDictionary<string, PlotLevel> Plots Declaration public IReadOnlyList<PlotSeries> Plots { get; } Property Value Type Description IReadOnlyList<PlotSeries> PlotsSerializable Declaration [Browsable(false)] public IReadOnlyDictionary<string, IPlot> PlotsSerializable { get; } Property Value Type Description IReadOnlyDictionary<string, IPlot> ScalePrecision The number of decimals displayed on the price scale of the indicator panel. Declaration public int? ScalePrecision { get; init; } Property Value Type Description int? ShowOnChart A value indicating whether this chart object will show on the chart. Declaration public bool ShowOnChart { get; set; } Property Value Type Description bool Symbol Declaration public ISymbol Symbol { get; } Property Value Type Description ISymbol Methods Calculate() Declaration public void Calculate() Calculate(int) Calculate the value(s) of script for the given index. Declaration protected virtual void Calculate(int index) Parameters Type Name Description int index The index of calculated value. ConfigureWatchlistCell(WatchlistCellString) Declaration public virtual void ConfigureWatchlistCell(WatchlistCellString cellString) Parameters Type Name Description WatchlistCellString cellString OnRender(IDrawingContext) Renders the chart object using the provided drawing context. Declaration public virtual void OnRender(IDrawingContext context) Parameters Type Name Description IDrawingContext context The drawing context used to render the chart object. ShadeBetween(PlotSeries, PlotSeries, Color?, Color?, float) Shades the area between two plot series. Declaration protected virtual void ShadeBetween(PlotSeries series1, PlotSeries series2, Color? fill1, Color? fill2, float opacity = 1) Parameters Type Name Description PlotSeries series1 The first plot series. PlotSeries series2 The second plot series. Color? fill1 The color to shade when first series is above second series. Color? fill2 The color to shade when first series is below second series. float opacity The opacity of the shading, ranging from 0.0 (fully transparent) to 1.0 (fully opaque). Implements IMetadata IIndicator IScript IDisposable IChartObject"
  },
  "API/Tickblaze.Scripts.Api.Bases.PositionSizer.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.PositionSizer.html",
    "title": "Class PositionSizer | Tickblaze",
    "keywords": "Class PositionSizer Inheritance object Script PositionSizer Implements IScript IDisposable IMetadata IOrderAccessor Inherited Members Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class PositionSizer : Script, IScript, IDisposable, IMetadata, IOrderAccessor Constructors PositionSizer() Declaration protected PositionSizer() Properties Account Declaration public IAccount Account { get; } Property Value Type Description IAccount PendingOrders Declaration public IReadOnlyList<IOrder> PendingOrders { get; } Property Value Type Description IReadOnlyList<IOrder> Position Declaration public IPosition Position { get; } Property Value Type Description IPosition Symbol Declaration public ISymbol Symbol { get; } Property Value Type Description ISymbol Methods GetExchangeRate(string, string) Declaration public double GetExchangeRate(string fromCurrency, string toCurrency) Parameters Type Name Description string fromCurrency string toCurrency Returns Type Description double GetPositionSize(IOrder) Declaration protected abstract double GetPositionSize(IOrder order) Parameters Type Name Description IOrder order Returns Type Description double Implements IScript IDisposable IMetadata IOrderAccessor"
  },
  "API/Tickblaze.Scripts.Api.Bases.Script.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.Script.html",
    "title": "Class Script | Tickblaze",
    "keywords": "Class Script Inheritance object Script Drawing Indicator PositionSizer TradingScript Implements IScript IDisposable IMetadata Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class Script : IScript, IDisposable, IMetadata Properties Bars Declaration public BarSeries? Bars { get; } Property Value Type Description BarSeries Description Declaration public string Description { get; init; } Property Value Type Description string IsInitialized Declaration public bool IsInitialized { get; } Property Value Type Description bool Metadata Declaration public Metadata Metadata { get; } Property Value Type Description Metadata Name Declaration public string Name { get; init; } Property Value Type Description string Parameters Declaration public Parameters Parameters { get; } Property Value Type Description Parameters ShortName Declaration public string ShortName { get; init; } Property Value Type Description string UiDispatcher Declaration public IDispatcher UiDispatcher { get; set; } Property Value Type Description IDispatcher Methods CreateChartToolbarMenuItem() Creates a control that will be displayed in the chart's toolbar. Declaration public virtual object? CreateChartToolbarMenuItem() Returns Type Description object Dispose() Declaration public void Dispose() Initialize() Declaration protected virtual void Initialize() OnDestroy() Declaration protected virtual void OnDestroy() Print(object) Declaration protected void Print(object value) Parameters Type Name Description object value Implements IScript IDisposable IMetadata"
  },
  "API/Tickblaze.Scripts.Api.Bases.Strategy.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.Strategy.html",
    "title": "Class Strategy | Tickblaze",
    "keywords": "Class Strategy Inheritance object Script TradingScript Strategy Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor IChartObject Inherited Members TradingScript.OnOrderUpdate(IOrder) TradingScript.OnOrderFillUpdate(IOrder) TradingScript.OnPositionUpdate() TradingScript.OnBarUpdate() TradingScript.ExecuteMarketOrder(OrderAction, double, TimeInForce, string) TradingScript.PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) TradingScript.PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) TradingScript.PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) TradingScript.PlaceStopOrder(OrderAction, double, double, TimeInForce, string) TradingScript.SetStopLoss(IOrder, double, string) TradingScript.SetStopLossTicks(IOrder, int, string) TradingScript.SetStopLossPercent(IOrder, double, string) TradingScript.SetTakeProfit(IOrder, double, string) TradingScript.SetTakeProfitTicks(IOrder, int, string) TradingScript.SetTakeProfitPercent(IOrder, double, string) TradingScript.ModifyOrder(IOrder, double, double?, double?, TimeInForce) TradingScript.CancelOrder(IOrder, string, bool) TradingScript.ClosePosition(string) TradingScript.GetExchangeRate(string, string) TradingScript.GetOrderExpectedPrice(IOrder) TradingScript.Symbol TradingScript.Account TradingScript.PendingOrders TradingScript.Position Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class Strategy : TradingScript, IScript, IDisposable, IMetadata, IOrderManager, IOrderAccessor, IChartObject Constructors Strategy() Declaration protected Strategy() Properties Chart The chart associated with this chart object. Declaration public IChart Chart { get; } Property Value Type Description IChart ChartPanel The chart panel associated with this chart object. Declaration public IChartPanel ChartPanel { get; } Property Value Type Description IChartPanel ChartScale The chart scale associated with this chart object. Declaration public IChartScale ChartScale { get; } Property Value Type Description IChartScale ShowOnChart A value indicating whether this chart object will show on the chart. Declaration public bool ShowOnChart { get; set; } Property Value Type Description bool Methods OnBar(int) Declaration protected virtual void OnBar(int index) Parameters Type Name Description int index OnRender(IDrawingContext) Renders the chart object using the provided drawing context. Declaration public virtual void OnRender(IDrawingContext context) Parameters Type Name Description IDrawingContext context The drawing context used to render the chart object. OnShutdown() Declaration protected virtual void OnShutdown() OnTick() Declaration protected virtual void OnTick() Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor IChartObject"
  },
  "API/Tickblaze.Scripts.Api.Bases.TradeManagementStrategy.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.TradeManagementStrategy.html",
    "title": "Class TradeManagementStrategy | Tickblaze",
    "keywords": "Class TradeManagementStrategy Inheritance object Script TradingScript TradeManagementStrategy Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor Inherited Members TradingScript.OnOrderUpdate(IOrder) TradingScript.OnOrderFillUpdate(IOrder) TradingScript.OnPositionUpdate() TradingScript.OnBarUpdate() TradingScript.ExecuteMarketOrder(OrderAction, double, TimeInForce, string) TradingScript.PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) TradingScript.PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) TradingScript.PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) TradingScript.PlaceStopOrder(OrderAction, double, double, TimeInForce, string) TradingScript.SetStopLoss(IOrder, double, string) TradingScript.SetStopLossTicks(IOrder, int, string) TradingScript.SetStopLossPercent(IOrder, double, string) TradingScript.SetTakeProfit(IOrder, double, string) TradingScript.SetTakeProfitTicks(IOrder, int, string) TradingScript.SetTakeProfitPercent(IOrder, double, string) TradingScript.ModifyOrder(IOrder, double, double?, double?, TimeInForce) TradingScript.CancelOrder(IOrder, string, bool) TradingScript.ClosePosition(string) TradingScript.GetExchangeRate(string, string) TradingScript.GetOrderExpectedPrice(IOrder) TradingScript.Symbol TradingScript.Account TradingScript.PendingOrders TradingScript.Position Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class TradeManagementStrategy : TradingScript, IScript, IDisposable, IMetadata, IOrderManager, IOrderAccessor Constructors TradeManagementStrategy() Declaration protected TradeManagementStrategy() Properties IsActive Declaration public bool IsActive { get; } Property Value Type Description bool Methods OnEntryOrder(IOrder) Declaration protected virtual void OnEntryOrder(IOrder order) Parameters Type Name Description IOrder order OnShutdown() Declaration protected virtual void OnShutdown() Start() Declaration protected void Start() Stop() Declaration protected void Stop() Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor"
  },
  "API/Tickblaze.Scripts.Api.Bases.TradingScript.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.TradingScript.html",
    "title": "Class TradingScript | Tickblaze",
    "keywords": "Class TradingScript Inheritance object Script TradingScript Strategy TradeManagementStrategy Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor Inherited Members Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public abstract class TradingScript : Script, IScript, IDisposable, IMetadata, IOrderManager, IOrderAccessor Constructors TradingScript() Declaration protected TradingScript() Properties Account Declaration public IAccount Account { get; } Property Value Type Description IAccount PendingOrders Declaration public IReadOnlyList<IOrder> PendingOrders { get; } Property Value Type Description IReadOnlyList<IOrder> Position Declaration public IPosition Position { get; } Property Value Type Description IPosition Symbol Declaration public ISymbol Symbol { get; } Property Value Type Description ISymbol Methods CancelOrder(IOrder, string, bool) Cancels the specified order with an optional comment. The order to cancel. Optional comment for the order. Declaration public void CancelOrder(IOrder order, string comment = \"\", bool cancelSilently = false) Parameters Type Name Description IOrder order string comment bool cancelSilently ClosePosition(string) Closes the entire position with an optional comment. Optional comment for the order. Declaration public void ClosePosition(string comment = \"\") Parameters Type Name Description string comment ExecuteMarketOrder(OrderAction, double, TimeInForce, string) Executes a market order immediately based on the given action and quantity. Declaration public IOrder ExecuteMarketOrder(OrderAction action, double quantity, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action The buy or sell action. double quantity The order quantity. TimeInForce timeInForce Order duration setting. Defaults to Day. string comment Optional order comment. Returns Type Description IOrder GetExchangeRate(string, string) Declaration public double GetExchangeRate(string fromCurrency, string toCurrency) Parameters Type Name Description string fromCurrency string toCurrency Returns Type Description double GetOrderExpectedPrice(IOrder) Gets estimated fill price of pending order. Declaration public double GetOrderExpectedPrice(IOrder order) Parameters Type Name Description IOrder order The pending order. Returns Type Description double ModifyOrder(IOrder, double, double?, double?, TimeInForce) Modifies an existing order. The order of open position. Order quantity. Stop price if applicable. Limit price if applicable. Order duration. Defaults to Day. Declaration public void ModifyOrder(IOrder order, double quantity, double? stopPrice, double? limitPrice, TimeInForce timeInForce = TimeInForce.Day) Parameters Type Name Description IOrder order double quantity double? stopPrice double? limitPrice TimeInForce timeInForce OnBarUpdate() Declaration protected virtual void OnBarUpdate() OnOrderFillUpdate(IOrder) Declaration protected virtual void OnOrderFillUpdate(IOrder order) Parameters Type Name Description IOrder order OnOrderUpdate(IOrder) Declaration protected virtual void OnOrderUpdate(IOrder order) Parameters Type Name Description IOrder order OnPositionUpdate() Declaration protected virtual void OnPositionUpdate() PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) Places a limit order. Declaration public IOrder PlaceLimitOrder(OrderAction action, double quantity, double limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action The buy or sell action. double quantity Order quantity. double limitPrice Limit price. TimeInForce timeInForce Order duration. Defaults to Day. string comment Optional comment for the order. Returns Type Description IOrder PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) Places an order of specified type with defined price parameters. Declaration public IOrder PlaceOrder(OrderAction action, OrderType type, double quantity, double? stopPrice, double? limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action The buy or sell action. OrderType type Order type (e.g., Limit, Stop). double quantity Order quantity. double? stopPrice Stop price if applicable. double? limitPrice Limit price if applicable. TimeInForce timeInForce Order duration. Defaults to Day. string comment Optional comment for the order. Returns Type Description IOrder PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) Places a stop-limit order. The buy or sell action. Order quantity. Stop price. Limit price. Order duration. Defaults to Day. Optional comment for the order. Declaration public IOrder PlaceStopLimitOrder(OrderAction action, double quantity, double stopPrice, double limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action double quantity double stopPrice double limitPrice TimeInForce timeInForce string comment Returns Type Description IOrder PlaceStopOrder(OrderAction, double, double, TimeInForce, string) Places a stop order that activates when the stop price is reached. The buy or sell action. Order quantity. Stop price. Order duration. Defaults to Day. Optional comment for the order. Declaration public IOrder PlaceStopOrder(OrderAction action, double quantity, double stopPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action double quantity double stopPrice TimeInForce timeInForce string comment Returns Type Description IOrder SetStopLoss(IOrder, double, string) Sets a stop-loss order on an open position at a specified price. Declaration public IOrder SetStopLoss(IOrder order, double stopPrice, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the stop-loss is applied. double stopPrice The price at which the stop-loss order is set. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the stop-loss applied. SetStopLossPercent(IOrder, double, string) Sets a stop-loss order on an open position based on a specified percentage from the entry price. Declaration public IOrder SetStopLossPercent(IOrder order, double percent, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the stop-loss is applied. double percent The percentage away from the entry price to place the stop-loss. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the stop-loss applied. SetStopLossTicks(IOrder, int, string) Sets a stop-loss order on an open position based on a specified number of ticks from the entry price. Declaration public IOrder SetStopLossTicks(IOrder order, int ticks, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the stop-loss is applied. int ticks The number of ticks away from the entry price to place the stop-loss. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the stop-loss applied. SetTakeProfit(IOrder, double, string) Sets a take-profit order at a specified price to close a position when the price is reached. Declaration public IOrder SetTakeProfit(IOrder order, double limitPrice, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the take-profit is applied. double limitPrice The price at which the take-profit order is set. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the take-profit applied. SetTakeProfitPercent(IOrder, double, string) Sets a take-profit order on an open position based on a specified percentage from the entry price. Declaration public IOrder SetTakeProfitPercent(IOrder order, double percent, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the take-profit is applied. double percent The percentage away from the entry price to place the take-profit. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the take-profit applied. SetTakeProfitTicks(IOrder, int, string) Sets a take-profit order on an open position based on a specified number of ticks from the entry price. Declaration public IOrder SetTakeProfitTicks(IOrder order, int ticks, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the take-profit is applied. int ticks The number of ticks away from the entry price to place the take-profit. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the take-profit applied. Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor"
  },
  "API/Tickblaze.Scripts.Api.Bases.WatchlistCellString.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.WatchlistCellString.html",
    "title": "Class WatchlistCellString | Tickblaze",
    "keywords": "Class WatchlistCellString Inheritance object WatchlistCellString Implements IEquatable<WatchlistCellString> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Bases Assembly: Tickblaze.Scripts.Api.dll Syntax public record WatchlistCellString : IEquatable<WatchlistCellString> Constructors WatchlistCellString() Declaration public WatchlistCellString() WatchlistCellString(WatchlistCellString) Declaration protected WatchlistCellString(WatchlistCellString original) Parameters Type Name Description WatchlistCellString original Properties Background Declaration public Color Background { get; set; } Property Value Type Description Color Foreground Declaration public Color Foreground { get; set; } Property Value Type Description Color Value Declaration public string Value { get; set; } Property Value Type Description string Methods Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) Equals(WatchlistCellString?) Declaration public virtual bool Equals(WatchlistCellString? other) Parameters Type Name Description WatchlistCellString other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() get_EqualityContract() Declaration protected virtual Type get_EqualityContract() Returns Type Description Type Operators operator ==(WatchlistCellString?, WatchlistCellString?) Declaration public static bool operator ==(WatchlistCellString? left, WatchlistCellString? right) Parameters Type Name Description WatchlistCellString left WatchlistCellString right Returns Type Description bool operator !=(WatchlistCellString?, WatchlistCellString?) Declaration public static bool operator !=(WatchlistCellString? left, WatchlistCellString? right) Parameters Type Name Description WatchlistCellString left WatchlistCellString right Returns Type Description bool Implements IEquatable<T>"
  },
  "API/Tickblaze.Scripts.Api.Bases.html": {
    "href": "API/Tickblaze.Scripts.Api.Bases.html",
    "title": "Namespace Tickblaze.Scripts.Api.Bases | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Bases Classes BarType Drawing Indicator Indicator.BandShading PositionSizer Script Strategy TradeManagementStrategy TradingScript WatchlistCellString Interfaces IIndicator IStrategyScriptBase ITradeManagmentStrategyScriptBase Enums BarType.SourceDataType"
  },
  "API/Tickblaze.Scripts.Api.CollectionExtensions.html": {
    "href": "API/Tickblaze.Scripts.Api.CollectionExtensions.html",
    "title": "Class CollectionExtensions | Tickblaze",
    "keywords": "Class CollectionExtensions Inheritance object CollectionExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api Assembly: Tickblaze.Scripts.Api.dll Syntax public static class CollectionExtensions Methods BinarySearch<TItem>(IReadOnlyList<TItem>, TItem) Declaration public static int BinarySearch<TItem>(this IReadOnlyList<TItem> items, TItem item) Parameters Type Name Description IReadOnlyList<TItem> items TItem item Returns Type Description int Type Parameters Name Description TItem Remarks The implementation is a refactored copy of this."
  },
  "API/Tickblaze.Scripts.Api.Enums.FontStyle.html": {
    "href": "API/Tickblaze.Scripts.Api.Enums.FontStyle.html",
    "title": "Enum FontStyle | Tickblaze",
    "keywords": "Enum FontStyle Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum FontStyle Fields Name Description Italic Normal Oblique"
  },
  "API/Tickblaze.Scripts.Api.Enums.FontWeight.html": {
    "href": "API/Tickblaze.Scripts.Api.Enums.FontWeight.html",
    "title": "Enum FontWeight | Tickblaze",
    "keywords": "Enum FontWeight Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum FontWeight Fields Name Description Black Bold DemiBold ExtraBlack ExtraBold ExtraLight Heavy Light Medium Normal Regular SemiBold Thin UltraBlack UltraBold UltraLight"
  },
  "API/Tickblaze.Scripts.Api.Enums.HorizontalAlignment.html": {
    "href": "API/Tickblaze.Scripts.Api.Enums.HorizontalAlignment.html",
    "title": "Enum HorizontalAlignment | Tickblaze",
    "keywords": "Enum HorizontalAlignment Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum HorizontalAlignment Fields Name Description Center Left Right"
  },
  "API/Tickblaze.Scripts.Api.Enums.LineStyle.html": {
    "href": "API/Tickblaze.Scripts.Api.Enums.LineStyle.html",
    "title": "Enum LineStyle | Tickblaze",
    "keywords": "Enum LineStyle Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum LineStyle Fields Name Description Dash DashDot DashDotDot Dot Solid"
  },
  "API/Tickblaze.Scripts.Api.Enums.OrderAction.html": {
    "href": "API/Tickblaze.Scripts.Api.Enums.OrderAction.html",
    "title": "Enum OrderAction | Tickblaze",
    "keywords": "Enum OrderAction Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum OrderAction Fields Name Description Buy BuyToCover Sell SellShort"
  },
  "API/Tickblaze.Scripts.Api.Enums.OrderDirection.html": {
    "href": "API/Tickblaze.Scripts.Api.Enums.OrderDirection.html",
    "title": "Enum OrderDirection | Tickblaze",
    "keywords": "Enum OrderDirection Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum OrderDirection Fields Name Description Long Short"
  },
  "API/Tickblaze.Scripts.Api.Enums.OrderStatus.html": {
    "href": "API/Tickblaze.Scripts.Api.Enums.OrderStatus.html",
    "title": "Enum OrderStatus | Tickblaze",
    "keywords": "Enum OrderStatus Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum OrderStatus Fields Name Description Cancelled Executed Pending Unknown"
  },
  "API/Tickblaze.Scripts.Api.Enums.OrderType.html": {
    "href": "API/Tickblaze.Scripts.Api.Enums.OrderType.html",
    "title": "Enum OrderType | Tickblaze",
    "keywords": "Enum OrderType Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum OrderType Fields Name Description Limit Market Stop StopLimit"
  },
  "API/Tickblaze.Scripts.Api.Enums.PlotStyle.html": {
    "href": "API/Tickblaze.Scripts.Api.Enums.PlotStyle.html",
    "title": "Enum PlotStyle | Tickblaze",
    "keywords": "Enum PlotStyle Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum PlotStyle Fields Name Description Cross Dot Hash Histogram Line Square Stair TriangleDown TriangleLeft TriangleRight TriangleUp"
  },
  "API/Tickblaze.Scripts.Api.Enums.PositionStatus.html": {
    "href": "API/Tickblaze.Scripts.Api.Enums.PositionStatus.html",
    "title": "Enum PositionStatus | Tickblaze",
    "keywords": "Enum PositionStatus Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum PositionStatus Fields Name Description Close Open"
  },
  "API/Tickblaze.Scripts.Api.Enums.RoundingMode.html": {
    "href": "API/Tickblaze.Scripts.Api.Enums.RoundingMode.html",
    "title": "Enum RoundingMode | Tickblaze",
    "keywords": "Enum RoundingMode Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum RoundingMode Fields Name Description Down ToNearest Up"
  },
  "API/Tickblaze.Scripts.Api.Enums.TimeInForce.html": {
    "href": "API/Tickblaze.Scripts.Api.Enums.TimeInForce.html",
    "title": "Enum TimeInForce | Tickblaze",
    "keywords": "Enum TimeInForce Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum TimeInForce Fields Name Description Day FillOrKill GoodTillCancel ImmediateOrCancel"
  },
  "API/Tickblaze.Scripts.Api.Enums.VerticalAlignment.html": {
    "href": "API/Tickblaze.Scripts.Api.Enums.VerticalAlignment.html",
    "title": "Enum VerticalAlignment | Tickblaze",
    "keywords": "Enum VerticalAlignment Namespace: Tickblaze.Scripts.Api.Enums Assembly: Tickblaze.Scripts.Api.dll Syntax public enum VerticalAlignment Fields Name Description Bottom Center Top"
  },
  "API/Tickblaze.Scripts.Api.Enums.html": {
    "href": "API/Tickblaze.Scripts.Api.Enums.html",
    "title": "Namespace Tickblaze.Scripts.Api.Enums | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Enums Enums FontStyle FontWeight HorizontalAlignment LineStyle OrderAction OrderDirection OrderStatus OrderType PlotStyle PositionStatus RoundingMode TimeInForce VerticalAlignment"
  },
  "API/Tickblaze.Scripts.Api.IndexedDictionary-2.html": {
    "href": "API/Tickblaze.Scripts.Api.IndexedDictionary-2.html",
    "title": "Class IndexedDictionary<TKey, TValue> | Tickblaze",
    "keywords": "Class IndexedDictionary<TKey, TValue> Inheritance object Dictionary<TKey, TValue> IndexedDictionary<TKey, TValue> Parameters Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IDictionary ICollection IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable ISerializable IDeserializationCallback Inherited Members Dictionary<TKey, TValue>.Add(TKey, TValue) Dictionary<TKey, TValue>.Clear() Dictionary<TKey, TValue>.ContainsKey(TKey) Dictionary<TKey, TValue>.ContainsValue(TValue) Dictionary<TKey, TValue>.GetEnumerator() Dictionary<TKey, TValue>.OnDeserialization(object) Dictionary<TKey, TValue>.Remove(TKey) Dictionary<TKey, TValue>.Remove(TKey, out TValue) Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue) Dictionary<TKey, TValue>.TryAdd(TKey, TValue) Dictionary<TKey, TValue>.EnsureCapacity(int) Dictionary<TKey, TValue>.TrimExcess() Dictionary<TKey, TValue>.TrimExcess(int) Dictionary<TKey, TValue>.Comparer Dictionary<TKey, TValue>.Count Dictionary<TKey, TValue>.Keys Dictionary<TKey, TValue>.Values Dictionary<TKey, TValue>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api Assembly: Tickblaze.Scripts.Api.dll Syntax public class IndexedDictionary<TKey, TValue> : Dictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, ISerializable, IDeserializationCallback where TKey : notnull Type Parameters Name Description TKey TValue Constructors IndexedDictionary() Declaration public IndexedDictionary() Properties this[int] Declaration public TValue this[int index] { get; set; } Parameters Type Name Description int index Property Value Type Description TValue Implements IDictionary<TKey, TValue> ICollection<T> IDictionary ICollection IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IEnumerable ISerializable IDeserializationCallback"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IAccount.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IAccount.html",
    "title": "Interface IAccount | Tickblaze",
    "keywords": "Interface IAccount Represents an account with balance, margin, positions, and equity details. Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IAccount Properties BaseCurrencyCode Currency code for the account's base currency. Declaration string BaseCurrencyCode { get; } Property Value Type Description string BuyingPower Available buying power. Declaration double BuyingPower { get; } Property Value Type Description double Cash Cash balance. Declaration double Cash { get; } Property Value Type Description double CashValue Current cash value. Declaration double CashValue { get; } Property Value Type Description double Equity Equity in the account. Declaration double Equity { get; } Property Value Type Description double ExcessEquity Excess equity available. Declaration double ExcessEquity { get; } Property Value Type Description double ExcessInitialMargin Excess initial margin. Declaration double ExcessInitialMargin { get; } Property Value Type Description double ExcessIntradayMargin Excess intraday margin. Declaration double ExcessIntradayMargin { get; } Property Value Type Description double GrossRealizedPnL Gross realized profit and loss. Declaration double GrossRealizedPnL { get; } Property Value Type Description double InitialCash Initial cash amount deposited. Declaration double InitialCash { get; } Property Value Type Description double InitialMargin Initial margin required for trading positions. Declaration double InitialMargin { get; } Property Value Type Description double InitialMarginOvernight Initial margin required for overnight positions. Declaration double InitialMarginOvernight { get; } Property Value Type Description double IntradayMargin Intraday margin requirement. Declaration double IntradayMargin { get; } Property Value Type Description double MaintenanceMargin Maintenance margin requirement. Declaration double MaintenanceMargin { get; } Property Value Type Description double MaintenanceMarginOvernight Maintenance margin required for overnight positions. Declaration double MaintenanceMarginOvernight { get; } Property Value Type Description double MarketValue Market value of all positions. Declaration double MarketValue { get; } Property Value Type Description double Name Account name. Declaration string Name { get; } Property Value Type Description string NetLiquidation Net liquidation value. Declaration double NetLiquidation { get; } Property Value Type Description double NetLiquidationValue Net liquidation value including all assets and liabilities. Declaration double NetLiquidationValue { get; } Property Value Type Description double Positions List of positions held in the account. Declaration IReadOnlyList<IPosition> Positions { get; } Property Value Type Description IReadOnlyList<IPosition> RealizedPnL Realized profit and loss. Declaration double RealizedPnL { get; } Property Value Type Description double TotalNetValue Total net value of the account. Declaration double TotalNetValue { get; } Property Value Type Description double TotalPnL Total profit and loss. Declaration double TotalPnL { get; } Property Value Type Description double UnrealizedPnL Unrealized profit and loss. Declaration double UnrealizedPnL { get; } Property Value Type Description double"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IAutoScale.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IAutoScale.html",
    "title": "Interface IAutoScale | Tickblaze",
    "keywords": "Interface IAutoScale Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IAutoScale Methods CalculateMinMax(int, int) Declaration (double min, double max) CalculateMinMax(int fromIndex, int toIndex) Parameters Type Name Description int fromIndex int toIndex Returns Type Description (double min, double max)"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IChart.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IChart.html",
    "title": "Interface IChart | Tickblaze",
    "keywords": "Interface IChart Inherited Members ISize.Height ISize.Width Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IChart : ISize Properties FirstVisibleBarIndex Gets the index of the first visible bar on the chart. Declaration int FirstVisibleBarIndex { get; } Property Value Type Description int LastVisibleBarIndex Gets the index of the last visible bar on the chart. Declaration int LastVisibleBarIndex { get; } Property Value Type Description int Panels Gets the list of chart panels associated with the chart. Declaration IList<IChartPanel> Panels { get; } Property Value Type Description IList<IChartPanel> Methods FormatTime(DateTime) Formats the given datetime into a string representation. Declaration string FormatTime(DateTime time) Parameters Type Name Description DateTime time The datetime value to format. Returns Type Description string A string representing the formatted datetime. GetBarIndexByXCoordinate(double) Gets the bar index by the specified X coordinate. Declaration int GetBarIndexByXCoordinate(double x) Parameters Type Name Description double x The X coordinate to get the bar index for. Returns Type Description int The bar index corresponding to the specified X coordinate. GetTimeByXCoordinate(double) Gets the time value by the specified X coordinate. Declaration DateTime GetTimeByXCoordinate(double x) Parameters Type Name Description double x The X coordinate to get the time value for. Returns Type Description DateTime The time value corresponding to the specified X coordinate. GetXCoordinateByBarIndex(int) Gets the X coordinate by the given bar index. Declaration double GetXCoordinateByBarIndex(int barIndex) Parameters Type Name Description int barIndex The index of the bar. Returns Type Description double The X coordinate corresponding to the specified bar index. GetXCoordinateByTime(DateTime) Gets the X coordinate by the specified time. Declaration double GetXCoordinateByTime(DateTime time) Parameters Type Name Description DateTime time The time to get the X coordinate for. Returns Type Description double The X coordinate corresponding to the specified time."
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IChartObject.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IChartObject.html",
    "title": "Interface IChartObject | Tickblaze",
    "keywords": "Interface IChartObject Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IChartObject Properties Chart The chart associated with this chart object. Declaration IChart? Chart { get; } Property Value Type Description IChart ChartPanel The chart panel associated with this chart object. Declaration IChartPanel? ChartPanel { get; } Property Value Type Description IChartPanel ChartScale The chart scale associated with this chart object. Declaration IChartScale? ChartScale { get; } Property Value Type Description IChartScale ShowOnChart A value indicating whether this chart object will show on the chart. Declaration bool ShowOnChart { get; } Property Value Type Description bool Methods OnRender(IDrawingContext) Renders the chart object using the provided drawing context. Declaration void OnRender(IDrawingContext context) Parameters Type Name Description IDrawingContext context The drawing context used to render the chart object."
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IChartPanel.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IChartPanel.html",
    "title": "Interface IChartPanel | Tickblaze",
    "keywords": "Interface IChartPanel Inherited Members ISize.Height ISize.Width Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IChartPanel : ISize Properties LeftScale Gets the left scale of the chart panel. Declaration IChartScale LeftScale { get; } Property Value Type Description IChartScale RightScale Gets the right scale of the chart panel. Declaration IChartScale RightScale { get; } Property Value Type Description IChartScale"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IChartPoint.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IChartPoint.html",
    "title": "Interface IChartPoint | Tickblaze",
    "keywords": "Interface IChartPoint Inherited Members IPoint.X IPoint.Y Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IChartPoint : IPoint Properties Index Declaration int Index { get; } Property Value Type Description int Time Declaration IComparable Time { get; set; } Property Value Type Description IComparable Value Declaration IComparable Value { get; set; } Property Value Type Description IComparable"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IChartPoints.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IChartPoints.html",
    "title": "Interface IChartPoints | Tickblaze",
    "keywords": "Interface IChartPoints Inherited Members IReadOnlyList<IChartPoint>.this[int] IReadOnlyCollection<IChartPoint>.Count IEnumerable<IChartPoint>.GetEnumerator() Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IChartPoints : IReadOnlyList<IChartPoint>, IReadOnlyCollection<IChartPoint>, IEnumerable<IChartPoint>, IEnumerable Methods Add(IComparable, IComparable) Declaration void Add(IComparable xDataValue, IComparable yDataValue) Parameters Type Name Description IComparable xDataValue IComparable yDataValue Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IChartScale.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IChartScale.html",
    "title": "Interface IChartScale | Tickblaze",
    "keywords": "Interface IChartScale Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IChartScale Properties MaxPrice Declaration double MaxPrice { get; } Property Value Type Description double MinPrice Declaration double MinPrice { get; } Property Value Type Description double Methods FormatPrice(double) Formats the given price value into a string representation. Declaration string FormatPrice(double value) Parameters Type Name Description double value The price value to format. Returns Type Description string A string representing the formatted price. GetValueByYCoordinate(double) Gets the axis value for the specified Y coordinate in pixels. Declaration double GetValueByYCoordinate(double y) Parameters Type Name Description double y The Y coordinate in pixels to convert. Returns Type Description double The axis value corresponding to the specified Y coordinate in pixels. GetYCoordinateByValue(double) Gets the Y coordinate in pixels for the specified axis value. Declaration double GetYCoordinateByValue(double value) Parameters Type Name Description double value The axis value to convert. Returns Type Description double The Y coordinate in pixels corresponding to the specified axis value."
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IDispatcher.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IDispatcher.html",
    "title": "Interface IDispatcher | Tickblaze",
    "keywords": "Interface IDispatcher Provides the ability to execute delegates on the UI thread Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IDispatcher Methods Invoke(Action) Executes the specified Action synchronously on the UI thread. Declaration void Invoke(Action action) Parameters Type Name Description Action action An Action delegate to invoke through the dispatcher. InvokeAsync(Action) Executes the specified Action asynchronously on the UI thread. Declaration Task InvokeAsync(Action action) Parameters Type Name Description Action action An Action delegate to invoke through the dispatcher. Returns Type Description Task InvokeAsync<T>(Func<T>) Executes the specified Action asynchronously on the UI thread. Declaration Task<T> InvokeAsync<T>(Func<T> callback) Parameters Type Name Description Func<T> callback A Func delegate to invoke through the dispatcher. Returns Type Description Task<T> The value returned by callback. Type Parameters Name Description T The return value type of the specified delegate. Invoke<T>(Func<T>) Executes the specified Func synchronously on the UI thread. Declaration T Invoke<T>(Func<T> callback) Parameters Type Name Description Func<T> callback A Func delegate to invoke through the dispatcher. Returns Type Description T The value returned by callback. Type Parameters Name Description T The return value type of the specified delegate."
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IDrawingAnnotation.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IDrawingAnnotation.html",
    "title": "Interface IDrawingAnnotation | Tickblaze",
    "keywords": "Interface IDrawingAnnotation Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IDrawingAnnotation Properties Points Declaration IChartPoints Points { get; } Property Value Type Description IChartPoints"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IDrawingContext.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IDrawingContext.html",
    "title": "Interface IDrawingContext | Tickblaze",
    "keywords": "Interface IDrawingContext Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IDrawingContext Properties RenderSize Declaration ISize RenderSize { get; } Property Value Type Description ISize Methods DrawEllipse(IPoint, double, double, Color?, Color?, int, LineStyle) Declaration void DrawEllipse(IPoint center, double radiusX, double radiusY, Color? fillColor, Color? lineColor = null, int lineThickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters Type Name Description IPoint center double radiusX double radiusY Color? fillColor Color? lineColor int lineThickness LineStyle lineStyle DrawExtendedLine(IPoint, IPoint, Color, int, LineStyle) Declaration void DrawExtendedLine(IPoint pointA, IPoint pointB, Color color, int thickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters Type Name Description IPoint pointA IPoint pointB Color color int thickness LineStyle lineStyle DrawLine(IPoint, IPoint, Color, int, LineStyle) Declaration void DrawLine(IPoint pointA, IPoint pointB, Color color, int thickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters Type Name Description IPoint pointA IPoint pointB Color color int thickness LineStyle lineStyle DrawPolygon(IEnumerable<IPoint>, Color?, Color?, int, LineStyle) Declaration void DrawPolygon(IEnumerable<IPoint> points, Color? fillColor, Color? lineColor = null, int lineThickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters Type Name Description IEnumerable<IPoint> points Color? fillColor Color? lineColor int lineThickness LineStyle lineStyle DrawRay(IPoint, IPoint, Color, int, LineStyle) Declaration void DrawRay(IPoint pointA, IPoint pointB, Color color, int thickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters Type Name Description IPoint pointA IPoint pointB Color color int thickness LineStyle lineStyle DrawRectangle(IPoint, double, double, Color?, Color?, int, LineStyle) Declaration void DrawRectangle(IPoint pointA, double width, double height, Color? fillColor, Color? lineColor = null, int lineThickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters Type Name Description IPoint pointA double width double height Color? fillColor Color? lineColor int lineThickness LineStyle lineStyle DrawRectangle(IPoint, IPoint, Color?, Color?, int, LineStyle) Declaration void DrawRectangle(IPoint pointA, IPoint pointB, Color? fillColor, Color? lineColor = null, int lineThickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters Type Name Description IPoint pointA IPoint pointB Color? fillColor Color? lineColor int lineThickness LineStyle lineStyle DrawText(IPoint, string, Color, Font?) Declaration void DrawText(IPoint origin, string text, Color color, Font? font = null) Parameters Type Name Description IPoint origin string text Color color Font font MeasureText(string, Font) Declaration ISize MeasureText(string text, Font font) Parameters Type Name Description string text Font font Returns Type Description ISize"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IExchangeCalendar.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IExchangeCalendar.html",
    "title": "Interface IExchangeCalendar | Tickblaze",
    "keywords": "Interface IExchangeCalendar Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IExchangeCalendar Methods ExchangeDateTimeToUtcDateTime(DateTime) Converts a specified exchange date/time to a UTC date/time. Declaration DateTime ExchangeDateTimeToUtcDateTime(DateTime exchangeDateTime) Parameters Type Name Description DateTime exchangeDateTime The exchange date/time to convert. Returns Type Description DateTime The specified exchange date/time converted to UTC date/time. GetSession(DateTime) Gets a session at specific UTC date/time. Declaration IExchangeSession? GetSession(DateTime utcDateTime) Parameters Type Name Description DateTime utcDateTime The UTC date/time to convert. Returns Type Description IExchangeSession The session at specific UTC date/time. IsSessionOpen(DateTime, bool) Determines whether there is an open session at a specified date/time. Declaration bool IsSessionOpen(DateTime utcDateTime, bool isIntraday) Parameters Type Name Description DateTime utcDateTime The UTC date/time. bool isIntraday Indicates whether the test is for intraday data. Returns Type Description bool True if there is an open session, false otherwise. UtcDateTimeToExchangeDateTime(DateTime) Converts a specified UTC date/time to an exchange date/time. Declaration DateTime UtcDateTimeToExchangeDateTime(DateTime utcDateTime) Parameters Type Name Description DateTime utcDateTime The UTC date/time to convert. Returns Type Description DateTime The specified UTC date/time converted to exchange date/time."
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IExchangeSession.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IExchangeSession.html",
    "title": "Interface IExchangeSession | Tickblaze",
    "keywords": "Interface IExchangeSession Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IExchangeSession Properties EndExchangeDateTime The end exchange date/time of the session. Declaration DateTime EndExchangeDateTime { get; } Property Value Type Description DateTime EndUtcDateTime The end UTC date/time of the session. Declaration DateTime EndUtcDateTime { get; } Property Value Type Description DateTime SessionMinutes The session minutes count. Declaration int SessionMinutes { get; } Property Value Type Description int SessionSeconds The session seconds count. Declaration int SessionSeconds { get; } Property Value Type Description int StartExchangeDateTime The start exchange date/time of the session. Declaration DateTime StartExchangeDateTime { get; } Property Value Type Description DateTime StartUtcDateTime The start UTC date/time of the session. Declaration DateTime StartUtcDateTime { get; } Property Value Type Description DateTime TotalMinutes The total minute count from the first minute of the first session. Declaration int TotalMinutes { get; } Property Value Type Description int Methods Contains(DateTime) Return whether the provided date time is within the session Declaration bool Contains(DateTime utcDateTime) Parameters Type Name Description DateTime utcDateTime Returns Type Description bool"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IMetadata.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IMetadata.html",
    "title": "Interface IMetadata | Tickblaze",
    "keywords": "Interface IMetadata Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IMetadata Properties Description Declaration string Description { get; } Property Value Type Description string Metadata Declaration Metadata Metadata { get; } Property Value Type Description Metadata Name Declaration string Name { get; } Property Value Type Description string ShortName Declaration string ShortName { get; } Property Value Type Description string"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IPlot.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IPlot.html",
    "title": "Interface IPlot | Tickblaze",
    "keywords": "Interface IPlot Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IPlot Properties Color Declaration Color Color { get; } Property Value Type Description Color IsVisible Declaration bool IsVisible { get; } Property Value Type Description bool LineStyle Declaration LineStyle LineStyle { get; } Property Value Type Description LineStyle Name Declaration [JsonIgnore] string Name { get; } Property Value Type Description string Thickness Declaration int Thickness { get; } Property Value Type Description int"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IPoint.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IPoint.html",
    "title": "Interface IPoint | Tickblaze",
    "keywords": "Interface IPoint Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IPoint Properties X Declaration double X { get; set; } Property Value Type Description double Y Declaration double Y { get; set; } Property Value Type Description double"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.IScript.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.IScript.html",
    "title": "Interface IScript | Tickblaze",
    "keywords": "Interface IScript Inherited Members IDisposable.Dispose() Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IScript : IDisposable Properties IsInitialized Declaration bool IsInitialized { get; } Property Value Type Description bool Metadata Declaration Metadata Metadata { get; } Property Value Type Description Metadata Parameters Declaration Parameters Parameters { get; } Property Value Type Description Parameters Methods Initialize() Declaration void Initialize()"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.ISeries-1.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.ISeries-1.html",
    "title": "Interface ISeries<TItem> | Tickblaze",
    "keywords": "Interface ISeries<TItem> Inherited Members IReadOnlyList<TItem>.this[int] IReadOnlyCollection<TItem>.Count IEnumerable<TItem>.GetEnumerator() Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface ISeries<out TItem> : IReadOnlyList<TItem?>, IReadOnlyCollection<TItem?>, IEnumerable<TItem?>, IEnumerable Type Parameters Name Description TItem Methods Last(int) Declaration TItem? Last(int barsAgo = 0) Parameters Type Name Description int barsAgo Returns Type Description TItem Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.ISize.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.ISize.html",
    "title": "Interface ISize | Tickblaze",
    "keywords": "Interface ISize Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface ISize Properties Height Declaration double Height { get; } Property Value Type Description double Width Declaration double Width { get; } Property Value Type Description double"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.ISymbol.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.ISymbol.html",
    "title": "Interface ISymbol | Tickblaze",
    "keywords": "Interface ISymbol Namespace: Tickblaze.Scripts.Api.Interfaces Assembly: Tickblaze.Scripts.Api.dll Syntax public interface ISymbol Properties CurrencyCode Declaration string CurrencyCode { get; } Property Value Type Description string Decimals Declaration int Decimals { get; } Property Value Type Description int ExchangeCalendar Declaration IExchangeCalendar ExchangeCalendar { get; } Property Value Type Description IExchangeCalendar MinimumVolume Declaration decimal MinimumVolume { get; } Property Value Type Description decimal Name Declaration string Name { get; } Property Value Type Description string PointSize Declaration double PointSize { get; } Property Value Type Description double PointValue Declaration double PointValue { get; } Property Value Type Description double TickSize Declaration double TickSize { get; } Property Value Type Description double TickValue Declaration double TickValue { get; } Property Value Type Description double TicksPerPoint Declaration double TicksPerPoint { get; } Property Value Type Description double Methods FormatPrice(double) Declaration string FormatPrice(double price) Parameters Type Name Description double price Returns Type Description string NormalizeVolume(double, RoundingMode) Declaration decimal NormalizeVolume(double volume, RoundingMode roundingMode) Parameters Type Name Description double volume RoundingMode roundingMode Returns Type Description decimal RoundToTick(double) Declaration double RoundToTick(double value) Parameters Type Name Description double value Returns Type Description double"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.Orders.IOrder.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.Orders.IOrder.html",
    "title": "Interface IOrder | Tickblaze",
    "keywords": "Interface IOrder Namespace: Tickblaze.Scripts.Api.Interfaces.Orders Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IOrder Properties Direction Declaration OrderDirection Direction { get; } Property Value Type Description OrderDirection Index Declaration int Index { get; } Property Value Type Description int LimitPrice Declaration double LimitPrice { get; } Property Value Type Description double Price Declaration double Price { get; } Property Value Type Description double Quantity Declaration double Quantity { get; } Property Value Type Description double Status Declaration OrderStatus Status { get; } Property Value Type Description OrderStatus StopPrice Declaration double StopPrice { get; } Property Value Type Description double Symbol Declaration ISymbol Symbol { get; } Property Value Type Description ISymbol TimeInForce Declaration TimeInForce TimeInForce { get; } Property Value Type Description TimeInForce Type Declaration OrderType Type { get; } Property Value Type Description OrderType"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.Orders.IOrderAccessor.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.Orders.IOrderAccessor.html",
    "title": "Interface IOrderAccessor | Tickblaze",
    "keywords": "Interface IOrderAccessor Namespace: Tickblaze.Scripts.Api.Interfaces.Orders Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IOrderAccessor Properties Account Declaration IAccount Account { get; } Property Value Type Description IAccount PendingOrders Declaration IReadOnlyList<IOrder> PendingOrders { get; } Property Value Type Description IReadOnlyList<IOrder> Position Declaration IPosition Position { get; } Property Value Type Description IPosition Symbol Declaration ISymbol Symbol { get; } Property Value Type Description ISymbol Methods GetExchangeRate(string, string) Declaration double GetExchangeRate(string fromCurrency, string toCurrency) Parameters Type Name Description string fromCurrency string toCurrency Returns Type Description double"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.Orders.IOrderManager.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.Orders.IOrderManager.html",
    "title": "Interface IOrderManager | Tickblaze",
    "keywords": "Interface IOrderManager Inherited Members IOrderAccessor.GetExchangeRate(string, string) IOrderAccessor.Symbol IOrderAccessor.Account IOrderAccessor.PendingOrders IOrderAccessor.Position Namespace: Tickblaze.Scripts.Api.Interfaces.Orders Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IOrderManager : IOrderAccessor Methods CancelOrder(IOrder, string, bool) Cancels the specified order with an optional comment. The order to cancel. Optional comment for the order. Declaration void CancelOrder(IOrder order, string comment = \"\", bool cancelSilently = false) Parameters Type Name Description IOrder order string comment bool cancelSilently ClosePosition(string) Closes the entire position with an optional comment. Optional comment for the order. Declaration void ClosePosition(string comment = \"\") Parameters Type Name Description string comment ExecuteMarketOrder(OrderAction, double, TimeInForce, string) Executes a market order immediately based on the given action and quantity. Declaration IOrder ExecuteMarketOrder(OrderAction action, double quantity, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action The buy or sell action. double quantity The order quantity. TimeInForce timeInForce Order duration setting. Defaults to Day. string comment Optional order comment. Returns Type Description IOrder GetOrderExpectedPrice(IOrder) Gets estimated fill price of pending order. Declaration double GetOrderExpectedPrice(IOrder order) Parameters Type Name Description IOrder order The pending order. Returns Type Description double ModifyOrder(IOrder, double, double?, double?, TimeInForce) Modifies an existing order. The order of open position. Order quantity. Stop price if applicable. Limit price if applicable. Order duration. Defaults to Day. Declaration void ModifyOrder(IOrder order, double quantity, double? stopPrice, double? limitPrice, TimeInForce timeInForce = TimeInForce.Day) Parameters Type Name Description IOrder order double quantity double? stopPrice double? limitPrice TimeInForce timeInForce PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) Places a limit order. Declaration IOrder PlaceLimitOrder(OrderAction action, double quantity, double limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action The buy or sell action. double quantity Order quantity. double limitPrice Limit price. TimeInForce timeInForce Order duration. Defaults to Day. string comment Optional comment for the order. Returns Type Description IOrder PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) Places an order of specified type with defined price parameters. Declaration IOrder PlaceOrder(OrderAction action, OrderType type, double quantity, double? stopPrice, double? limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action The buy or sell action. OrderType type Order type (e.g., Limit, Stop). double quantity Order quantity. double? stopPrice Stop price if applicable. double? limitPrice Limit price if applicable. TimeInForce timeInForce Order duration. Defaults to Day. string comment Optional comment for the order. Returns Type Description IOrder PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) Places a stop-limit order. The buy or sell action. Order quantity. Stop price. Limit price. Order duration. Defaults to Day. Optional comment for the order. Declaration IOrder PlaceStopLimitOrder(OrderAction action, double quantity, double stopPrice, double limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action double quantity double stopPrice double limitPrice TimeInForce timeInForce string comment Returns Type Description IOrder PlaceStopOrder(OrderAction, double, double, TimeInForce, string) Places a stop order that activates when the stop price is reached. The buy or sell action. Order quantity. Stop price. Order duration. Defaults to Day. Optional comment for the order. Declaration IOrder PlaceStopOrder(OrderAction action, double quantity, double stopPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters Type Name Description OrderAction action double quantity double stopPrice TimeInForce timeInForce string comment Returns Type Description IOrder SetStopLoss(IOrder, double, string) Sets a stop-loss order on an open position at a specified price. Declaration IOrder SetStopLoss(IOrder order, double stopPrice, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the stop-loss is applied. double stopPrice The price at which the stop-loss order is set. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the stop-loss applied. SetStopLossPercent(IOrder, double, string) Sets a stop-loss order on an open position based on a specified percentage from the entry price. Declaration IOrder SetStopLossPercent(IOrder order, double percent, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the stop-loss is applied. double percent The percentage away from the entry price to place the stop-loss. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the stop-loss applied. SetStopLossTicks(IOrder, int, string) Sets a stop-loss order on an open position based on a specified number of ticks from the entry price. Declaration IOrder SetStopLossTicks(IOrder order, int ticks, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the stop-loss is applied. int ticks The number of ticks away from the entry price to place the stop-loss. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the stop-loss applied. SetTakeProfit(IOrder, double, string) Sets a take-profit order at a specified price to close a position when the price is reached. Declaration IOrder SetTakeProfit(IOrder order, double limitPrice, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the take-profit is applied. double limitPrice The price at which the take-profit order is set. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the take-profit applied. SetTakeProfitPercent(IOrder, double, string) Sets a take-profit order on an open position based on a specified percentage from the entry price. Declaration IOrder SetTakeProfitPercent(IOrder order, double percent, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the take-profit is applied. double percent The percentage away from the entry price to place the take-profit. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the take-profit applied. SetTakeProfitTicks(IOrder, int, string) Sets a take-profit order on an open position based on a specified number of ticks from the entry price. Declaration IOrder SetTakeProfitTicks(IOrder order, int ticks, string comment = \"\") Parameters Type Name Description IOrder order The order of the open position to which the take-profit is applied. int ticks The number of ticks away from the entry price to place the take-profit. string comment Optional comment for the order, providing additional information or notes. Returns Type Description IOrder The updated order with the take-profit applied."
  },
  "API/Tickblaze.Scripts.Api.Interfaces.Orders.IOrders.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.Orders.IOrders.html",
    "title": "Interface IOrders | Tickblaze",
    "keywords": "Interface IOrders Inherited Members IEnumerable<IOrder>.GetEnumerator() Namespace: Tickblaze.Scripts.Api.Interfaces.Orders Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IOrders : IEnumerable<IOrder>, IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description int this[int] Declaration IOrder this[int index] { get; } Parameters Type Name Description int index Property Value Type Description IOrder Events Cancelled Declaration event Action<IOrder> Cancelled Event Type Type Description Action<IOrder> Created Declaration event Action<IOrder> Created Event Type Type Description Action<IOrder> Filled Declaration event Action<IOrder> Filled Event Type Type Description Action<IOrder> Modified Declaration event Action<IOrder> Modified Event Type Type Description Action<IOrder>"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.Orders.IPosition.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.Orders.IPosition.html",
    "title": "Interface IPosition | Tickblaze",
    "keywords": "Interface IPosition Namespace: Tickblaze.Scripts.Api.Interfaces.Orders Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IPosition Properties Commission Declaration double Commission { get; } Property Value Type Description double Direction Declaration OrderDirection Direction { get; } Property Value Type Description OrderDirection EntryPrice Declaration double EntryPrice { get; } Property Value Type Description double ExitPrice Declaration double ExitPrice { get; } Property Value Type Description double Quantity Declaration double Quantity { get; } Property Value Type Description double Status Declaration PositionStatus Status { get; } Property Value Type Description PositionStatus Symbol Declaration ISymbol Symbol { get; } Property Value Type Description ISymbol"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.Orders.IPositions.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.Orders.IPositions.html",
    "title": "Interface IPositions | Tickblaze",
    "keywords": "Interface IPositions Inherited Members IEnumerable<IPosition>.GetEnumerator() Namespace: Tickblaze.Scripts.Api.Interfaces.Orders Assembly: Tickblaze.Scripts.Api.dll Syntax public interface IPositions : IEnumerable<IPosition>, IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description int this[int] Declaration IPosition this[int index] { get; } Parameters Type Name Description int index Property Value Type Description IPosition Events Closed Declaration event Action<IPosition> Closed Event Type Type Description Action<IPosition> Modified Declaration event Action<IPosition> Modified Event Type Type Description Action<IPosition> Opened Declaration event Action<IPosition> Opened Event Type Type Description Action<IPosition>"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.Orders.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.Orders.html",
    "title": "Namespace Tickblaze.Scripts.Api.Interfaces.Orders | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Interfaces.Orders Interfaces IOrder IOrderAccessor IOrderManager IOrders IPosition IPositions"
  },
  "API/Tickblaze.Scripts.Api.Interfaces.html": {
    "href": "API/Tickblaze.Scripts.Api.Interfaces.html",
    "title": "Namespace Tickblaze.Scripts.Api.Interfaces | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Interfaces Interfaces IAccount Represents an account with balance, margin, positions, and equity details. IAutoScale IChart IChartObject IChartPanel IChartPoint IChartPoints IChartScale IDispatcher Provides the ability to execute delegates on the UI thread IDrawingAnnotation IDrawingContext IExchangeCalendar IExchangeSession IMetadata IPlot IPoint IScript ISeries<TItem> ISize ISymbol"
  },
  "API/Tickblaze.Scripts.Api.Models.Bar.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.Bar.html",
    "title": "Class Bar | Tickblaze",
    "keywords": "Class Bar Inheritance object Bar Implements IEquatable<Bar> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public record Bar : IEquatable<Bar> Constructors Bar(DateTime, double, double, double, double, double) Declaration public Bar(DateTime Time, double Open, double High, double Low, double Close, double Volume) Parameters Type Name Description DateTime Time double Open double High double Low double Close double Volume Bar(Bar) Declaration protected Bar(Bar original) Parameters Type Name Description Bar original Properties Close Declaration public double Close { get; init; } Property Value Type Description double High Declaration public double High { get; init; } Property Value Type Description double Low Declaration public double Low { get; init; } Property Value Type Description double Open Declaration public double Open { get; init; } Property Value Type Description double Time Declaration public DateTime Time { get; init; } Property Value Type Description DateTime Volume Declaration public double Volume { get; init; } Property Value Type Description double Methods Deconstruct(out DateTime, out double, out double, out double, out double, out double) Declaration public void Deconstruct(out DateTime Time, out double Open, out double High, out double Low, out double Close, out double Volume) Parameters Type Name Description DateTime Time double Open double High double Low double Close double Volume Equals(object?) Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) Equals(Bar?) Declaration public virtual bool Equals(Bar? other) Parameters Type Name Description Bar other Returns Type Description bool GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description bool ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() get_EqualityContract() Declaration protected virtual Type get_EqualityContract() Returns Type Description Type Operators operator ==(Bar?, Bar?) Declaration public static bool operator ==(Bar? left, Bar? right) Parameters Type Name Description Bar left Bar right Returns Type Description bool operator !=(Bar?, Bar?) Declaration public static bool operator !=(Bar? left, Bar? right) Parameters Type Name Description Bar left Bar right Returns Type Description bool Implements IEquatable<T>"
  },
  "API/Tickblaze.Scripts.Api.Models.BarPeriod.PeriodType.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.BarPeriod.PeriodType.html",
    "title": "Enum BarPeriod.PeriodType | Tickblaze",
    "keywords": "Enum BarPeriod.PeriodType Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public enum BarPeriod.PeriodType Fields Name Description BidAsk Custom Day HeikinAshi Kagi Level2 LineBreak Minute Momentum Month None PointAndFigureClose PointAndFigureHighLow ProfileDay ProfileMinute ProfileMonth ProfileRange ProfileTick ProfileVolume ProfileWeek ProfileYear Range Renko Second Tick Volume Week Year"
  },
  "API/Tickblaze.Scripts.Api.Models.BarPeriod.SourceType.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.BarPeriod.SourceType.html",
    "title": "Enum BarPeriod.SourceType | Tickblaze",
    "keywords": "Enum BarPeriod.SourceType Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public enum BarPeriod.SourceType Fields Name Description Ask Bid Day Level2 Minute Trade"
  },
  "API/Tickblaze.Scripts.Api.Models.BarPeriod.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.BarPeriod.html",
    "title": "Class BarPeriod | Tickblaze",
    "keywords": "Class BarPeriod Inheritance object BarPeriod Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public sealed class BarPeriod Constructors BarPeriod(SourceType, PeriodType, double) Declaration public BarPeriod(BarPeriod.SourceType source, BarPeriod.PeriodType type, double size) Parameters Type Name Description BarPeriod.SourceType source BarPeriod.PeriodType type double size Properties Size Declaration public double Size { get; } Property Value Type Description double Source Declaration public BarPeriod.SourceType Source { get; } Property Value Type Description BarPeriod.SourceType Type Declaration public BarPeriod.PeriodType Type { get; } Property Value Type Description BarPeriod.PeriodType"
  },
  "API/Tickblaze.Scripts.Api.Models.BarSeries.BarEventArgs.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.BarSeries.BarEventArgs.html",
    "title": "Class BarSeries.BarEventArgs | Tickblaze",
    "keywords": "Class BarSeries.BarEventArgs Inheritance object EventArgs BarSeries.BarEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class BarSeries.BarEventArgs : EventArgs Constructors BarEventArgs() Declaration public BarEventArgs() Properties Bar Declaration public required Bar Bar { get; set; } Property Value Type Description Bar Index Declaration public required int Index { get; set; } Property Value Type Description int"
  },
  "API/Tickblaze.Scripts.Api.Models.BarSeries.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.BarSeries.html",
    "title": "Class BarSeries | Tickblaze",
    "keywords": "Class BarSeries Inheritance object Series<Bar> BarSeries Implements ISeries<Bar> IReadOnlyList<Bar> IReadOnlyCollection<Bar> IEnumerable<Bar> IEnumerable Inherited Members Series<Bar>._values Series<Bar>.get_DefaultValue() Series<Bar>.Last(int) Series<Bar>.Append(Bar) Series<Bar>.GetEnumerator() Series<Bar>.Count object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class BarSeries : Series<Bar>, ISeries<Bar>, IReadOnlyList<Bar?>, IReadOnlyCollection<Bar?>, IEnumerable<Bar?>, IEnumerable Constructors BarSeries(Symbol, BarPeriod) Declaration public BarSeries(Symbol symbol, BarPeriod period) Parameters Type Name Description Symbol symbol BarPeriod period Properties Close Declaration public ISeries<double> Close { get; } Property Value Type Description ISeries<double> High Declaration public ISeries<double> High { get; } Property Value Type Description ISeries<double> this[int] Declaration public override Bar? this[int index] { get; set; } Parameters Type Name Description int index Property Value Type Description Bar Overrides Series<Bar>.this[int] Low Declaration public ISeries<double> Low { get; } Property Value Type Description ISeries<double> MedianPrice Declaration public ISeries<double> MedianPrice { get; } Property Value Type Description ISeries<double> Open Declaration public ISeries<double> Open { get; } Property Value Type Description ISeries<double> Period Declaration public BarPeriod Period { get; } Property Value Type Description BarPeriod Symbol Declaration public Symbol Symbol { get; } Property Value Type Description Symbol Time Declaration public ISeries<DateTime> Time { get; } Property Value Type Description ISeries<DateTime> TypicalPrice Declaration public ISeries<double> TypicalPrice { get; } Property Value Type Description ISeries<double> Volume Declaration public ISeries<double> Volume { get; } Property Value Type Description ISeries<double> Methods Slice(DateTime) Declaration public IEnumerable<int> Slice(DateTime dateTimeUtc) Parameters Type Name Description DateTime dateTimeUtc Returns Type Description IEnumerable<int> Events BarClosed Declaration public event Action<BarSeries.BarEventArgs> BarClosed Event Type Type Description Action<BarSeries.BarEventArgs> Implements ISeries<TItem> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "API/Tickblaze.Scripts.Api.Models.ChartPoint.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.ChartPoint.html",
    "title": "Class ChartPoint | Tickblaze",
    "keywords": "Class ChartPoint Inheritance object Point ChartPoint Implements IChartPoint IPoint Inherited Members Point.X Point.Y object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class ChartPoint : Point, IChartPoint, IPoint Constructors ChartPoint() Declaration public ChartPoint() Properties Index Declaration public int Index { get; } Property Value Type Description int Time Declaration public IComparable Time { get; set; } Property Value Type Description IComparable Value Declaration public IComparable Value { get; set; } Property Value Type Description IComparable Implements IChartPoint IPoint"
  },
  "API/Tickblaze.Scripts.Api.Models.Color.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.Color.html",
    "title": "Struct Color | Tickblaze",
    "keywords": "Struct Color Represents a color with alpha, red, green, and blue values. Implements IEquatable<Color> Inherited Members ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public readonly struct Color : IEquatable<Color> Constructors Color(byte, byte, byte, byte) Represents a color with alpha, red, green, and blue values. Declaration public Color(byte a, byte r, byte g, byte b) Parameters Type Name Description byte a The alpha value of the color. byte r The red value of the color. byte g The green value of the color. byte b The blue value of the color. Fields Black Declaration public static readonly Color Black Field Value Type Description Color Blue Declaration public static readonly Color Blue Field Value Type Description Color CoolGray Declaration public static readonly Color CoolGray Field Value Type Description Color Cyan Declaration public static readonly Color Cyan Field Value Type Description Color DarkGray Declaration public static readonly Color DarkGray Field Value Type Description Color DeepPurple Declaration public static readonly Color DeepPurple Field Value Type Description Color DimGray Declaration public static readonly Color DimGray Field Value Type Description Color Empty Declaration public static readonly Color Empty Field Value Type Description Color Gray Declaration public static readonly Color Gray Field Value Type Description Color Green Declaration public static readonly Color Green Field Value Type Description Color Gunmetal Declaration public static readonly Color Gunmetal Field Value Type Description Color LightGray Declaration public static readonly Color LightGray Field Value Type Description Color Orange Declaration public static readonly Color Orange Field Value Type Description Color Pink Declaration public static readonly Color Pink Field Value Type Description Color Purple Declaration public static readonly Color Purple Field Value Type Description Color Red Declaration public static readonly Color Red Field Value Type Description Color Silver Declaration public static readonly Color Silver Field Value Type Description Color SteelGray Declaration public static readonly Color SteelGray Field Value Type Description Color TealGreen Declaration public static readonly Color TealGreen Field Value Type Description Color Transparent Declaration public static readonly Color Transparent Field Value Type Description Color White Declaration public static readonly Color White Field Value Type Description Color Yellow Declaration public static readonly Color Yellow Field Value Type Description Color Properties A The alpha value of the color. Declaration public byte A { get; } Property Value Type Description byte B The blue value of the color. Declaration public byte B { get; } Property Value Type Description byte G The green value of the color. Declaration public byte G { get; } Property Value Type Description byte Hex The HEX value of the color. Declaration public string Hex { get; } Property Value Type Description string R The red value of the color. Declaration public byte R { get; } Property Value Type Description byte Methods CanArgbHexBeParsed(string) Declaration public static bool CanArgbHexBeParsed(string hex) Parameters Type Name Description string hex Returns Type Description bool Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) Equals(Color) Declaration public bool Equals(Color other) Parameters Type Name Description Color other Returns Type Description bool FromArgb(byte, byte, byte, byte) Declaration public static Color FromArgb(byte a, byte r, byte g, byte b) Parameters Type Name Description byte a byte r byte g byte b Returns Type Description Color FromDrawingColor(Color) Declaration public static Color FromDrawingColor(Color color) Parameters Type Name Description Color color Returns Type Description Color FromName(string, string?) Declaration public static Color FromName(string colorName, string? fallbackColorName = null) Parameters Type Name Description string colorName string fallbackColorName Returns Type Description Color FromRgb(byte, byte, byte) Declaration public static Color FromRgb(byte r, byte g, byte b) Parameters Type Name Description byte r byte g byte b Returns Type Description Color FromRgba(byte, byte, byte, byte) Declaration public static Color FromRgba(byte r, byte g, byte b, byte a) Parameters Type Name Description byte r byte g byte b byte a Returns Type Description Color GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() New(Color, float) Creates a new Color instance with the specified opacity level. Declaration public static Color New(Color color, float opacity) Parameters Type Name Description Color color The base color to adjust. float opacity The desired opacity level as a float (0.0 to 1.0). Returns Type Description Color A new Color instance with the specified opacity. ParseArgbHex(string) Declaration public static Color ParseArgbHex(string hex) Parameters Type Name Description string hex Returns Type Description Color ParseRgbaHex(string) Declaration public static Color ParseRgbaHex(string hex) Parameters Type Name Description string hex Returns Type Description Color ToArgbHex() Converts the color to its ARGB hex representation. Declaration public string ToArgbHex() Returns Type Description string A string representing the ARGB hex value of the color. ToRgbHex() Converts the color to its RGB hex representation. Declaration public string ToRgbHex() Returns Type Description string A string representing the RGB hex value of the color. ToRgbaHex() Converts the color to its RGBA hex representation. Declaration public string ToRgbaHex() Returns Type Description string A string representing the RGBA hex value of the color. TryParse(string, string, out Color) Declaration public static bool TryParse(string hexOrName, string fallbackColorName, out Color color) Parameters Type Name Description string hexOrName string fallbackColorName Color color Returns Type Description bool Operators operator ==(Color, Color) Declaration public static bool operator ==(Color left, Color right) Parameters Type Name Description Color left Color right Returns Type Description bool implicit operator Color(byte[]) Declaration public static implicit operator Color(byte[] bytes) Parameters Type Name Description byte[] bytes Returns Type Description Color implicit operator Color(Color) Declaration public static implicit operator Color(Color color) Parameters Type Name Description Color color Returns Type Description Color implicit operator Color(string) Declaration public static implicit operator Color(string hex) Parameters Type Name Description string hex Returns Type Description Color implicit operator byte[](Color) Declaration public static implicit operator byte[](Color color) Parameters Type Name Description Color color Returns Type Description byte[] implicit operator Color(Color) Declaration public static implicit operator Color(Color color) Parameters Type Name Description Color color Returns Type Description Color operator !=(Color, Color) Declaration public static bool operator !=(Color left, Color right) Parameters Type Name Description Color left Color right Returns Type Description bool Implements IEquatable<T>"
  },
  "API/Tickblaze.Scripts.Api.Models.DataSeries.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.DataSeries.html",
    "title": "Class DataSeries | Tickblaze",
    "keywords": "Class DataSeries Inheritance object Series<double> DataSeries PlotSeries Implements ISeries<double> IReadOnlyList<double> IReadOnlyCollection<double> IEnumerable<double> IEnumerable Inherited Members Series<double>._values Series<double>.Last(int) Series<double>.Append(double) Series<double>.GetEnumerator() Series<double>.Count Series<double>.this[int] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class DataSeries : Series<double>, ISeries<double>, IReadOnlyList<double>, IReadOnlyCollection<double>, IEnumerable<double>, IEnumerable Constructors DataSeries() Declaration public DataSeries() Methods get_DefaultValue() Declaration protected override double get_DefaultValue() Returns Type Description double Overrides Series<double>.get_DefaultValue() Implements ISeries<TItem> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "API/Tickblaze.Scripts.Api.Models.Font.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.Font.html",
    "title": "Class Font | Tickblaze",
    "keywords": "Class Font Inheritance object Font Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class Font Constructors Font(string, int, FontStyle, FontWeight) Declaration public Font(string familyName = \"Segoe UI\", int size = 12, FontStyle style = FontStyle.Normal, FontWeight weight = FontWeight.Regular) Parameters Type Name Description string familyName int size FontStyle style FontWeight weight Properties FamilyName Declaration public string FamilyName { get; set; } Property Value Type Description string Size Declaration public int Size { get; set; } Property Value Type Description int Style Declaration public FontStyle Style { get; set; } Property Value Type Description FontStyle Weight Declaration public FontWeight Weight { get; set; } Property Value Type Description FontWeight"
  },
  "API/Tickblaze.Scripts.Api.Models.Metadata.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.Metadata.html",
    "title": "Class Metadata | Tickblaze",
    "keywords": "Class Metadata Inheritance object Metadata Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class Metadata Constructors Metadata() Declaration public Metadata() Properties Assembly Declaration public string Assembly { get; } Property Value Type Description string Description Declaration public string Description { get; } Property Value Type Description string Name Declaration public string Name { get; } Property Value Type Description string ResourceId Declaration public int ResourceId { get; } Property Value Type Description int ShortName Declaration public string ShortName { get; } Property Value Type Description string Type Declaration public string Type { get; } Property Value Type Description string Version Declaration public string Version { get; } Property Value Type Description string"
  },
  "API/Tickblaze.Scripts.Api.Models.PlotLevel.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.PlotLevel.html",
    "title": "Class PlotLevel | Tickblaze",
    "keywords": "Class PlotLevel Inheritance object PlotLevel Implements IPlot ICloneable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class PlotLevel : IPlot, ICloneable Constructors PlotLevel(double, string, LineStyle, int) Declaration public PlotLevel(double value, string color, LineStyle lineStyle = LineStyle.Dash, int thickness = 1) Parameters Type Name Description double value string color LineStyle lineStyle int thickness PlotLevel(double, Color, LineStyle, int) Declaration public PlotLevel(double value, Color color, LineStyle lineStyle = LineStyle.Dash, int thickness = 1) Parameters Type Name Description double value Color color LineStyle lineStyle int thickness PlotLevel(string, double, Color, LineStyle, int, bool) Declaration public PlotLevel(string name, double value, Color color, LineStyle lineStyle = LineStyle.Dash, int thickness = 1, bool isVisible = true) Parameters Type Name Description string name double value Color color LineStyle lineStyle int thickness bool isVisible Properties Color Declaration public Color Color { get; set; } Property Value Type Description Color IsVisible Declaration public bool IsVisible { get; set; } Property Value Type Description bool LineStyle Declaration public LineStyle LineStyle { get; set; } Property Value Type Description LineStyle Name Declaration [JsonIgnore] public string Name { get; } Property Value Type Description string Thickness Declaration public int Thickness { get; set; } Property Value Type Description int Value Declaration public double Value { get; set; } Property Value Type Description double Methods Clone() Declaration public object Clone() Returns Type Description object Implements IPlot ICloneable"
  },
  "API/Tickblaze.Scripts.Api.Models.PlotSeries.PlotColors.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.PlotSeries.PlotColors.html",
    "title": "Class PlotSeries.PlotColors | Tickblaze",
    "keywords": "Class PlotSeries.PlotColors Inheritance object Series<Color> PlotSeries.PlotColors Implements ISeries<Color> IReadOnlyList<Color> IReadOnlyCollection<Color> IEnumerable<Color> IEnumerable Inherited Members Series<Color>._values Series<Color>.Last(int) Series<Color>.Append(Color) Series<Color>.GetEnumerator() Series<Color>.Count object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class PlotSeries.PlotColors : Series<Color>, ISeries<Color>, IReadOnlyList<Color>, IReadOnlyCollection<Color>, IEnumerable<Color>, IEnumerable Constructors PlotColors(PlotSeries) Declaration public PlotColors(PlotSeries plotSeries) Parameters Type Name Description PlotSeries plotSeries Properties this[int] Declaration public override Color this[int index] { get; set; } Parameters Type Name Description int index Property Value Type Description Color Overrides Series<Color>.this[int] Methods get_DefaultValue() Declaration protected override Color get_DefaultValue() Returns Type Description Color Overrides Series<Color>.get_DefaultValue() Implements ISeries<TItem> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "API/Tickblaze.Scripts.Api.Models.PlotSeries.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.PlotSeries.html",
    "title": "Class PlotSeries | Tickblaze",
    "keywords": "Class PlotSeries Inheritance object Series<double> DataSeries PlotSeries Implements ISeries<double> IReadOnlyList<double> IReadOnlyCollection<double> IEnumerable<double> IEnumerable IPlot ICloneable Inherited Members DataSeries.get_DefaultValue() Series<double>._values Series<double>.Last(int) Series<double>.Append(double) Series<double>.GetEnumerator() Series<double>.Count Series<double>.this[int] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class PlotSeries : DataSeries, ISeries<double>, IReadOnlyList<double>, IReadOnlyCollection<double>, IEnumerable<double>, IEnumerable, IPlot, ICloneable Constructors PlotSeries() Declaration public PlotSeries() PlotSeries(string, Color, PlotStyle, LineStyle, int, bool) Declaration public PlotSeries(string name, Color color, PlotStyle plotStyle = PlotStyle.Line, LineStyle lineStyle = LineStyle.Solid, int thickness = 1, bool isVisible = true) Parameters Type Name Description string name Color color PlotStyle plotStyle LineStyle lineStyle int thickness bool isVisible PlotSeries(Color) Declaration public PlotSeries(Color color) Parameters Type Name Description Color color PlotSeries(Color, LineStyle, int) Declaration public PlotSeries(Color color, LineStyle lineStyle = LineStyle.Solid, int thickness = 1) Parameters Type Name Description Color color LineStyle lineStyle int thickness PlotSeries(Color, PlotStyle, int) Declaration public PlotSeries(Color color, PlotStyle plotStyle = PlotStyle.Line, int thickness = 1) Parameters Type Name Description Color color PlotStyle plotStyle int thickness Properties Color Declaration public Color Color { get; set; } Property Value Type Description Color Colors Declaration public PlotSeries.PlotColors Colors { get; set; } Property Value Type Description PlotSeries.PlotColors IsLineBreak Declaration [Obsolete] public Series<bool> IsLineBreak { get; set; } Property Value Type Description Series<bool> IsVisible Declaration public bool IsVisible { get; set; } Property Value Type Description bool LineStyle Declaration public LineStyle LineStyle { get; set; } Property Value Type Description LineStyle Name Declaration [JsonIgnore] public string Name { get; } Property Value Type Description string PlotStyle Declaration public PlotStyle PlotStyle { get; set; } Property Value Type Description PlotStyle Thickness Declaration public int Thickness { get; set; } Property Value Type Description int Methods Clone() Declaration public object Clone() Returns Type Description object Implements ISeries<TItem> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IPlot ICloneable Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "API/Tickblaze.Scripts.Api.Models.Point.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.Point.html",
    "title": "Class Point | Tickblaze",
    "keywords": "Class Point Inheritance object Point ChartPoint Implements IPoint Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class Point : IPoint Constructors Point() Declaration public Point() Point(double, double) Declaration public Point(double x, double y) Parameters Type Name Description double x double y Point(IPoint) Declaration public Point(IPoint point) Parameters Type Name Description IPoint point Properties X Declaration public virtual double X { get; set; } Property Value Type Description double Y Declaration public virtual double Y { get; set; } Property Value Type Description double Operators operator +(Point, Point) Declaration public static Point operator +(Point p1, Point p2) Parameters Type Name Description Point p1 Point p2 Returns Type Description Point operator -(Point, Point) Declaration public static Point operator -(Point p1, Point p2) Parameters Type Name Description Point p1 Point p2 Returns Type Description Point Implements IPoint"
  },
  "API/Tickblaze.Scripts.Api.Models.Series-1.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.Series-1.html",
    "title": "Class Series<T> | Tickblaze",
    "keywords": "Class Series<T> Inheritance object Series<T> BarSeries DataSeries PlotSeries.PlotColors Implements ISeries<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class Series<T> : ISeries<T>, IReadOnlyList<T?>, IReadOnlyCollection<T?>, IEnumerable<T?>, IEnumerable Type Parameters Name Description T Constructors Series() Declaration public Series() Fields _values Declaration protected List<T?> _values Field Value Type Description List<T> Properties Count Declaration public int Count { get; } Property Value Type Description int this[int] Declaration public virtual T? this[int index] { get; set; } Parameters Type Name Description int index Property Value Type Description T Methods Append(T?) Declaration public void Append(T? value) Parameters Type Name Description T value GetEnumerator() Declaration public IEnumerator<T?> GetEnumerator() Returns Type Description IEnumerator<T> Last(int) Declaration public T? Last(int barsAgo = 0) Parameters Type Name Description int barsAgo Returns Type Description T get_DefaultValue() Declaration protected virtual T? get_DefaultValue() Returns Type Description T Implements ISeries<TItem> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "API/Tickblaze.Scripts.Api.Models.SeriesTransform-2.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.SeriesTransform-2.html",
    "title": "Class SeriesTransform<TSource, TDestination> | Tickblaze",
    "keywords": "Class SeriesTransform<TSource, TDestination> Inheritance object SeriesTransform<TSource, TDestination> Implements ISeries<TDestination> IReadOnlyList<TDestination> IReadOnlyCollection<TDestination> IEnumerable<TDestination> IEnumerable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public sealed class SeriesTransform<TSource, TDestination> : ISeries<TDestination>, IReadOnlyList<TDestination?>, IReadOnlyCollection<TDestination?>, IEnumerable<TDestination?>, IEnumerable Type Parameters Name Description TSource TDestination Constructors SeriesTransform(ISeries<TSource>, Func<TSource, TDestination>) Declaration public SeriesTransform(ISeries<TSource> series, Func<TSource, TDestination> selector) Parameters Type Name Description ISeries<TSource> series Func<TSource, TDestination> selector Properties Count Declaration public int Count { get; } Property Value Type Description int this[int] Declaration public TDestination? this[int index] { get; } Parameters Type Name Description int index Property Value Type Description TDestination Methods GetEnumerator() Declaration public IEnumerator<TDestination?> GetEnumerator() Returns Type Description IEnumerator<TDestination> Last(int) Declaration public TDestination? Last(int barsAgo = 0) Parameters Type Name Description int barsAgo Returns Type Description TDestination Implements ISeries<TItem> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem)"
  },
  "API/Tickblaze.Scripts.Api.Models.Size.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.Size.html",
    "title": "Struct Size | Tickblaze",
    "keywords": "Struct Size Implements ISize Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public struct Size : ISize Constructors Size() Declaration public Size() Size(double, double) Declaration public Size(double width, double height) Parameters Type Name Description double width double height Properties Height Declaration public double Height { readonly get; set; } Property Value Type Description double Width Declaration public double Width { readonly get; set; } Property Value Type Description double Implements ISize"
  },
  "API/Tickblaze.Scripts.Api.Models.Symbol.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.Symbol.html",
    "title": "Class Symbol | Tickblaze",
    "keywords": "Class Symbol Inheritance object Symbol Implements ISymbol Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api.Models Assembly: Tickblaze.Scripts.Api.dll Syntax public class Symbol : ISymbol Properties CurrencyCode Declaration public required string CurrencyCode { get; init; } Property Value Type Description string Decimals Declaration public required int Decimals { get; init; } Property Value Type Description int Description Declaration public string Description { get; } Property Value Type Description string ExchangeCalendar Declaration public required IExchangeCalendar ExchangeCalendar { get; init; } Property Value Type Description IExchangeCalendar MinimumVolume Declaration public decimal MinimumVolume { get; init; } Property Value Type Description decimal Name Declaration public string Name { get; } Property Value Type Description string PointSize Declaration public double PointSize { get; } Property Value Type Description double PointValue Declaration public double PointValue { get; } Property Value Type Description double TickSize Declaration public required double TickSize { get; init; } Property Value Type Description double TickValue Declaration public required double TickValue { get; init; } Property Value Type Description double TicksPerPoint Declaration public double TicksPerPoint { get; } Property Value Type Description double Methods FormatPrice(double) Declaration public string FormatPrice(double price) Parameters Type Name Description double price Returns Type Description string NormalizeVolume(double, RoundingMode) Declaration public decimal NormalizeVolume(double volume, RoundingMode roundingMode) Parameters Type Name Description double volume RoundingMode roundingMode Returns Type Description decimal RoundToTick(double) Declaration public double RoundToTick(double value) Parameters Type Name Description double value Returns Type Description double Implements ISymbol"
  },
  "API/Tickblaze.Scripts.Api.Models.html": {
    "href": "API/Tickblaze.Scripts.Api.Models.html",
    "title": "Namespace Tickblaze.Scripts.Api.Models | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Models Classes Bar BarPeriod BarSeries BarSeries.BarEventArgs ChartPoint DataSeries Font Metadata PlotLevel PlotSeries PlotSeries.PlotColors Point SeriesTransform<TSource, TDestination> Series<T> Symbol Structs Color Represents a color with alpha, red, green, and blue values. Size Enums BarPeriod.PeriodType BarPeriod.SourceType"
  },
  "API/Tickblaze.Scripts.Api.Parameter.html": {
    "href": "API/Tickblaze.Scripts.Api.Parameter.html",
    "title": "Class Parameter | Tickblaze",
    "keywords": "Class Parameter Inheritance object Parameter Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api Assembly: Tickblaze.Scripts.Api.dll Syntax public class Parameter Constructors Parameter() Declaration public Parameter() Parameter(object, PropertyInfo, ParameterAttribute) Declaration public Parameter(object obj, PropertyInfo property, ParameterAttribute attributes) Parameters Type Name Description object obj PropertyInfo property ParameterAttribute attributes Properties Attributes Declaration public ParameterAttribute Attributes { get; } Property Value Type Description ParameterAttribute NumericRange Declaration public NumericRangeAttribute? NumericRange { get; } Property Value Type Description NumericRangeAttribute Property Declaration public PropertyInfo? Property { get; } Property Value Type Description PropertyInfo Value Declaration public object Value { get; set; } Property Value Type Description object"
  },
  "API/Tickblaze.Scripts.Api.Parameters.html": {
    "href": "API/Tickblaze.Scripts.Api.Parameters.html",
    "title": "Class Parameters | Tickblaze",
    "keywords": "Class Parameters Inheritance object Dictionary<string, Parameter> IndexedDictionary<string, Parameter> Parameters Implements IDictionary<string, Parameter> ICollection<KeyValuePair<string, Parameter>> IDictionary ICollection IReadOnlyDictionary<string, Parameter> IReadOnlyCollection<KeyValuePair<string, Parameter>> IEnumerable<KeyValuePair<string, Parameter>> IEnumerable ISerializable IDeserializationCallback Inherited Members IndexedDictionary<string, Parameter>.this[int] Dictionary<string, Parameter>.Add(string, Parameter) Dictionary<string, Parameter>.Clear() Dictionary<string, Parameter>.ContainsKey(string) Dictionary<string, Parameter>.ContainsValue(Parameter) Dictionary<string, Parameter>.GetEnumerator() Dictionary<string, Parameter>.OnDeserialization(object) Dictionary<string, Parameter>.Remove(string) Dictionary<string, Parameter>.Remove(string, out Parameter) Dictionary<string, Parameter>.TryGetValue(string, out Parameter) Dictionary<string, Parameter>.TryAdd(string, Parameter) Dictionary<string, Parameter>.EnsureCapacity(int) Dictionary<string, Parameter>.TrimExcess() Dictionary<string, Parameter>.TrimExcess(int) Dictionary<string, Parameter>.Comparer Dictionary<string, Parameter>.Count Dictionary<string, Parameter>.Keys Dictionary<string, Parameter>.Values Dictionary<string, Parameter>.this[string] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Tickblaze.Scripts.Api Assembly: Tickblaze.Scripts.Api.dll Syntax [JsonSerializable(typeof(IReadOnlyDictionary<string, Parameter>))] public class Parameters : IndexedDictionary<string, Parameter>, IDictionary<string, Parameter>, ICollection<KeyValuePair<string, Parameter>>, IDictionary, ICollection, IReadOnlyDictionary<string, Parameter>, IReadOnlyCollection<KeyValuePair<string, Parameter>>, IEnumerable<KeyValuePair<string, Parameter>>, IEnumerable, ISerializable, IDeserializationCallback Constructors Parameters(object?) Declaration public Parameters(object? obj) Parameters Type Name Description object obj Implements IDictionary<TKey, TValue> ICollection<T> IDictionary ICollection IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IEnumerable ISerializable IDeserializationCallback"
  },
  "API/Tickblaze.Scripts.Api.html": {
    "href": "API/Tickblaze.Scripts.Api.html",
    "title": "Namespace Tickblaze.Scripts.Api | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api Classes CollectionExtensions IndexedDictionary<TKey, TValue> Parameter Parameters"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Tickblaze",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Tickblaze",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Tickblaze",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}