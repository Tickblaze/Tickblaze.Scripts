{
  "README.html": {
    "href": "README.html",
    "title": "| Tickblaze",
    "keywords": "Please refer to GitHub Action for more details how the process is automated. To run it locally: Install the latest docfx dotnet tool update -g docfx Build the project dotnet build Build the docset and run: docfx docfx.json --serve Now you can preview the docs website on http://localhost:8080."
  },
  "api/Tickblaze.Scripts.Api.Adapters.AlertType.html": {
    "href": "api/Tickblaze.Scripts.Api.Adapters.AlertType.html",
    "title": "Enum AlertType | Tickblaze",
    "keywords": "Enum AlertType Namespace Tickblaze.Scripts.Api.Adapters Assembly Tickblaze.Scripts.Api.dll Enum representing different types of alerts. public enum AlertType Fields Bad = 1 Represents a bad alert. Good = 0 Represents a good alert. Important = 3 Represents an important alert. Neutral = 2 Represents a neutral alert."
  },
  "api/Tickblaze.Scripts.Api.Adapters.IAlertAdapter.html": {
    "href": "api/Tickblaze.Scripts.Api.Adapters.IAlertAdapter.html",
    "title": "Interface IAlertAdapter | Tickblaze",
    "keywords": "Interface IAlertAdapter Namespace Tickblaze.Scripts.Api.Adapters Assembly Tickblaze.Scripts.Api.dll Interface for alerting mechanisms such as playing sounds, sending emails, and showing dialogs. public interface IAlertAdapter Methods PlaySound(string) Plays a sound from the specified file path. void PlaySound(string filePath) Parameters filePath string The path to the sound file. SendEmail(string, string) Sends an email with the specified subject and body. void SendEmail(string subject, string body) Parameters subject string The subject of the email. body string The body of the email. ShowDialog(AlertType, string) Shows a dialog with the specified alert type and message. void ShowDialog(AlertType type, string message) Parameters type AlertType The type of the alert. message string The message to display in the dialog."
  },
  "api/Tickblaze.Scripts.Api.Adapters.IScriptBaseAdapter.html": {
    "href": "api/Tickblaze.Scripts.Api.Adapters.IScriptBaseAdapter.html",
    "title": "Interface IScriptBaseAdapter | Tickblaze",
    "keywords": "Interface IScriptBaseAdapter Namespace Tickblaze.Scripts.Api.Adapters Assembly Tickblaze.Scripts.Api.dll Interface for script base adapter. public interface IScriptBaseAdapter Properties Script Gets the script. Script? Script { get; } Methods OutputWriteLine(string) Writes a line of text to the output. void OutputWriteLine(string text) Parameters text string The text to write."
  },
  "api/Tickblaze.Scripts.Api.Adapters.html": {
    "href": "api/Tickblaze.Scripts.Api.Adapters.html",
    "title": "Namespace Tickblaze.Scripts.Api.Adapters | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Adapters Interfaces IAlertAdapter Interface for alerting mechanisms such as playing sounds, sending emails, and showing dialogs. IScriptBaseAdapter Interface for script base adapter. Enums AlertType Enum representing different types of alerts."
  },
  "api/Tickblaze.Scripts.Api.Attributes.DisplayNameAttribute.html": {
    "href": "api/Tickblaze.Scripts.Api.Attributes.DisplayNameAttribute.html",
    "title": "Class DisplayNameAttribute | Tickblaze",
    "keywords": "Class DisplayNameAttribute Namespace Tickblaze.Scripts.Api.Attributes Assembly Tickblaze.Scripts.Api.dll Specifies the display name for displaying in the user interface. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public sealed class DisplayNameAttribute : Attribute Inheritance object Attribute DisplayNameAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors DisplayNameAttribute(string) Specifies the display name for displaying in the user interface. public DisplayNameAttribute(string name) Parameters name string The display name. Properties DisplayName Gets the display name. public string? DisplayName { get; }"
  },
  "api/Tickblaze.Scripts.Api.Attributes.NumericRangeAttribute.html": {
    "href": "api/Tickblaze.Scripts.Api.Attributes.NumericRangeAttribute.html",
    "title": "Class NumericRangeAttribute | Tickblaze",
    "keywords": "Class NumericRangeAttribute Namespace Tickblaze.Scripts.Api.Attributes Assembly Tickblaze.Scripts.Api.dll Specifies the numeric range constraints for a parameter. [AttributeUsage(AttributeTargets.Property)] public sealed class NumericRangeAttribute : Attribute Inheritance object Attribute NumericRangeAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors NumericRangeAttribute(double, double, double) Specifies the numeric range constraints for a parameter. public NumericRangeAttribute(double minValue = 0, double maxValue = 2147483647, double step = 1) Parameters minValue double The minimum value of the numeric range. Default is 0. maxValue double The maximum value of the numeric range. Default is MaxValue. step double The step value for incrementing within the range. Default is 1. Properties MaxValue Gets or sets the maximum value of the numeric range. public double MaxValue { get; set; } MinValue Gets or sets the minimum value of the numeric range. public double MinValue { get; set; } Step Gets or sets the step value for incrementing within the range. public double Step { get; set; }"
  },
  "api/Tickblaze.Scripts.Api.Attributes.ParameterAttribute.html": {
    "href": "api/Tickblaze.Scripts.Api.Attributes.ParameterAttribute.html",
    "title": "Class ParameterAttribute | Tickblaze",
    "keywords": "Class ParameterAttribute Namespace Tickblaze.Scripts.Api.Attributes Assembly Tickblaze.Scripts.Api.dll Specifies metadata for parameter property. [AttributeUsage(AttributeTargets.Property)] public class ParameterAttribute : Attribute Inheritance object Attribute ParameterAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors ParameterAttribute(string) Specifies metadata for parameter property. public ParameterAttribute(string name) Parameters name string The display name of the parameter. Properties Description Description of the parameter. public string? Description { get; set; } GroupName Group name of the parameter. public string? GroupName { get; set; } Name Display name of the parameter. public string Name { get; set; }"
  },
  "api/Tickblaze.Scripts.Api.Attributes.PlotAttribute.html": {
    "href": "api/Tickblaze.Scripts.Api.Attributes.PlotAttribute.html",
    "title": "Class PlotAttribute | Tickblaze",
    "keywords": "Class PlotAttribute Namespace Tickblaze.Scripts.Api.Attributes Assembly Tickblaze.Scripts.Api.dll Specifies metadata for PlotSeries or PlotLevel property. [AttributeUsage(AttributeTargets.Property)] public sealed class PlotAttribute : Attribute Inheritance object Attribute PlotAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors PlotAttribute(string) Specifies metadata for PlotSeries or PlotLevel property. public PlotAttribute(string name) Parameters name string The display name of the plot. Properties Name Display name of the plot. public string Name { get; }"
  },
  "api/Tickblaze.Scripts.Api.Attributes.html": {
    "href": "api/Tickblaze.Scripts.Api.Attributes.html",
    "title": "Namespace Tickblaze.Scripts.Api.Attributes | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Attributes Classes DisplayNameAttribute Specifies the display name for displaying in the user interface. NumericRangeAttribute Specifies the numeric range constraints for a parameter. ParameterAttribute Specifies metadata for parameter property. PlotAttribute Specifies metadata for PlotSeries or PlotLevel property."
  },
  "api/Tickblaze.Scripts.Api.Bases.BarType.SourceDataType.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.BarType.SourceDataType.html",
    "title": "Enum BarType.SourceDataType | Tickblaze",
    "keywords": "Enum BarType.SourceDataType Namespace Tickblaze.Scripts.Api.Bases Assembly Tickblaze.Scripts.Api.dll Enumerates the possible types of source data used to create bars. public enum BarType.SourceDataType Fields Daily = 2 Source data is based on daily data. Minute = 1 Source data is based on minute data. Tick = 0 Source data is based on tick data."
  },
  "api/Tickblaze.Scripts.Api.Bases.BarType.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.BarType.html",
    "title": "Class BarType | Tickblaze",
    "keywords": "Class BarType Namespace Tickblaze.Scripts.Api.Bases Assembly Tickblaze.Scripts.Api.dll Represents a base class for defining custom bar types with metadata, bar series, and source data configuration. public abstract class BarType : Script, IScript, IDisposable, IMetadata Inheritance object Script BarType Implements IScript IDisposable IMetadata Inherited Members Script.GetParameters() Script.GetParameters(Parameters) Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Parameters Script.IsInitialized Script.UiDispatcher Script.Alert object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors BarType() Initializes a new instance of the BarType class. protected BarType() Properties Bars The series of bars associated with this bar type. public BarSeries Bars { get; } Description A description of the bar type. public string Description { get; init; } InputParameterDisplayString A shorthand string to represent the input parameters, used in the data box, and anywhere else a short identifier is required public virtual string InputParameterDisplayString { get; } Metadata Metadata associated with the bar type. public Metadata Metadata { get; } Name The name of the bar type. public string Name { get; init; } ShortName The short name of the bar type. public string ShortName { get; init; } Source The type of source data used to create the bar type. public BarType.SourceDataType Source { get; init; } Symbol The series underlying instrument public Symbol Symbol { get; set; } Methods AddBar(Bar) Adds a new bar to the bar series. public void AddBar(Bar bar) Parameters bar Bar The bar to add. OnDataPoint(Bar) Processes a data point to create or update a bar. public abstract void OnDataPoint(Bar bar) Parameters bar Bar The bar data to process. UpdateBar(Bar) Updates the most recent bar in the bar series. public void UpdateBar(Bar bar) Parameters bar Bar The bar data to update."
  },
  "api/Tickblaze.Scripts.Api.Bases.Drawing.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.Drawing.html",
    "title": "Class Drawing | Tickblaze",
    "keywords": "Class Drawing Namespace Tickblaze.Scripts.Api.Bases Assembly Tickblaze.Scripts.Api.dll Represents a base class for drawing objects that can be rendered on the chart. public abstract class Drawing : Script, IScript, IDisposable, IMetadata, IChartObject Inheritance object Script Drawing Implements IScript IDisposable IMetadata IChartObject Inherited Members Script.GetParameters() Script.GetParameters(Parameters) Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher Script.Alert object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Drawing() protected Drawing() Properties Chart The chart to which this object belongs. public IChart Chart { get; } ChartScale The scale used by this object on the chart. public IChartScale ChartScale { get; } IsCreated Indicates whether the drawing object has been created. public bool IsCreated { get; } Points public IChartPoints Points { get; } PointsCount Gets the number of points in the drawing. public abstract int PointsCount { get; } ShowOnChart Indicates whether the object is visible on the chart. public bool ShowOnChart { get; set; } SnapToBar Gets or sets a value indicating whether the drawing is snapped to the bar. public bool SnapToBar { get; set; } Symbol public ISymbol Symbol { get; } Methods OnCreated() Performs actions when the drawing is created. public virtual void OnCreated() OnRender(IDrawingContext) Draws the chart object using the specified drawing context. public abstract void OnRender(IDrawingContext context) Parameters context IDrawingContext The context used for rendering. SetPoint(IComparable, IComparable, int) Sets a point on the drawing at the specified index. public virtual void SetPoint(IComparable xDataValue, IComparable yDataValue, int index) Parameters xDataValue IComparable The x data value of the point. yDataValue IComparable The y data value of the point. index int The index of the point to set."
  },
  "api/Tickblaze.Scripts.Api.Bases.IIndicator.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.IIndicator.html",
    "title": "Interface IIndicator | Tickblaze",
    "keywords": "Interface IIndicator Namespace Tickblaze.Scripts.Api.Bases Assembly Tickblaze.Scripts.Api.dll Represents an indicator script that can be overlaid on a chart or displayed on a separate indicator panel. public interface IIndicator : IScript, IDisposable Inherited Members IScript.Initialize() IScript.GetParameters() IScript.Metadata IScript.Parameters IScript.IsInitialized IDisposable.Dispose() Properties AutoRescale Indicates whether this instance automatically rescales the chart or not. Default value is true. bool AutoRescale { get; } IsOverlay Indicates whether this instance is overlayed on the chart or plotted on a separate indicator panel. bool IsOverlay { get; } IsPercentage Indicates whether the indicator is a percentage indicator. The default value is false. bool IsPercentage { get; } LevelsSerializable Gets the levels of the indicator as a serializable dictionary. [JsonPropertyOrder(8001)] [JsonPropertyName(\"Levels\")] IReadOnlyDictionary<string, PlotLevel> LevelsSerializable { get; } PlotsSerializable Gets the plots of the indicator as a serializable dictionary. [JsonPropertyOrder(8000)] [JsonPropertyName(\"Plots\")] IReadOnlyDictionary<string, IPlot> PlotsSerializable { get; } ScalePrecision The number of decimals displayed on the price scale of the indicator panel. int? ScalePrecision { get; }"
  },
  "api/Tickblaze.Scripts.Api.Bases.ITradeManagmentStrategyScriptBase.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.ITradeManagmentStrategyScriptBase.html",
    "title": "Interface ITradeManagmentStrategyScriptBase | Tickblaze",
    "keywords": "Interface ITradeManagmentStrategyScriptBase Namespace Tickblaze.Scripts.Api.Bases Assembly Tickblaze.Scripts.Api.dll Interface for a trade management strategy script base, providing methods to start and stop the strategy. public interface ITradeManagmentStrategyScriptBase : IOrderManager, IOrderAccessor Inherited Members IOrderManager.ExecuteMarketOrder(OrderAction, double, TimeInForce, string) IOrderManager.PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) IOrderManager.PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) IOrderManager.PlaceStopOrder(OrderAction, double, double, TimeInForce, string) IOrderManager.PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) IOrderManager.SetStopLoss(IOrder, double, string) IOrderManager.SetStopLossTicks(IOrder, int, string) IOrderManager.SetStopLossPercent(IOrder, double, string) IOrderManager.SetTakeProfit(IOrder, double, string) IOrderManager.SetTakeProfitTicks(IOrder, int, string) IOrderManager.SetTakeProfitPercent(IOrder, double, string) IOrderManager.ModifyOrder(IOrder, double, double?, double?, TimeInForce) IOrderManager.CancelOrder(IOrder, string, bool) IOrderManager.ClosePosition(string) IOrderManager.GetOrderExpectedPrice(IOrder) IOrderAccessor.GetExchangeRate(string, string) IOrderAccessor.Symbol IOrderAccessor.Account IOrderAccessor.PendingOrders IOrderAccessor.Position Properties IsActive Indicates whether the strategy is currently active. bool IsActive { get; } Methods Start() Starts the strategy. void Start() Stop() Stops the strategy. void Stop()"
  },
  "api/Tickblaze.Scripts.Api.Bases.Indicator.BandShading.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.Indicator.BandShading.html",
    "title": "Class Indicator.BandShading | Tickblaze",
    "keywords": "Class Indicator.BandShading Namespace Tickblaze.Scripts.Api.Bases Assembly Tickblaze.Scripts.Api.dll Represents a shading between two values or plot series. public record Indicator.BandShading : IEquatable<Indicator.BandShading> Inheritance object Indicator.BandShading Implements IEquatable<Indicator.BandShading> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors BandShading(object, object, Color?, Color?) Represents a shading between two values or plot series. public BandShading(object FirstSource, object SecondSource, Color? FirstColor, Color? SecondColor) Parameters FirstSource object SecondSource object FirstColor Color? SecondColor Color? BandShading(BandShading) protected BandShading(Indicator.BandShading original) Parameters original Indicator.BandShading Properties EqualityContract protected virtual Type EqualityContract { get; } FirstColor public Color? FirstColor { get; init; } FirstSource public object FirstSource { get; init; } SecondColor public Color? SecondColor { get; init; } SecondSource public object SecondSource { get; init; } Methods Deconstruct(out object, out object, out Color?, out Color?) public void Deconstruct(out object FirstSource, out object SecondSource, out Color? FirstColor, out Color? SecondColor) Parameters FirstSource object SecondSource object FirstColor Color? SecondColor Color? Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool Equals(BandShading?) public virtual bool Equals(Indicator.BandShading? other) Parameters other Indicator.BandShading Returns bool GetHashCode() public override int GetHashCode() Returns int PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder builder) Parameters builder StringBuilder Returns bool ToString() public override string ToString() Returns string Operators operator ==(BandShading?, BandShading?) public static bool operator ==(Indicator.BandShading? left, Indicator.BandShading? right) Parameters left Indicator.BandShading right Indicator.BandShading Returns bool operator !=(BandShading?, BandShading?) public static bool operator !=(Indicator.BandShading? left, Indicator.BandShading? right) Parameters left Indicator.BandShading right Indicator.BandShading Returns bool"
  },
  "api/Tickblaze.Scripts.Api.Bases.Indicator.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.Indicator.html",
    "title": "Class Indicator | Tickblaze",
    "keywords": "Class Indicator Namespace Tickblaze.Scripts.Api.Bases Assembly Tickblaze.Scripts.Api.dll Represents a base class for indicator scripts. Provides functionality for calculating and rendering the indicator on the chart. public abstract class Indicator : Script, IMetadata, IIndicator, IScript, IDisposable, IChartObject Inheritance object Script Indicator Implements IMetadata IIndicator IScript IDisposable IChartObject Inherited Members Script.GetParameters() Script.GetParameters(Parameters) Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher Script.Alert object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Indicator() Initializes a new instance of the Indicator class. protected Indicator() Properties AutoRescale Indicates whether this instance automatically rescales the chart or not. Default value is true. public bool AutoRescale { get; init; } Chart The chart to which this object belongs. public IChart Chart { get; } ChartScale The scale used by this object on the chart. public IChartScale ChartScale { get; } DisplayName Gets the display name of the indicator. public virtual string DisplayName { get; } IsOverlay Indicates whether this instance is overlayed on the chart or plotted on a separate indicator panel. public bool IsOverlay { get; init; } IsPercentage Indicates whether the indicator is a percentage indicator. The default value is false. public bool IsPercentage { get; init; } Levels Gets the levels of the indicator. public IReadOnlyList<PlotLevel> Levels { get; } LevelsSerializable Gets the levels of the indicator as a serializable dictionary. [Browsable(false)] public IReadOnlyDictionary<string, PlotLevel> LevelsSerializable { get; } Plots Gets the plots of the indicator. public IReadOnlyList<PlotSeries> Plots { get; } PlotsSerializable Gets the plots of the indicator as a serializable dictionary. [Browsable(false)] public IReadOnlyDictionary<string, IPlot> PlotsSerializable { get; } ScalePrecision The number of decimals displayed on the price scale of the indicator panel. public int? ScalePrecision { get; init; } ShowOnChart Indicates whether the object is visible on the chart. public bool ShowOnChart { get; set; } Symbol public ISymbol Symbol { get; } Methods Calculate() Calculates the values for the indicator. public void Calculate() Calculate(int) Calculate the value(s) of the indicator for a given index. protected virtual void Calculate(int index) Parameters index int The index of the calculated value. ConfigureWatchlistCell(WatchlistCellString) Configures the watchlist cell representation. public virtual void ConfigureWatchlistCell(WatchlistCellString cellString) Parameters cellString WatchlistCellString The watchlist cell string to configure. OnRender(IDrawingContext) Renders the indicator on the chart. public virtual void OnRender(IDrawingContext context) Parameters context IDrawingContext The drawing context to render the indicator. ShadeBetween(PlotSeries, PlotSeries, Color?, Color?, float) Shades the area between two plot series. protected virtual void ShadeBetween(PlotSeries series1, PlotSeries series2, Color? fill1, Color? fill2, float opacity = 1) Parameters series1 PlotSeries The first plot series. series2 PlotSeries The second plot series. fill1 Color? The color to shade when first series is above second series. fill2 Color? The color to shade when first series is below second series. opacity float The opacity of the shading, ranging from 0.0 (fully transparent) to 1.0 (fully opaque)."
  },
  "api/Tickblaze.Scripts.Api.Bases.PositionSizer.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.PositionSizer.html",
    "title": "Class PositionSizer | Tickblaze",
    "keywords": "Class PositionSizer Namespace Tickblaze.Scripts.Api.Bases Assembly Tickblaze.Scripts.Api.dll A base class for position sizing scripts. public abstract class PositionSizer : Script, IScript, IDisposable, IMetadata, IOrderAccessor Inheritance object Script PositionSizer Implements IScript IDisposable IMetadata IOrderAccessor Inherited Members Script.GetParameters() Script.GetParameters(Parameters) Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher Script.Alert object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PositionSizer() protected PositionSizer() Properties Account The account associated with the orders and position. public IAccount Account { get; } PendingOrders A collection of orders that are currently pending execution. public IReadOnlyList<IOrder> PendingOrders { get; } Position The position associated with the current symbol and account. public IPosition Position { get; } Symbol The financial symbol associated with the orders and position. public ISymbol Symbol { get; } Methods GetExchangeRate(string, string) Retrieves the exchange rate for converting one currency to another. public double GetExchangeRate(string fromCurrency, string toCurrency) Parameters fromCurrency string The currency to convert from (e.g., \"USD\"). toCurrency string The currency to convert to (e.g., \"EUR\"). Returns double The exchange rate between the specified currencies. GetPositionSize(IOrder) Calculates the position size based on the given order. This method must be implemented by derived classes. protected abstract double GetPositionSize(IOrder order) Parameters order IOrder The order for which the position size is calculated. Returns double The position size for the given order."
  },
  "api/Tickblaze.Scripts.Api.Bases.Script.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.Script.html",
    "title": "Class Script | Tickblaze",
    "keywords": "Class Script Namespace Tickblaze.Scripts.Api.Bases Assembly Tickblaze.Scripts.Api.dll Represents a base class for scripts that can interact with chart data, parameters, and initialization processes. public abstract class Script : IScript, IDisposable, IMetadata Inheritance object Script Implements IScript IDisposable IMetadata Derived BarType Drawing Indicator PositionSizer TradingScript Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Alert The alert adapter for the script. protected IAlertAdapter? Alert { get; } Bars The bar series associated with the script. public BarSeries Bars { get; } Description A description of the script. public string Description { get; init; } IsInitialized Indicates whether the script has been initialized. public bool IsInitialized { get; } Metadata The metadata associated with the script. public Metadata Metadata { get; } Name The name of the script. public string Name { get; init; } Parameters The parameters for the script. public Parameters Parameters { get; } ShortName The short name of the script. public string ShortName { get; init; } UiDispatcher The UI dispatcher for the script. public IDispatcher UiDispatcher { get; set; } Methods CreateChartToolbarMenuItem() Creates a control that will be displayed in the chart's toolbar. public virtual object? CreateChartToolbarMenuItem() Returns object Dispose() public void Dispose() GetParameters() Gets the parameters of the script for the UI. public Parameters GetParameters() Returns Parameters Parameters for the UI. GetParameters(Parameters) Gets the parameters of the script for the UI. protected virtual Parameters GetParameters(Parameters parameters) Parameters parameters Parameters Returns Parameters Parameters for the UI. Initialize() A method call when the script is being initialized. protected virtual void Initialize() OnDestroy() A method call when the script is being destroyed. protected virtual void OnDestroy() Print(object) Prints the specified value to the console. protected void Print(object value) Parameters value object The value to print."
  },
  "api/Tickblaze.Scripts.Api.Bases.Strategy.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.Strategy.html",
    "title": "Class Strategy | Tickblaze",
    "keywords": "Class Strategy Namespace Tickblaze.Scripts.Api.Bases Assembly Tickblaze.Scripts.Api.dll Represents a base class for strategy scripts allowing order management. public abstract class Strategy : TradingScript, IScript, IDisposable, IMetadata, IOrderManager, IOrderAccessor, IChartObject Inheritance object Script TradingScript Strategy Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor IChartObject Inherited Members TradingScript.OnOrderUpdate(IOrder) TradingScript.OnOrderFillUpdate(IOrder) TradingScript.OnPositionUpdate() TradingScript.OnBarUpdate() TradingScript.ExecuteMarketOrder(OrderAction, double, TimeInForce, string) TradingScript.PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) TradingScript.PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) TradingScript.PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) TradingScript.PlaceStopOrder(OrderAction, double, double, TimeInForce, string) TradingScript.SetStopLoss(IOrder, double, string) TradingScript.SetStopLossTicks(IOrder, int, string) TradingScript.SetStopLossPercent(IOrder, double, string) TradingScript.SetTakeProfit(IOrder, double, string) TradingScript.SetTakeProfitTicks(IOrder, int, string) TradingScript.SetTakeProfitPercent(IOrder, double, string) TradingScript.ModifyOrder(IOrder, double, double?, double?, TimeInForce) TradingScript.CancelOrder(IOrder, string, bool) TradingScript.ClosePosition(string) TradingScript.GetExchangeRate(string, string) TradingScript.GetOrderExpectedPrice(IOrder) TradingScript.Symbol TradingScript.Account TradingScript.PendingOrders TradingScript.Position Script.GetParameters() Script.GetParameters(Parameters) Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher Script.Alert object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Strategy() protected Strategy() Properties Chart The chart to which this object belongs. public IChart Chart { get; } ChartScale The scale used by this object on the chart. public IChartScale ChartScale { get; } ShowOnChart Indicates whether the object is visible on the chart. public bool ShowOnChart { get; set; } Methods OnBar(int) Method to handle bar updates for the strategy. protected virtual void OnBar(int index) Parameters index int The index of the bar being processed. OnRender(IDrawingContext) Draws the chart object using the specified drawing context. public virtual void OnRender(IDrawingContext context) Parameters context IDrawingContext The context used for rendering. OnShutdown() Method called when the strategy is shutting down. protected virtual void OnShutdown() OnTick() Method to handle tick updates for the strategy. protected virtual void OnTick()"
  },
  "api/Tickblaze.Scripts.Api.Bases.TradeManagementStrategy.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.TradeManagementStrategy.html",
    "title": "Class TradeManagementStrategy | Tickblaze",
    "keywords": "Class TradeManagementStrategy Namespace Tickblaze.Scripts.Api.Bases Assembly Tickblaze.Scripts.Api.dll A base class for trade management strategies, providing methods to control the activation and deactivation of the strategy. public abstract class TradeManagementStrategy : TradingScript, IScript, IDisposable, IMetadata, IOrderManager, IOrderAccessor Inheritance object Script TradingScript TradeManagementStrategy Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor Inherited Members TradingScript.OnOrderUpdate(IOrder) TradingScript.OnOrderFillUpdate(IOrder) TradingScript.OnPositionUpdate() TradingScript.OnBarUpdate() TradingScript.ExecuteMarketOrder(OrderAction, double, TimeInForce, string) TradingScript.PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) TradingScript.PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) TradingScript.PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) TradingScript.PlaceStopOrder(OrderAction, double, double, TimeInForce, string) TradingScript.SetStopLoss(IOrder, double, string) TradingScript.SetStopLossTicks(IOrder, int, string) TradingScript.SetStopLossPercent(IOrder, double, string) TradingScript.SetTakeProfit(IOrder, double, string) TradingScript.SetTakeProfitTicks(IOrder, int, string) TradingScript.SetTakeProfitPercent(IOrder, double, string) TradingScript.ModifyOrder(IOrder, double, double?, double?, TimeInForce) TradingScript.CancelOrder(IOrder, string, bool) TradingScript.ClosePosition(string) TradingScript.GetExchangeRate(string, string) TradingScript.GetOrderExpectedPrice(IOrder) TradingScript.Symbol TradingScript.Account TradingScript.PendingOrders TradingScript.Position Script.GetParameters() Script.GetParameters(Parameters) Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher Script.Alert object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TradeManagementStrategy() protected TradeManagementStrategy() Properties IsActive Indicates whether the trade management strategy is active. public bool IsActive { get; } Methods OnEntryOrder(IOrder) Handles the entry order when it is placed. protected virtual void OnEntryOrder(IOrder order) Parameters order IOrder The entry order for the trade. OnShutdown() Handles shutdown operations when the strategy is stopped or the script is terminated. protected virtual void OnShutdown() Start() Starts the strategy if it is not already active. protected void Start() Stop() Stops the strategy if it is currently active. protected void Stop()"
  },
  "api/Tickblaze.Scripts.Api.Bases.TradingScript.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.TradingScript.html",
    "title": "Class TradingScript | Tickblaze",
    "keywords": "Class TradingScript Namespace Tickblaze.Scripts.Api.Bases Assembly Tickblaze.Scripts.Api.dll Represents a trading script that allows the execution and management of orders and positions in a trading system. public abstract class TradingScript : Script, IScript, IDisposable, IMetadata, IOrderManager, IOrderAccessor Inheritance object Script TradingScript Implements IScript IDisposable IMetadata IOrderManager IOrderAccessor Derived Strategy TradeManagementStrategy Inherited Members Script.GetParameters() Script.GetParameters(Parameters) Script.Initialize() Script.OnDestroy() Script.CreateChartToolbarMenuItem() Script.Print(object) Script.Dispose() Script.Name Script.ShortName Script.Description Script.Metadata Script.Parameters Script.Bars Script.IsInitialized Script.UiDispatcher Script.Alert object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TradingScript() protected TradingScript() Properties Account The account associated with the orders and position. public IAccount Account { get; } PendingOrders A collection of orders that are currently pending execution. public IReadOnlyList<IOrder> PendingOrders { get; } Position The position associated with the current symbol and account. public IPosition Position { get; } Symbol The financial symbol associated with the orders and position. public ISymbol Symbol { get; } Methods CancelOrder(IOrder, string, bool) Cancels the specified order with an optional comment. The order to cancel. Optional comment for the order. Indicates if the cancellation should be silent. public void CancelOrder(IOrder order, string comment = \"\", bool cancelSilently = false) Parameters order IOrder comment string cancelSilently bool ClosePosition(string) Closes the entire position with an optional comment. Optional comment for the order. public void ClosePosition(string comment = \"\") Parameters comment string ExecuteMarketOrder(OrderAction, double, TimeInForce, string) Executes a market order immediately based on the given action and quantity. public IOrder ExecuteMarketOrder(OrderAction action, double quantity, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters action OrderAction The buy or sell action. quantity double The order quantity. timeInForce TimeInForce Order duration setting. Defaults to Day. comment string Optional order comment. Returns IOrder GetExchangeRate(string, string) Retrieves the exchange rate for converting one currency to another. public double GetExchangeRate(string fromCurrency, string toCurrency) Parameters fromCurrency string The currency to convert from (e.g., \"USD\"). toCurrency string The currency to convert to (e.g., \"EUR\"). Returns double The exchange rate between the specified currencies. GetOrderExpectedPrice(IOrder) Gets estimated fill price of pending order. public double GetOrderExpectedPrice(IOrder order) Parameters order IOrder The pending order. Returns double ModifyOrder(IOrder, double, double?, double?, TimeInForce) Modifies an existing order. The order of open position. Order quantity. Stop price if applicable. Limit price if applicable. Order duration. Defaults to Day. public void ModifyOrder(IOrder order, double quantity, double? stopPrice, double? limitPrice, TimeInForce timeInForce = TimeInForce.Day) Parameters order IOrder quantity double stopPrice double? limitPrice double? timeInForce TimeInForce OnBarUpdate() Called when the bar data is updated. protected virtual void OnBarUpdate() OnOrderFillUpdate(IOrder) Called when an order's fill status is updated. protected virtual void OnOrderFillUpdate(IOrder order) Parameters order IOrder The updated order. OnOrderUpdate(IOrder) Called when an order's status is updated. protected virtual void OnOrderUpdate(IOrder order) Parameters order IOrder The updated order. OnPositionUpdate() Called when the position's status is updated. protected virtual void OnPositionUpdate() PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) Places a limit order. public IOrder PlaceLimitOrder(OrderAction action, double quantity, double limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters action OrderAction The buy or sell action. quantity double Order quantity. limitPrice double Limit price. timeInForce TimeInForce Order duration. Defaults to Day. comment string Optional comment for the order. Returns IOrder PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) Places an order of specified type with defined price parameters. public IOrder PlaceOrder(OrderAction action, OrderType type, double quantity, double? stopPrice, double? limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters action OrderAction The buy or sell action. type OrderType Order type (e.g., Limit, Stop). quantity double Order quantity. stopPrice double? Stop price if applicable. limitPrice double? Limit price if applicable. timeInForce TimeInForce Order duration. Defaults to Day. comment string Optional comment for the order. Returns IOrder PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) Places a stop-limit order. The buy or sell action. Order quantity. Stop price. Limit price. Order duration. Defaults to Day. Optional comment for the order. public IOrder PlaceStopLimitOrder(OrderAction action, double quantity, double stopPrice, double limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters action OrderAction quantity double stopPrice double limitPrice double timeInForce TimeInForce comment string Returns IOrder PlaceStopOrder(OrderAction, double, double, TimeInForce, string) Places a stop order that activates when the stop price is reached. The buy or sell action. Order quantity. Stop price. Order duration. Defaults to Day. Optional comment for the order. public IOrder PlaceStopOrder(OrderAction action, double quantity, double stopPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters action OrderAction quantity double stopPrice double timeInForce TimeInForce comment string Returns IOrder SetStopLoss(IOrder, double, string) Sets a stop-loss order on an open position at a specified price. public IOrder SetStopLoss(IOrder order, double stopPrice, string comment = \"\") Parameters order IOrder The order of the open position to which the stop-loss is applied. stopPrice double The price at which the stop-loss order is set. comment string Optional comment for the order, providing additional information or notes. Returns IOrder The updated order with the stop-loss applied. SetStopLossPercent(IOrder, double, string) Sets a stop-loss order on an open position based on a specified percentage from the entry price. public IOrder SetStopLossPercent(IOrder order, double percent, string comment = \"\") Parameters order IOrder The order of the open position to which the stop-loss is applied. percent double The percentage away from the entry price to place the stop-loss. comment string Optional comment for the order, providing additional information or notes. Returns IOrder The updated order with the stop-loss applied. SetStopLossTicks(IOrder, int, string) Sets a stop-loss order on an open position based on a specified number of ticks from the entry price. public IOrder SetStopLossTicks(IOrder order, int ticks, string comment = \"\") Parameters order IOrder The order of the open position to which the stop-loss is applied. ticks int The number of ticks away from the entry price to place the stop-loss. comment string Optional comment for the order, providing additional information or notes. Returns IOrder The updated order with the stop-loss applied. SetTakeProfit(IOrder, double, string) Sets a take-profit order at a specified price to close a position when the price is reached. public IOrder SetTakeProfit(IOrder order, double limitPrice, string comment = \"\") Parameters order IOrder The order of the open position to which the take-profit is applied. limitPrice double The price at which the take-profit order is set. comment string Optional comment for the order, providing additional information or notes. Returns IOrder The updated order with the take-profit applied. SetTakeProfitPercent(IOrder, double, string) Sets a take-profit order on an open position based on a specified percentage from the entry price. public IOrder SetTakeProfitPercent(IOrder order, double percent, string comment = \"\") Parameters order IOrder The order of the open position to which the take-profit is applied. percent double The percentage away from the entry price to place the take-profit. comment string Optional comment for the order, providing additional information or notes. Returns IOrder The updated order with the take-profit applied. SetTakeProfitTicks(IOrder, int, string) Sets a take-profit order on an open position based on a specified number of ticks from the entry price. public IOrder SetTakeProfitTicks(IOrder order, int ticks, string comment = \"\") Parameters order IOrder The order of the open position to which the take-profit is applied. ticks int The number of ticks away from the entry price to place the take-profit. comment string Optional comment for the order, providing additional information or notes. Returns IOrder The updated order with the take-profit applied."
  },
  "api/Tickblaze.Scripts.Api.Bases.WatchlistCellString.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.WatchlistCellString.html",
    "title": "Class WatchlistCellString | Tickblaze",
    "keywords": "Class WatchlistCellString Namespace Tickblaze.Scripts.Api.Bases Assembly Tickblaze.Scripts.Api.dll Represents a cell in the watchlist with string value and associated colors. public record WatchlistCellString : IEquatable<WatchlistCellString> Inheritance object WatchlistCellString Implements IEquatable<WatchlistCellString> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors WatchlistCellString() public WatchlistCellString() WatchlistCellString(WatchlistCellString) protected WatchlistCellString(WatchlistCellString original) Parameters original WatchlistCellString Properties Background The background color of the watchlist cell. public Color Background { get; set; } EqualityContract protected virtual Type EqualityContract { get; } Foreground The foreground color of the watchlist cell. public Color Foreground { get; set; } Value The string value of the watchlist cell. public string Value { get; set; } Methods Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool Equals(WatchlistCellString?) public virtual bool Equals(WatchlistCellString? other) Parameters other WatchlistCellString Returns bool GetHashCode() public override int GetHashCode() Returns int PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder builder) Parameters builder StringBuilder Returns bool ToString() public override string ToString() Returns string Operators operator ==(WatchlistCellString?, WatchlistCellString?) public static bool operator ==(WatchlistCellString? left, WatchlistCellString? right) Parameters left WatchlistCellString right WatchlistCellString Returns bool operator !=(WatchlistCellString?, WatchlistCellString?) public static bool operator !=(WatchlistCellString? left, WatchlistCellString? right) Parameters left WatchlistCellString right WatchlistCellString Returns bool"
  },
  "api/Tickblaze.Scripts.Api.Bases.html": {
    "href": "api/Tickblaze.Scripts.Api.Bases.html",
    "title": "Namespace Tickblaze.Scripts.Api.Bases | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Bases Classes BarType Represents a base class for defining custom bar types with metadata, bar series, and source data configuration. Drawing Represents a base class for drawing objects that can be rendered on the chart. Indicator Represents a base class for indicator scripts. Provides functionality for calculating and rendering the indicator on the chart. Indicator.BandShading Represents a shading between two values or plot series. PositionSizer A base class for position sizing scripts. Script Represents a base class for scripts that can interact with chart data, parameters, and initialization processes. Strategy Represents a base class for strategy scripts allowing order management. TradeManagementStrategy A base class for trade management strategies, providing methods to control the activation and deactivation of the strategy. TradingScript Represents a trading script that allows the execution and management of orders and positions in a trading system. WatchlistCellString Represents a cell in the watchlist with string value and associated colors. Interfaces IIndicator Represents an indicator script that can be overlaid on a chart or displayed on a separate indicator panel. ITradeManagmentStrategyScriptBase Interface for a trade management strategy script base, providing methods to start and stop the strategy. Enums BarType.SourceDataType Enumerates the possible types of source data used to create bars."
  },
  "api/Tickblaze.Scripts.Api.CollectionExtensions.html": {
    "href": "api/Tickblaze.Scripts.Api.CollectionExtensions.html",
    "title": "Class CollectionExtensions | Tickblaze",
    "keywords": "Class CollectionExtensions Namespace Tickblaze.Scripts.Api Assembly Tickblaze.Scripts.Api.dll Extensions for collections. public static class CollectionExtensions Inheritance object CollectionExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods BinarySearch<TItem>(IReadOnlyList<TItem>, TItem) Performs a binary search on a sorted list to find the index of the specified item. public static int BinarySearch<TItem>(this IReadOnlyList<TItem> items, TItem item) Parameters items IReadOnlyList<TItem> The sorted list of items. item TItem The item to search for. Returns int The index of the item if found; otherwise, a negative index indicating where the item would be inserted. Type Parameters TItem The type of elements in the list. Remarks The implementation is a refactored copy of this."
  },
  "api/Tickblaze.Scripts.Api.Enums.FontStyle.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.FontStyle.html",
    "title": "Enum FontStyle | Tickblaze",
    "keywords": "Enum FontStyle Namespace Tickblaze.Scripts.Api.Enums Assembly Tickblaze.Scripts.Api.dll Specifies the style of a font. public enum FontStyle Fields Italic = 0 Italic text style. Normal = 1 Normal text style. Oblique = 2 Oblique text style."
  },
  "api/Tickblaze.Scripts.Api.Enums.FontWeight.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.FontWeight.html",
    "title": "Enum FontWeight | Tickblaze",
    "keywords": "Enum FontWeight Namespace Tickblaze.Scripts.Api.Enums Assembly Tickblaze.Scripts.Api.dll Specifies the weight of a font. public enum FontWeight Fields Black = 0 Black font weight. Bold = 1 Bold font weight. DemiBold = 2 DemiBold font weight. ExtraBlack = 3 ExtraBlack font weight. ExtraBold = 4 ExtraBold font weight. ExtraLight = 5 ExtraLight font weight. Heavy = 6 Heavy font weight. Light = 7 Light font weight. Medium = 8 Medium font weight. Normal = 9 Normal font weight. Regular = 10 Regular font weight. SemiBold = 11 SemiBold font weight. Thin = 12 Thin font weight. UltraBlack = 13 UltraBlack font weight. UltraBold = 14 UltraBold font weight. UltraLight = 15 UltraLight font weight."
  },
  "api/Tickblaze.Scripts.Api.Enums.HorizontalAlignment.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.HorizontalAlignment.html",
    "title": "Enum HorizontalAlignment | Tickblaze",
    "keywords": "Enum HorizontalAlignment Namespace Tickblaze.Scripts.Api.Enums Assembly Tickblaze.Scripts.Api.dll Specifies the horizontal aligment. public enum HorizontalAlignment Fields Center = 1 Aligns content to the center. Left = 0 Aligns content to the left. Right = 2 Aligns content to the right."
  },
  "api/Tickblaze.Scripts.Api.Enums.LineStyle.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.LineStyle.html",
    "title": "Enum LineStyle | Tickblaze",
    "keywords": "Enum LineStyle Namespace Tickblaze.Scripts.Api.Enums Assembly Tickblaze.Scripts.Api.dll Specifies the style of a line. public enum LineStyle Fields Dash = 101 Dashed line. DashDot = 103 Dash-dot line. DashDotDot = 104 Dash-dot-dot line. Dot = 102 Dotted line. Solid = 100 Solid line."
  },
  "api/Tickblaze.Scripts.Api.Enums.OrderAction.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.OrderAction.html",
    "title": "Enum OrderAction | Tickblaze",
    "keywords": "Enum OrderAction Namespace Tickblaze.Scripts.Api.Enums Assembly Tickblaze.Scripts.Api.dll Specifies the action of an order. public enum OrderAction Fields Buy = 0 Buy order action. BuyToCover = 3 Buy to cover order action. Sell = 1 Sell order action. SellShort = 2 Sell short order action."
  },
  "api/Tickblaze.Scripts.Api.Enums.OrderDirection.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.OrderDirection.html",
    "title": "Enum OrderDirection | Tickblaze",
    "keywords": "Enum OrderDirection Namespace Tickblaze.Scripts.Api.Enums Assembly Tickblaze.Scripts.Api.dll Specifies the direction of an order. public enum OrderDirection Fields Long = 0 Long position direction. Short = 1 Short position direction."
  },
  "api/Tickblaze.Scripts.Api.Enums.OrderStatus.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.OrderStatus.html",
    "title": "Enum OrderStatus | Tickblaze",
    "keywords": "Enum OrderStatus Namespace Tickblaze.Scripts.Api.Enums Assembly Tickblaze.Scripts.Api.dll Specifies the status of an order. public enum OrderStatus Fields Cancelled = 3 Order has been cancelled. Executed = 2 Order has been executed. Pending = 1 Order is pending. Unknown = 0 Status is unknown."
  },
  "api/Tickblaze.Scripts.Api.Enums.OrderType.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.OrderType.html",
    "title": "Enum OrderType | Tickblaze",
    "keywords": "Enum OrderType Namespace Tickblaze.Scripts.Api.Enums Assembly Tickblaze.Scripts.Api.dll Specifies the type of an order. public enum OrderType Fields Limit = 1 Limit order type. Market = 0 Market order type. Stop = 2 Stop order type. StopLimit = 3 Stop limit order type."
  },
  "api/Tickblaze.Scripts.Api.Enums.PlotStyle.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.PlotStyle.html",
    "title": "Enum PlotStyle | Tickblaze",
    "keywords": "Enum PlotStyle Namespace Tickblaze.Scripts.Api.Enums Assembly Tickblaze.Scripts.Api.dll Specifies the style of a plot. public enum PlotStyle Fields Cross = 106 Cross plot style. Dot = 107 Dot plot style. Hash = 108 Hash plot style. Histogram = 105 Histogram plot style. Line = 109 Line plot style. Square = 110 Square plot style. Stair = 111 Stair plot style. TriangleDown = 112 Triangle down plot style. TriangleLeft = 113 Triangle left plot style. TriangleRight = 114 Triangle right plot style. TriangleUp = 115 Triangle up plot style."
  },
  "api/Tickblaze.Scripts.Api.Enums.PositionStatus.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.PositionStatus.html",
    "title": "Enum PositionStatus | Tickblaze",
    "keywords": "Enum PositionStatus Namespace Tickblaze.Scripts.Api.Enums Assembly Tickblaze.Scripts.Api.dll Specifies the status of a position. public enum PositionStatus Fields Close = 1 Closed position. Open = 0 Open position."
  },
  "api/Tickblaze.Scripts.Api.Enums.RoundingMode.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.RoundingMode.html",
    "title": "Enum RoundingMode | Tickblaze",
    "keywords": "Enum RoundingMode Namespace Tickblaze.Scripts.Api.Enums Assembly Tickblaze.Scripts.Api.dll Specifies the mode of rounding. public enum RoundingMode Fields Down = 2 Rounds down. ToNearest = 0 Rounds to the nearest value. Up = 1 Rounds up."
  },
  "api/Tickblaze.Scripts.Api.Enums.TimeInForce.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.TimeInForce.html",
    "title": "Enum TimeInForce | Tickblaze",
    "keywords": "Enum TimeInForce Namespace Tickblaze.Scripts.Api.Enums Assembly Tickblaze.Scripts.Api.dll Specifies the time in force for an order. public enum TimeInForce Fields Day = 0 Order is valid for the current day only. FillOrKill = 2 Order must be filled immediately or canceled. GoodTillCancel = 1 Order remains active until canceled. ImmediateOrCancel = 3 Order must be filled immediately, partially or fully, or canceled."
  },
  "api/Tickblaze.Scripts.Api.Enums.VerticalAlignment.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.VerticalAlignment.html",
    "title": "Enum VerticalAlignment | Tickblaze",
    "keywords": "Enum VerticalAlignment Namespace Tickblaze.Scripts.Api.Enums Assembly Tickblaze.Scripts.Api.dll Specifies the vertical alignment. public enum VerticalAlignment Fields Bottom = 2 Aligns the content to the bottom. Center = 1 Aligns the content to the center. Top = 0 Aligns the content to the top."
  },
  "api/Tickblaze.Scripts.Api.Enums.html": {
    "href": "api/Tickblaze.Scripts.Api.Enums.html",
    "title": "Namespace Tickblaze.Scripts.Api.Enums | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Enums Enums FontStyle Specifies the style of a font. FontWeight Specifies the weight of a font. HorizontalAlignment Specifies the horizontal aligment. LineStyle Specifies the style of a line. OrderAction Specifies the action of an order. OrderDirection Specifies the direction of an order. OrderStatus Specifies the status of an order. OrderType Specifies the type of an order. PlotStyle Specifies the style of a plot. PositionStatus Specifies the status of a position. RoundingMode Specifies the mode of rounding. TimeInForce Specifies the time in force for an order. VerticalAlignment Specifies the vertical alignment."
  },
  "api/Tickblaze.Scripts.Api.IndexedDictionary-2.html": {
    "href": "api/Tickblaze.Scripts.Api.IndexedDictionary-2.html",
    "title": "Class IndexedDictionary<TKey, TValue> | Tickblaze",
    "keywords": "Class IndexedDictionary<TKey, TValue> Namespace Tickblaze.Scripts.Api Assembly Tickblaze.Scripts.Api.dll A dictionary with an indexer that allows accessing elements by their index in addition to the key. public class IndexedDictionary<TKey, TValue> : Dictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, ISerializable, IDeserializationCallback where TKey : notnull Type Parameters TKey The type of the key in the dictionary. TValue The type of the value in the dictionary. Inheritance object Dictionary<TKey, TValue> IndexedDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IDictionary ICollection IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable ISerializable IDeserializationCallback Derived Parameters Inherited Members Dictionary<TKey, TValue>.Add(TKey, TValue) Dictionary<TKey, TValue>.Clear() Dictionary<TKey, TValue>.ContainsKey(TKey) Dictionary<TKey, TValue>.ContainsValue(TValue) Dictionary<TKey, TValue>.GetEnumerator() Dictionary<TKey, TValue>.OnDeserialization(object) Dictionary<TKey, TValue>.Remove(TKey) Dictionary<TKey, TValue>.Remove(TKey, out TValue) Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue) Dictionary<TKey, TValue>.TryAdd(TKey, TValue) Dictionary<TKey, TValue>.EnsureCapacity(int) Dictionary<TKey, TValue>.TrimExcess() Dictionary<TKey, TValue>.TrimExcess(int) Dictionary<TKey, TValue>.Comparer Dictionary<TKey, TValue>.Count Dictionary<TKey, TValue>.Keys Dictionary<TKey, TValue>.Values Dictionary<TKey, TValue>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors IndexedDictionary() public IndexedDictionary() Properties this[int] Gets or sets the value associated with the specified index in the dictionary. public TValue this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IAccount.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IAccount.html",
    "title": "Interface IAccount | Tickblaze",
    "keywords": "Interface IAccount Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Represents trading account with balance, margin, positions, and equity details. public interface IAccount Properties BaseCurrencyCode The currency code for the account's base currency. string BaseCurrencyCode { get; } BuyingPower The available buying power for the account. double BuyingPower { get; } Cash The cash balance in the account. double Cash { get; } CashValue The current cash value in the account. double CashValue { get; } Equity The equity in the account, which is the value of the account's assets. double Equity { get; } ExcessEquity The excess equity available in the account. double ExcessEquity { get; } ExcessInitialMargin The excess initial margin available in the account. double ExcessInitialMargin { get; } ExcessIntradayMargin The excess intraday margin available in the account. double ExcessIntradayMargin { get; } GrossRealizedPnL The gross realized profit and loss for the account. double GrossRealizedPnL { get; } InitialCash The initial cash amount deposited into the account. double InitialCash { get; } InitialMargin The initial margin required for opening positions in the account. double InitialMargin { get; } InitialMarginOvernight The initial margin required for holding overnight positions. double InitialMarginOvernight { get; } IntradayMargin The intraday margin requirement for the account. double IntradayMargin { get; } MaintenanceMargin The maintenance margin requirement for the account. double MaintenanceMargin { get; } MaintenanceMarginOvernight The maintenance margin required for holding overnight positions. double MaintenanceMarginOvernight { get; } MarketValue The market value of all positions held in the account. double MarketValue { get; } Name The account name. string Name { get; } NetLiquidation The net liquidation value, which is the current total value of the account. double NetLiquidation { get; } NetLiquidationValue The net liquidation value including all assets and liabilities in the account. double NetLiquidationValue { get; } Positions A list of positions currently held in the account. IReadOnlyList<IPosition> Positions { get; } RealizedPnL The realized profit and loss, representing closed positions. double RealizedPnL { get; } TotalNetValue The total net value of the account, which combines equity and any liabilities. double TotalNetValue { get; } TotalPnL The total profit and loss, combining both realized and unrealized profits/losses. double TotalPnL { get; } UnrealizedPnL The unrealized profit and loss from open positions in the account. double UnrealizedPnL { get; }"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IChart.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IChart.html",
    "title": "Interface IChart | Tickblaze",
    "keywords": "Interface IChart Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Represents a chart that displays financial data. public interface IChart : ISize Inherited Members ISize.Height ISize.Width Properties FirstVisibleBarIndex The index of the first visible bar on the chart. int FirstVisibleBarIndex { get; } LastVisibleBarIndex The index of the last visible bar on the chart. int LastVisibleBarIndex { get; } Methods FormatTime(DateTime) Formats the given datetime into a string representation. string FormatTime(DateTime time) Parameters time DateTime The datetime value to format. Returns string A string representing the formatted datetime. GetBarIndexByXCoordinate(double) Gets the bar index by the specified X coordinate. int GetBarIndexByXCoordinate(double x) Parameters x double The X coordinate to get the bar index for. Returns int The bar index corresponding to the specified X coordinate. GetTimeByXCoordinate(double) Gets the time value by the specified X coordinate. DateTime GetTimeByXCoordinate(double x) Parameters x double The X coordinate to get the time value for. Returns DateTime The time value corresponding to the specified X coordinate. GetXCoordinateByBarIndex(int) Gets the X coordinate by the given bar index. double GetXCoordinateByBarIndex(int barIndex) Parameters barIndex int The index of the bar. Returns double The X coordinate corresponding to the specified bar index. GetXCoordinateByTime(DateTime) Gets the X coordinate by the specified time. double GetXCoordinateByTime(DateTime time) Parameters time DateTime The time to get the X coordinate for. Returns double The X coordinate corresponding to the specified time."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IChartObject.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IChartObject.html",
    "title": "Interface IChartObject | Tickblaze",
    "keywords": "Interface IChartObject Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Represents an object displayed on a chart, including its scale, and rendering behavior. public interface IChartObject Properties Chart The chart to which this object belongs. IChart? Chart { get; } ChartScale The scale used by this object on the chart. IChartScale? ChartScale { get; } ShowOnChart Indicates whether the object is visible on the chart. bool ShowOnChart { get; } Methods OnRender(IDrawingContext) Draws the chart object using the specified drawing context. void OnRender(IDrawingContext context) Parameters context IDrawingContext The context used for rendering."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IChartPoint.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IChartPoint.html",
    "title": "Interface IChartPoint | Tickblaze",
    "keywords": "Interface IChartPoint Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Represents a point on a chart with a specific index, time, and value. Used to store data points on the chart, where each point has a unique index and associated time and value. public interface IChartPoint : IPoint Inherited Members IPoint.X IPoint.Y Properties Index The index of the chart point, which serves as the position identifier of the point in the chart's data series. int Index { get; } Time The time associated with the chart point. It represents the time at which the data point occurred. IComparable Time { get; set; } Value The value associated with the chart point, representing the data value at the given time. IComparable Value { get; set; }"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IChartPoints.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IChartPoints.html",
    "title": "Interface IChartPoints | Tickblaze",
    "keywords": "Interface IChartPoints Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Represents a collection of chart points that can be accessed and manipulated. Each chart point consists of X (time) and Y (value) data values. public interface IChartPoints : IReadOnlyList<IChartPoint>, IReadOnlyCollection<IChartPoint>, IEnumerable<IChartPoint>, IEnumerable Inherited Members IReadOnlyList<IChartPoint>.this[int] IReadOnlyCollection<IChartPoint>.Count IEnumerable<IChartPoint>.GetEnumerator() Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem) Methods Add(IComparable, IComparable) Adds a new chart point to the collection with specified X and Y data values. void Add(IComparable xDataValue, IComparable yDataValue) Parameters xDataValue IComparable The X coordinate (time) of the chart point. yDataValue IComparable The Y coordinate (value) of the chart point."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IChartScale.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IChartScale.html",
    "title": "Interface IChartScale | Tickblaze",
    "keywords": "Interface IChartScale Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Represents the scale for the price axis in a chart, including the maximum and minimum price. It provides methods to format prices and convert between price values and their corresponding Y coordinates. public interface IChartScale Properties MaxPrice The maximum price value on the scale. double MaxPrice { get; } MinPrice The minimum price value on the scale. double MinPrice { get; } Methods FormatPrice(double) Formats the given price value into a string representation. string FormatPrice(double value) Parameters value double The price value to format. Returns string A string representing the formatted price. GetValueByYCoordinate(double) Gets the axis value for the specified Y coordinate in pixels. double GetValueByYCoordinate(double y) Parameters y double The Y coordinate in pixels to convert. Returns double The axis value corresponding to the specified Y coordinate in pixels. GetYCoordinateByValue(double) Gets the Y coordinate in pixels for the specified axis value. double GetYCoordinateByValue(double value) Parameters value double The axis value to convert. Returns double The Y coordinate in pixels corresponding to the specified axis value."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IDispatcher.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IDispatcher.html",
    "title": "Interface IDispatcher | Tickblaze",
    "keywords": "Interface IDispatcher Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Provides the ability to execute delegates on the UI thread public interface IDispatcher Methods Invoke(Action) Executes the specified Action synchronously on the UI thread. void Invoke(Action action) Parameters action Action An Action delegate to invoke through the dispatcher. InvokeAsync(Action) Executes the specified Action asynchronously on the UI thread. Task InvokeAsync(Action action) Parameters action Action An Action delegate to invoke through the dispatcher. Returns Task InvokeAsync<T>(Func<T>) Executes the specified Action asynchronously on the UI thread. Task<T> InvokeAsync<T>(Func<T> callback) Parameters callback Func<T> A Func delegate to invoke through the dispatcher. Returns Task<T> The value returned by callback. Type Parameters T The return value type of the specified delegate. Invoke<T>(Func<T>) Executes the specified Func synchronously on the UI thread. T Invoke<T>(Func<T> callback) Parameters callback Func<T> A Func delegate to invoke through the dispatcher. Returns T The value returned by callback. Type Parameters T The return value type of the specified delegate."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IDrawingAnnotation.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IDrawingAnnotation.html",
    "title": "Interface IDrawingAnnotation | Tickblaze",
    "keywords": "Interface IDrawingAnnotation Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Represents a drawing annotation on a chart, typically used for visual elements such as lines, shapes, or markers. It contains a collection of points that define the shape or path of the annotation on the chart. public interface IDrawingAnnotation Properties Points Gets the collection of points associated with the drawing annotation. IChartPoints Points { get; }"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IDrawingContext.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IDrawingContext.html",
    "title": "Interface IDrawingContext | Tickblaze",
    "keywords": "Interface IDrawingContext Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Defines a context for rendering graphical elements, including shapes, text, and lines. public interface IDrawingContext Properties RenderSize The size of the rendering area. ISize RenderSize { get; } Methods DrawEllipse(IPoint, double, double, Color?, Color?, int, LineStyle) Draws an ellipse with the specified dimensions and styling. void DrawEllipse(IPoint center, double radiusX, double radiusY, Color? fillColor, Color? lineColor = null, int lineThickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters center IPoint The center point of the ellipse. radiusX double The horizontal radius of the ellipse. radiusY double The vertical radius of the ellipse. fillColor Color? The color used to fill the ellipse. lineColor Color? The color of the ellipse's outline. lineThickness int The thickness of the outline. lineStyle LineStyle The style of the outline. DrawExtendedLine(IPoint, IPoint, Color, int, LineStyle) Draws a line extended in both directions beyond its endpoints. void DrawExtendedLine(IPoint pointA, IPoint pointB, Color color, int thickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters pointA IPoint The first point on the line. pointB IPoint The second point on the line. color Color The color of the line. thickness int The thickness of the line. lineStyle LineStyle The style of the line. DrawLine(IPoint, IPoint, Color, int, LineStyle) Draws a line between two points. void DrawLine(IPoint pointA, IPoint pointB, Color color, int thickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters pointA IPoint The first point of the line. pointB IPoint The second point of the line. color Color The color of the line. thickness int The thickness of the line. lineStyle LineStyle The style of the line. DrawPolygon(IEnumerable<IPoint>, Color?, Color?, int, LineStyle) Draws a polygon defined by a sequence of points. void DrawPolygon(IEnumerable<IPoint> points, Color? fillColor, Color? lineColor = null, int lineThickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters points IEnumerable<IPoint> The vertices of the polygon. fillColor Color? The color used to fill the polygon. lineColor Color? The color of the polygon's outline. lineThickness int The thickness of the outline. lineStyle LineStyle The style of the outline. DrawRay(IPoint, IPoint, Color, int, LineStyle) Draws a ray originating from a point and extending through a second point. void DrawRay(IPoint pointA, IPoint pointB, Color color, int thickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters pointA IPoint The starting point of the ray. pointB IPoint A point along the direction of the ray. color Color The color of the ray. thickness int The thickness of the ray. lineStyle LineStyle The style of the ray. DrawRectangle(IPoint, double, double, Color?, Color?, int, LineStyle) Draws a rectangle at the specified location with the given dimensions and styling. void DrawRectangle(IPoint pointA, double width, double height, Color? fillColor, Color? lineColor = null, int lineThickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters pointA IPoint The top-left corner of the rectangle. width double The width of the rectangle. height double The height of the rectangle. fillColor Color? The color used to fill the rectangle. lineColor Color? The color of the rectangle's outline. lineThickness int The thickness of the outline. lineStyle LineStyle The style of the outline. DrawRectangle(IPoint, IPoint, Color?, Color?, int, LineStyle) Draws a rectangle defined by two points with the given styling. void DrawRectangle(IPoint pointA, IPoint pointB, Color? fillColor, Color? lineColor = null, int lineThickness = 1, LineStyle lineStyle = LineStyle.Solid) Parameters pointA IPoint The corner of the rectangle. pointB IPoint The opposite corner of the rectangle. fillColor Color? The color used to fill the rectangle. lineColor Color? The color of the rectangle's outline. lineThickness int The thickness of the outline. lineStyle LineStyle The style of the outline. DrawText(IPoint, string, Color, Font?) Draws text at the specified origin point. void DrawText(IPoint origin, string text, Color color, Font? font = null) Parameters origin IPoint The location where the text is drawn. text string The text to draw. color Color The color of the text. font Font The font used for rendering the text. MeasureText(string, Font) Measures the dimensions of a given text string using the specified font. ISize MeasureText(string text, Font font) Parameters text string The text to measure. font Font The font used for measurement. Returns ISize The size of the rendered text."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IExchangeCalendar.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IExchangeCalendar.html",
    "title": "Interface IExchangeCalendar | Tickblaze",
    "keywords": "Interface IExchangeCalendar Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Defines methods for handling exchange calendars, including date/time conversion and session status. public interface IExchangeCalendar Methods ExchangeDateTimeToUtcDateTime(DateTime) Converts a specified exchange date/time to a UTC date/time. DateTime ExchangeDateTimeToUtcDateTime(DateTime exchangeDateTime) Parameters exchangeDateTime DateTime The exchange date/time to convert. Returns DateTime The specified exchange date/time converted to UTC date/time. GetSession(DateTime) Retrieves a session at a specific UTC date/time. IExchangeSession? GetSession(DateTime utcDateTime) Parameters utcDateTime DateTime The UTC date/time to convert. Returns IExchangeSession The session at the specified UTC date/time, or null if none exists. IsSessionOpen(DateTime, bool) Determines whether there is an open session at a specified date/time. bool IsSessionOpen(DateTime utcDateTime, bool isIntraday) Parameters utcDateTime DateTime The UTC date/time. isIntraday bool Indicates whether the test is for intraday data. Returns bool True if there is an open session, false otherwise. UtcDateTimeToExchangeDateTime(DateTime) Converts a specified UTC date/time to an exchange date/time. DateTime UtcDateTimeToExchangeDateTime(DateTime utcDateTime) Parameters utcDateTime DateTime The UTC date/time to convert. Returns DateTime The specified UTC date/time converted to exchange date/time."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IExchangeSession.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IExchangeSession.html",
    "title": "Interface IExchangeSession | Tickblaze",
    "keywords": "Interface IExchangeSession Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Defines methods and properties for handling exchange sessions, including session times and duration. public interface IExchangeSession Properties EndExchangeDateTime The end exchange date/time of the session. DateTime EndExchangeDateTime { get; } EndUtcDateTime The end UTC date/time of the session. DateTime EndUtcDateTime { get; } SessionMinutes The session duration in minutes. int SessionMinutes { get; } SessionSeconds The session duration in seconds. int SessionSeconds { get; } StartExchangeDateTime The start exchange date/time of the session. DateTime StartExchangeDateTime { get; } StartUtcDateTime The start UTC date/time of the session. DateTime StartUtcDateTime { get; } TotalMinutes The total minute count from the first minute of the first session. int TotalMinutes { get; } Methods Contains(DateTime) Determines whether the provided UTC date/time is within the session. bool Contains(DateTime utcDateTime) Parameters utcDateTime DateTime The UTC date/time to check. Returns bool True if the date/time is within the session, false otherwise."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IMetadata.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IMetadata.html",
    "title": "Interface IMetadata | Tickblaze",
    "keywords": "Interface IMetadata Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Defines metadata properties for a script, including name, description, and related metadata. public interface IMetadata Properties Description A description of the script. string Description { get; } Metadata Associated metadata for the script. Metadata Metadata { get; } Name The name of the script. string Name { get; } ShortName The short name of the script. string ShortName { get; }"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IPlot.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IPlot.html",
    "title": "Interface IPlot | Tickblaze",
    "keywords": "Interface IPlot Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Defines properties for a plot including visual appearance. public interface IPlot Properties Color The color of the plot. Color Color { get; } IsVisible Indicates whether the plot is visible. bool IsVisible { get; } LineStyle The line style of the plot. LineStyle LineStyle { get; } Name The name of the plot. [JsonIgnore] string Name { get; } Thickness The thickness of the plot's line. int Thickness { get; }"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IPoint.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IPoint.html",
    "title": "Interface IPoint | Tickblaze",
    "keywords": "Interface IPoint Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Defines properties for a point with X and Y coordinates. public interface IPoint Properties X The X coordinate of the point. double X { get; set; } Y The Y coordinate of the point. double Y { get; set; }"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.IScript.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.IScript.html",
    "title": "Interface IScript | Tickblaze",
    "keywords": "Interface IScript Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Defines properties and methods for a script, including initialization and metadata. public interface IScript : IDisposable Inherited Members IDisposable.Dispose() Properties IsInitialized Indicates whether the script has been initialized. bool IsInitialized { get; } Metadata The metadata associated with the script. Metadata Metadata { get; } Parameters The parameters for the script. Parameters Parameters { get; } Methods GetParameters() Gets the parameters of the script for the UI. Parameters GetParameters() Returns Parameters Parameters for the UI. Initialize() Initializes the script. void Initialize()"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.ISeries-1.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.ISeries-1.html",
    "title": "Interface ISeries<TItem> | Tickblaze",
    "keywords": "Interface ISeries<TItem> Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Defines a series of items and provides methods to retrieve specific items from the series. public interface ISeries<out TItem> : IReadOnlyList<TItem?>, IReadOnlyCollection<TItem?>, IEnumerable<TItem?>, IEnumerable Type Parameters TItem The type of items in the series. Inherited Members IReadOnlyList<TItem>.this[int] IReadOnlyCollection<TItem>.Count IEnumerable<TItem>.GetEnumerator() Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem) Methods Last(int) Retrieves the last item in the series, optionally going back a specified number of bars. TItem? Last(int barsAgo = 0) Parameters barsAgo int The number of bars ago to retrieve the item from. Returns TItem The item at the specified position in the series, or null if not found."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.ISize.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.ISize.html",
    "title": "Interface ISize | Tickblaze",
    "keywords": "Interface ISize Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Defines properties for the size, including height and width. public interface ISize Properties Height The height of the size. double Height { get; } Width The width of the size. double Width { get; }"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.ISymbol.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.ISymbol.html",
    "title": "Interface ISymbol | Tickblaze",
    "keywords": "Interface ISymbol Namespace Tickblaze.Scripts.Api.Interfaces Assembly Tickblaze.Scripts.Api.dll Defines properties and methods related to a symbol, including tick size, point size, and volume normalization. public interface ISymbol Properties CurrencyCode The currency code of the symbol. string CurrencyCode { get; } Decimals The number of decimals for the symbol. int Decimals { get; } Description The description of the symbol. string Description { get; } ExchangeCalendar The exchange calendar for the symbol. IExchangeCalendar ExchangeCalendar { get; } MinimumVolume The minimum volume for the symbol. decimal MinimumVolume { get; } Name The name of the symbol. string Name { get; } PointSize The point size of the symbol. double PointSize { get; } PointValue The point value of the symbol. double PointValue { get; } TickSize The tick size of the symbol. double TickSize { get; } TickValue The tick value of the symbol. double TickValue { get; } TicksPerPoint The number of ticks per point for the symbol. double TicksPerPoint { get; } Methods FormatPrice(double) Formats a price as a string for the symbol. string FormatPrice(double price) Parameters price double The price to format. Returns string The formatted price as a string. NormalizeVolume(double, RoundingMode) Normalizes a volume to the symbol's tradable volume, applying the specified rounding mode. decimal NormalizeVolume(double volume, RoundingMode roundingMode) Parameters volume double The volume to normalize. roundingMode RoundingMode The rounding mode to apply. Returns decimal The normalized volume. RoundToTick(double) Rounds a value to the nearest tick. double RoundToTick(double value) Parameters value double The value to round. Returns double The value rounded to the nearest tick."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrder.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrder.html",
    "title": "Interface IOrder | Tickblaze",
    "keywords": "Interface IOrder Namespace Tickblaze.Scripts.Api.Interfaces.Orders Assembly Tickblaze.Scripts.Api.dll Represents an order within the trading system, containing details about the order's characteristics and state. public interface IOrder Properties Direction The direction of the order (e.g., long, short). OrderDirection Direction { get; } Index The index of the order, providing a unique identifier within the system. int Index { get; } LimitPrice The limit price for the order, if applicable. double LimitPrice { get; } Price The execution price of the order. double Price { get; } Quantity The quantity of the order, representing the number of units to buy or sell. double Quantity { get; } Status The current status of the order (e.g., pending, executed, canceled). OrderStatus Status { get; } StopPrice The stop price for the order, if applicable. double StopPrice { get; } Symbol The financial symbol associated with the order. ISymbol Symbol { get; } TimeInForce Specifies how long the order remains active in the market (e.g., Good Till Cancelled, Immediate or Cancel). TimeInForce TimeInForce { get; } Type The type of the order (e.g., market, limit, stop). OrderType Type { get; }"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrderAccessor.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrderAccessor.html",
    "title": "Interface IOrderAccessor | Tickblaze",
    "keywords": "Interface IOrderAccessor Namespace Tickblaze.Scripts.Api.Interfaces.Orders Assembly Tickblaze.Scripts.Api.dll Provides access to order-related information and functionality within the trading system. public interface IOrderAccessor Properties Account The account associated with the orders and position. IAccount Account { get; } PendingOrders A collection of orders that are currently pending execution. IReadOnlyList<IOrder> PendingOrders { get; } Position The position associated with the current symbol and account. IPosition Position { get; } Symbol The financial symbol associated with the orders and position. ISymbol Symbol { get; } Methods GetExchangeRate(string, string) Retrieves the exchange rate for converting one currency to another. double GetExchangeRate(string fromCurrency, string toCurrency) Parameters fromCurrency string The currency to convert from (e.g., \"USD\"). toCurrency string The currency to convert to (e.g., \"EUR\"). Returns double The exchange rate between the specified currencies."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrderManager.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrderManager.html",
    "title": "Interface IOrderManager | Tickblaze",
    "keywords": "Interface IOrderManager Namespace Tickblaze.Scripts.Api.Interfaces.Orders Assembly Tickblaze.Scripts.Api.dll Provides methods for managing orders and positions within the trading system. public interface IOrderManager : IOrderAccessor Inherited Members IOrderAccessor.GetExchangeRate(string, string) IOrderAccessor.Symbol IOrderAccessor.Account IOrderAccessor.PendingOrders IOrderAccessor.Position Methods CancelOrder(IOrder, string, bool) Cancels the specified order with an optional comment. The order to cancel. Optional comment for the order. Indicates if the cancellation should be silent. void CancelOrder(IOrder order, string comment = \"\", bool cancelSilently = false) Parameters order IOrder comment string cancelSilently bool ClosePosition(string) Closes the entire position with an optional comment. Optional comment for the order. void ClosePosition(string comment = \"\") Parameters comment string ExecuteMarketOrder(OrderAction, double, TimeInForce, string) Executes a market order immediately based on the given action and quantity. IOrder ExecuteMarketOrder(OrderAction action, double quantity, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters action OrderAction The buy or sell action. quantity double The order quantity. timeInForce TimeInForce Order duration setting. Defaults to Day. comment string Optional order comment. Returns IOrder GetOrderExpectedPrice(IOrder) Gets estimated fill price of pending order. double GetOrderExpectedPrice(IOrder order) Parameters order IOrder The pending order. Returns double ModifyOrder(IOrder, double, double?, double?, TimeInForce) Modifies an existing order. The order of open position. Order quantity. Stop price if applicable. Limit price if applicable. Order duration. Defaults to Day. void ModifyOrder(IOrder order, double quantity, double? stopPrice, double? limitPrice, TimeInForce timeInForce = TimeInForce.Day) Parameters order IOrder quantity double stopPrice double? limitPrice double? timeInForce TimeInForce PlaceLimitOrder(OrderAction, double, double, TimeInForce, string) Places a limit order. IOrder PlaceLimitOrder(OrderAction action, double quantity, double limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters action OrderAction The buy or sell action. quantity double Order quantity. limitPrice double Limit price. timeInForce TimeInForce Order duration. Defaults to Day. comment string Optional comment for the order. Returns IOrder PlaceOrder(OrderAction, OrderType, double, double?, double?, TimeInForce, string) Places an order of specified type with defined price parameters. IOrder PlaceOrder(OrderAction action, OrderType type, double quantity, double? stopPrice, double? limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters action OrderAction The buy or sell action. type OrderType Order type (e.g., Limit, Stop). quantity double Order quantity. stopPrice double? Stop price if applicable. limitPrice double? Limit price if applicable. timeInForce TimeInForce Order duration. Defaults to Day. comment string Optional comment for the order. Returns IOrder PlaceStopLimitOrder(OrderAction, double, double, double, TimeInForce, string) Places a stop-limit order. The buy or sell action. Order quantity. Stop price. Limit price. Order duration. Defaults to Day. Optional comment for the order. IOrder PlaceStopLimitOrder(OrderAction action, double quantity, double stopPrice, double limitPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters action OrderAction quantity double stopPrice double limitPrice double timeInForce TimeInForce comment string Returns IOrder PlaceStopOrder(OrderAction, double, double, TimeInForce, string) Places a stop order that activates when the stop price is reached. The buy or sell action. Order quantity. Stop price. Order duration. Defaults to Day. Optional comment for the order. IOrder PlaceStopOrder(OrderAction action, double quantity, double stopPrice, TimeInForce timeInForce = TimeInForce.Day, string comment = \"\") Parameters action OrderAction quantity double stopPrice double timeInForce TimeInForce comment string Returns IOrder SetStopLoss(IOrder, double, string) Sets a stop-loss order on an open position at a specified price. IOrder SetStopLoss(IOrder order, double stopPrice, string comment = \"\") Parameters order IOrder The order of the open position to which the stop-loss is applied. stopPrice double The price at which the stop-loss order is set. comment string Optional comment for the order, providing additional information or notes. Returns IOrder The updated order with the stop-loss applied. SetStopLossPercent(IOrder, double, string) Sets a stop-loss order on an open position based on a specified percentage from the entry price. IOrder SetStopLossPercent(IOrder order, double percent, string comment = \"\") Parameters order IOrder The order of the open position to which the stop-loss is applied. percent double The percentage away from the entry price to place the stop-loss. comment string Optional comment for the order, providing additional information or notes. Returns IOrder The updated order with the stop-loss applied. SetStopLossTicks(IOrder, int, string) Sets a stop-loss order on an open position based on a specified number of ticks from the entry price. IOrder SetStopLossTicks(IOrder order, int ticks, string comment = \"\") Parameters order IOrder The order of the open position to which the stop-loss is applied. ticks int The number of ticks away from the entry price to place the stop-loss. comment string Optional comment for the order, providing additional information or notes. Returns IOrder The updated order with the stop-loss applied. SetTakeProfit(IOrder, double, string) Sets a take-profit order at a specified price to close a position when the price is reached. IOrder SetTakeProfit(IOrder order, double limitPrice, string comment = \"\") Parameters order IOrder The order of the open position to which the take-profit is applied. limitPrice double The price at which the take-profit order is set. comment string Optional comment for the order, providing additional information or notes. Returns IOrder The updated order with the take-profit applied. SetTakeProfitPercent(IOrder, double, string) Sets a take-profit order on an open position based on a specified percentage from the entry price. IOrder SetTakeProfitPercent(IOrder order, double percent, string comment = \"\") Parameters order IOrder The order of the open position to which the take-profit is applied. percent double The percentage away from the entry price to place the take-profit. comment string Optional comment for the order, providing additional information or notes. Returns IOrder The updated order with the take-profit applied. SetTakeProfitTicks(IOrder, int, string) Sets a take-profit order on an open position based on a specified number of ticks from the entry price. IOrder SetTakeProfitTicks(IOrder order, int ticks, string comment = \"\") Parameters order IOrder The order of the open position to which the take-profit is applied. ticks int The number of ticks away from the entry price to place the take-profit. comment string Optional comment for the order, providing additional information or notes. Returns IOrder The updated order with the take-profit applied."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrders.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.Orders.IOrders.html",
    "title": "Interface IOrders | Tickblaze",
    "keywords": "Interface IOrders Namespace Tickblaze.Scripts.Api.Interfaces.Orders Assembly Tickblaze.Scripts.Api.dll Represents a collection of orders. public interface IOrders : IEnumerable<IOrder>, IEnumerable Inherited Members IEnumerable<IOrder>.GetEnumerator() Properties Count Gets the total number of orders in the collection. int Count { get; } this[int] Gets the order at the specified index. IOrder this[int index] { get; } Parameters index int The zero-based index of the order to retrieve. Events Cancelled Occurs when an order is canceled. event Action<IOrder> Cancelled Event Type Action<IOrder> Created Occurs when a new order is created. event Action<IOrder> Created Event Type Action<IOrder> Filled Occurs when an order is filled. event Action<IOrder> Filled Event Type Action<IOrder> Modified Occurs when an existing order is modified. event Action<IOrder> Modified Event Type Action<IOrder>"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.Orders.IPosition.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.Orders.IPosition.html",
    "title": "Interface IPosition | Tickblaze",
    "keywords": "Interface IPosition Namespace Tickblaze.Scripts.Api.Interfaces.Orders Assembly Tickblaze.Scripts.Api.dll Represents a trading position in the market, providing details about its state, pricing, and quantity. public interface IPosition Properties Commission Gets the total commission incurred for the position. double Commission { get; } Direction Gets the direction of the position, indicating whether it is long or short. OrderDirection Direction { get; } EntryPrice Gets the price at which the position was entered. double EntryPrice { get; } ExitPrice Gets the price at which the position was exited. This is zero for an open position. double ExitPrice { get; } Quantity Gets the quantity of the position. double Quantity { get; } Status Gets the current status of the position. PositionStatus Status { get; } Symbol Gets the trading symbol associated with the position. ISymbol Symbol { get; }"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.Orders.IPositions.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.Orders.IPositions.html",
    "title": "Interface IPositions | Tickblaze",
    "keywords": "Interface IPositions Namespace Tickblaze.Scripts.Api.Interfaces.Orders Assembly Tickblaze.Scripts.Api.dll Represents a collection of positions. public interface IPositions : IEnumerable<IPosition>, IEnumerable Inherited Members IEnumerable<IPosition>.GetEnumerator() Properties Count Gets the number of positions in the collection. int Count { get; } this[int] Gets the position at the specified index in the collection. IPosition this[int index] { get; } Parameters index int The zero-based index of the position. Events Closed Occurs when a position is closed. event Action<IPosition> Closed Event Type Action<IPosition> Modified Occurs when an existing position is modified. event Action<IPosition> Modified Event Type Action<IPosition> Opened Occurs when a new position is opened. event Action<IPosition> Opened Event Type Action<IPosition>"
  },
  "api/Tickblaze.Scripts.Api.Interfaces.Orders.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.Orders.html",
    "title": "Namespace Tickblaze.Scripts.Api.Interfaces.Orders | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Interfaces.Orders Interfaces IOrder Represents an order within the trading system, containing details about the order's characteristics and state. IOrderAccessor Provides access to order-related information and functionality within the trading system. IOrderManager Provides methods for managing orders and positions within the trading system. IOrders Represents a collection of orders. IPosition Represents a trading position in the market, providing details about its state, pricing, and quantity. IPositions Represents a collection of positions."
  },
  "api/Tickblaze.Scripts.Api.Interfaces.html": {
    "href": "api/Tickblaze.Scripts.Api.Interfaces.html",
    "title": "Namespace Tickblaze.Scripts.Api.Interfaces | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Interfaces Interfaces IAccount Represents trading account with balance, margin, positions, and equity details. IChart Represents a chart that displays financial data. IChartObject Represents an object displayed on a chart, including its scale, and rendering behavior. IChartPoint Represents a point on a chart with a specific index, time, and value. Used to store data points on the chart, where each point has a unique index and associated time and value. IChartPoints Represents a collection of chart points that can be accessed and manipulated. Each chart point consists of X (time) and Y (value) data values. IChartScale Represents the scale for the price axis in a chart, including the maximum and minimum price. It provides methods to format prices and convert between price values and their corresponding Y coordinates. IDispatcher Provides the ability to execute delegates on the UI thread IDrawingAnnotation Represents a drawing annotation on a chart, typically used for visual elements such as lines, shapes, or markers. It contains a collection of points that define the shape or path of the annotation on the chart. IDrawingContext Defines a context for rendering graphical elements, including shapes, text, and lines. IExchangeCalendar Defines methods for handling exchange calendars, including date/time conversion and session status. IExchangeSession Defines methods and properties for handling exchange sessions, including session times and duration. IMetadata Defines metadata properties for a script, including name, description, and related metadata. IPlot Defines properties for a plot including visual appearance. IPoint Defines properties for a point with X and Y coordinates. IScript Defines properties and methods for a script, including initialization and metadata. ISeries<TItem> Defines a series of items and provides methods to retrieve specific items from the series. ISize Defines properties for the size, including height and width. ISymbol Defines properties and methods related to a symbol, including tick size, point size, and volume normalization."
  },
  "api/Tickblaze.Scripts.Api.Models.Bar.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Bar.html",
    "title": "Class Bar | Tickblaze",
    "keywords": "Class Bar Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Represents a single bar of market data, including the open, high, low, close prices, volume, and time. public record Bar : IEquatable<Bar> Inheritance object Bar Implements IEquatable<Bar> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors Bar(DateTime, double, double, double, double, double) Represents a single bar of market data, including the open, high, low, close prices, volume, and time. public Bar(DateTime Time, double Open, double High, double Low, double Close, double Volume) Parameters Time DateTime The time of the bar. Open double The opening price of the bar. High double The highest price of the bar. Low double The lowest price of the bar. Close double The closing price of the bar. Volume double The traded volume of the bar. Bar(Bar) protected Bar(Bar original) Parameters original Bar Properties Close The closing price of the bar. public double Close { get; init; } EndTime The end time of the bar public DateTime EndTime { get; init; } EqualityContract protected virtual Type EqualityContract { get; } High The highest price of the bar. public double High { get; init; } Low The lowest price of the bar. public double Low { get; init; } Open The opening price of the bar. public double Open { get; init; } Time The time of the bar. public DateTime Time { get; init; } Volume The traded volume of the bar. public double Volume { get; init; } Methods Deconstruct(out DateTime, out double, out double, out double, out double, out double) public void Deconstruct(out DateTime Time, out double Open, out double High, out double Low, out double Close, out double Volume) Parameters Time DateTime Open double High double Low double Close double Volume double Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool Equals(Bar?) public virtual bool Equals(Bar? other) Parameters other Bar Returns bool GetHashCode() public override int GetHashCode() Returns int PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder builder) Parameters builder StringBuilder Returns bool ToString() public override string ToString() Returns string Operators operator ==(Bar?, Bar?) public static bool operator ==(Bar? left, Bar? right) Parameters left Bar right Bar Returns bool operator !=(Bar?, Bar?) public static bool operator !=(Bar? left, Bar? right) Parameters left Bar right Bar Returns bool"
  },
  "api/Tickblaze.Scripts.Api.Models.BarPeriod.PeriodType.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.BarPeriod.PeriodType.html",
    "title": "Enum BarPeriod.PeriodType | Tickblaze",
    "keywords": "Enum BarPeriod.PeriodType Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Defines the different period types for the bar. public enum BarPeriod.PeriodType Fields BidAsk = 18 The bid-ask period. Custom = 19 The custom period type defined by the user. Day = 1 The daily period. HeikinAshi = 12 The Heikin Ashi period, a type of candlestick chart. Kagi = 14 The Kagi chart period. Level2 = 7 The Level 2 period, typically used for market depth data. LineBreak = 15 The Line Break chart period. Minute = 6 The period based on minutes. Momentum = 11 The momentum-based period. Month = 3 The monthly period. None = 0 No period type specified. PointAndFigureClose = 16 The Point and Figure chart with close-based periods. PointAndFigureHighLow = 17 The Point and Figure chart with high-low periods. ProfileDay = 22 The profile-based period with day granularity. ProfileMinute = 21 The profile-based period with minute granularity. ProfileMonth = 24 The profile-based period with month granularity. ProfileRange = 26 The profile-based period with range granularity. ProfileTick = 20 The profile-based period with tick granularity. ProfileVolume = 27 The profile-based period with volume granularity. ProfileWeek = 23 The profile-based period with week granularity. ProfileYear = 25 The profile-based period with year granularity. Range = 9 The range-based period. Renko = 13 The Renko period, another type of chart that ignores time. Second = 5 The period based on seconds. Tick = 8 The tick-based period. Volume = 10 The volume-based period. Week = 2 The weekly period. Year = 4 The yearly period."
  },
  "api/Tickblaze.Scripts.Api.Models.BarPeriod.SourceType.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.BarPeriod.SourceType.html",
    "title": "Enum BarPeriod.SourceType | Tickblaze",
    "keywords": "Enum BarPeriod.SourceType Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Defines the different source types for the bar. public enum BarPeriod.SourceType Fields Ask = 0 The ask price data. Bid = 1 The bid price data. Day = 4 Daily price data. Level2 = 5 Level 2 market data. Minute = 3 Minute-based price data. Trade = 2 Trade data."
  },
  "api/Tickblaze.Scripts.Api.Models.BarPeriod.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.BarPeriod.html",
    "title": "Class BarPeriod | Tickblaze",
    "keywords": "Class BarPeriod Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Represents the period of a bar, including its source type, period type, and size. public sealed class BarPeriod Inheritance object BarPeriod Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors BarPeriod(SourceType, PeriodType, double) Represents the period of a bar, including its source type, period type, and size. public BarPeriod(BarPeriod.SourceType source, BarPeriod.PeriodType type, double size) Parameters source BarPeriod.SourceType type BarPeriod.PeriodType size double Properties Size The size of the bar period (e.g., 5 minutes, 1 day). public double Size { get; } Source The source of the bar period (e.g., Ask, Bid, Trade). public BarPeriod.SourceType Source { get; } Type The type of period for the bar (e.g., Day, Week, Minute). public BarPeriod.PeriodType Type { get; }"
  },
  "api/Tickblaze.Scripts.Api.Models.BarSeries.BarEventArgs.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.BarSeries.BarEventArgs.html",
    "title": "Class BarSeries.BarEventArgs | Tickblaze",
    "keywords": "Class BarSeries.BarEventArgs Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Event arguments for the BarClosed event. public class BarSeries.BarEventArgs : EventArgs Inheritance object EventArgs BarSeries.BarEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors BarEventArgs() public BarEventArgs() Properties Bar The closed bar. public required Bar Bar { get; set; } Index The index of the closed bar. public required int Index { get; set; }"
  },
  "api/Tickblaze.Scripts.Api.Models.BarSeries.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.BarSeries.html",
    "title": "Class BarSeries | Tickblaze",
    "keywords": "Class BarSeries Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Represents a series of bars, with various calculated series such as Low, High, Open, Close, and others. public class BarSeries : Series<Bar>, ISeries<Bar>, IReadOnlyList<Bar?>, IReadOnlyCollection<Bar?>, IEnumerable<Bar?>, IEnumerable Inheritance object Series<Bar> BarSeries Implements ISeries<Bar> IReadOnlyList<Bar> IReadOnlyCollection<Bar> IEnumerable<Bar> IEnumerable Inherited Members Series<Bar>.Values Series<Bar>.Last(int) Series<Bar>.Append(Bar) Series<Bar>.GetEnumerator() Series<Bar>.DefaultValue Series<Bar>.Count object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem) Constructors BarSeries(Symbol, BarPeriod) Initializes a new instance of the BarSeries class with a specified symbol and period. public BarSeries(Symbol symbol, BarPeriod period) Parameters symbol Symbol The symbol of the bar series. period BarPeriod The period of the bars in the series. Properties Close The series of close prices for each bar. public ISeries<double> Close { get; } High The series of high prices for each bar. public ISeries<double> High { get; } this[int] Indexer to access bars in the series by their index. public override Bar? this[int index] { get; set; } Parameters index int The index of the bar. Low The series of low prices for each bar. public ISeries<double> Low { get; } MedianPrice The series of median prices for each bar. public ISeries<double> MedianPrice { get; } Open The series of open prices for each bar. public ISeries<double> Open { get; } Period The period of the bars in the series. public BarPeriod Period { get; } Symbol The symbol associated with the bar series. public Symbol Symbol { get; } Time The series of time for each bar. public ISeries<DateTime> Time { get; } TypicalPrice The series of typical prices for each bar. public ISeries<double> TypicalPrice { get; } Volume The series of volumes for each bar. public ISeries<double> Volume { get; } Methods Slice(DateTime) Slices the series starting from a specific UTC date/time. public IEnumerable<int> Slice(DateTime dateTimeUtc) Parameters dateTimeUtc DateTime The UTC date/time to slice from. Returns IEnumerable<int> A sequence of indexes starting from the given date/time. Events BarClosed Event triggered when a bar is closed. public event Action<BarSeries.BarEventArgs> BarClosed Event Type Action<BarSeries.BarEventArgs>"
  },
  "api/Tickblaze.Scripts.Api.Models.ChartPoint.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.ChartPoint.html",
    "title": "Class ChartPoint | Tickblaze",
    "keywords": "Class ChartPoint Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Represents a point on a chart with a specific index, time, and value. Used to store data points on the chart, where each point has a unique index and associated time and value. public class ChartPoint : Point, IChartPoint, IPoint Inheritance object Point ChartPoint Implements IChartPoint IPoint Inherited Members Point.X Point.Y object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ChartPoint() public ChartPoint() Properties Index The index of the chart point, which serves as the position identifier of the point in the chart's data series. public int Index { get; } Time The time associated with the chart point. It represents the time at which the data point occurred. public IComparable Time { get; set; } Value The value associated with the chart point, representing the data value at the given time. public IComparable Value { get; set; }"
  },
  "api/Tickblaze.Scripts.Api.Models.Color.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Color.html",
    "title": "Struct Color | Tickblaze",
    "keywords": "Struct Color Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Represents a color with alpha, red, green, and blue values. public readonly struct Color : IEquatable<Color> Implements IEquatable<Color> Inherited Members ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors Color(byte, byte, byte, byte) Represents a color with alpha, red, green, and blue values. public Color(byte a, byte r, byte g, byte b) Parameters a byte The alpha value of the color. r byte The red value of the color. g byte The green value of the color. b byte The blue value of the color. Fields Black public static readonly Color Black Field Value Color Blue public static readonly Color Blue Field Value Color CoolGray public static readonly Color CoolGray Field Value Color Cyan public static readonly Color Cyan Field Value Color DarkGray public static readonly Color DarkGray Field Value Color DeepPurple public static readonly Color DeepPurple Field Value Color DimGray public static readonly Color DimGray Field Value Color Empty public static readonly Color Empty Field Value Color Gray public static readonly Color Gray Field Value Color Green public static readonly Color Green Field Value Color Gunmetal public static readonly Color Gunmetal Field Value Color LightGray public static readonly Color LightGray Field Value Color Orange public static readonly Color Orange Field Value Color Pink public static readonly Color Pink Field Value Color Purple public static readonly Color Purple Field Value Color Red public static readonly Color Red Field Value Color Silver public static readonly Color Silver Field Value Color SteelGray public static readonly Color SteelGray Field Value Color TealGreen public static readonly Color TealGreen Field Value Color Transparent public static readonly Color Transparent Field Value Color White public static readonly Color White Field Value Color Yellow public static readonly Color Yellow Field Value Color Properties A The alpha value of the color. public byte A { get; } B The blue value of the color. public byte B { get; } G The green value of the color. public byte G { get; } Hex The HEX value of the color. public string Hex { get; } R The red value of the color. public byte R { get; } Methods CanArgbHexBeParsed(string) Checks if an ARGB hex string can be parsed into a valid color. public static bool CanArgbHexBeParsed(string hex) Parameters hex string The ARGB hex string to check. Returns bool True if the string can be parsed; otherwise, false. Equals(object) Checks if the current color is equal to an object. public override bool Equals(object obj) Parameters obj object The object to compare with. Returns bool True if the object is a color and equals the current color; otherwise, false. Equals(Color) Checks if the current color is equal to another color. public bool Equals(Color other) Parameters other Color The other color to compare with. Returns bool True if the colors are equal; otherwise, false. FromArgb(byte, byte, byte, byte) Creates a color from ARGB values. public static Color FromArgb(byte a, byte r, byte g, byte b) Parameters a byte Alpha value (0-255). r byte Red value (0-255). g byte Green value (0-255). b byte Blue value (0-255). Returns Color A new Color instance with the specified ARGB values. FromDrawingColor(Color) Converts a Color to a Color. public static Color FromDrawingColor(Color color) Parameters color Color The Color instance. Returns Color A new Color instance representing the system drawing color. FromName(string, string?) Creates a color from the specified name. public static Color FromName(string colorName, string? fallbackColorName = null) Parameters colorName string The name of the color. fallbackColorName string The fallback color name if the first is not found. Returns Color A new Color instance corresponding to the name. FromRgb(byte, byte, byte) Creates a color from RGB values. public static Color FromRgb(byte r, byte g, byte b) Parameters r byte Red value (0-255). g byte Green value (0-255). b byte Blue value (0-255). Returns Color A new Color instance with the specified RGB values. FromRgba(byte, byte, byte, byte) Creates a color from RGBA values. public static Color FromRgba(byte r, byte g, byte b, byte a) Parameters r byte Red value (0-255). g byte Green value (0-255). b byte Blue value (0-255). a byte Alpha value (0-255). Returns Color A new Color instance with the specified RGBA values. GetHashCode() Gets the hash code for the color. public override int GetHashCode() Returns int The hash code of the color. New(Color, float) Creates a new Color instance with the specified opacity level. public static Color New(Color color, float opacity) Parameters color Color The base color to adjust. opacity float The desired opacity level as a float (0.0 to 1.0). Returns Color A new Color instance with the specified opacity. ParseArgbHex(string) Parses an ARGB hex string into a Color instance. public static Color ParseArgbHex(string hex) Parameters hex string The ARGB hex string to parse. Returns Color A new Color instance representing the parsed hex string. ParseRgbaHex(string) Parses an RGBA hex string into a Color instance. public static Color ParseRgbaHex(string hex) Parameters hex string The RGBA hex string to parse. Returns Color A new Color instance representing the parsed hex string. ToArgbHex() Converts the color to its ARGB hex representation. public string ToArgbHex() Returns string A string representing the ARGB hex value of the color. ToRgbHex() Converts the color to its RGB hex representation. public string ToRgbHex() Returns string A string representing the RGB hex value of the color. ToRgbaHex() Converts the color to its RGBA hex representation. public string ToRgbaHex() Returns string A string representing the RGBA hex value of the color. TryParse(string, string, out Color) Tries to parse a color from a hex string or color name. public static bool TryParse(string hexOrName, string fallbackColorName, out Color color) Parameters hexOrName string The hex string or color name. fallbackColorName string The fallback color name if parsing fails. color Color The resulting color. Returns bool True if the parsing was successful; otherwise, false. Operators operator ==(Color, Color) Determines whether two Color objects are equal. public static bool operator ==(Color left, Color right) Parameters left Color The first Color to compare. right Color The second Color to compare. Returns bool true if the two Color objects are equal; otherwise, false. implicit operator Color(byte[]) Implicitly converts a byte array to a Color object. public static implicit operator Color(byte[] bytes) Parameters bytes byte[] A byte array representing a color in RGBA or RGB format. Returns Color A Color based on the provided byte array. Exceptions InvalidOperationException Thrown when the byte array does not have 3 or 4 elements. implicit operator Color(Color) Implicitly converts a Color to a Color object. public static implicit operator Color(Color color) Parameters color Color The Color to convert. Returns Color A Color with the same color values as the Color. implicit operator Color(string) Implicitly converts a hexadecimal color string to a Color object. public static implicit operator Color(string hex) Parameters hex string The hexadecimal color string. Returns Color A Color corresponding to the provided hex string. implicit operator byte[](Color) Implicitly converts a Color object to a byte array. public static implicit operator byte[](Color color) Parameters color Color The Color to convert. Returns byte[] A byte array representing the color in RGBA format. implicit operator Color(Color) Implicitly converts a Color object to a Color. public static implicit operator Color(Color color) Parameters color Color The Color to convert. Returns Color A Color with the same color values as the Color. operator !=(Color, Color) Determines whether two Color objects are not equal. public static bool operator !=(Color left, Color right) Parameters left Color The first Color to compare. right Color The second Color to compare. Returns bool true if the two Color objects are not equal; otherwise, false."
  },
  "api/Tickblaze.Scripts.Api.Models.DataSeries.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.DataSeries.html",
    "title": "Class DataSeries | Tickblaze",
    "keywords": "Class DataSeries Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Represents a series of double values for data points, with a default value of NaN. public class DataSeries : Series<double>, ISeries<double>, IReadOnlyList<double>, IReadOnlyCollection<double>, IEnumerable<double>, IEnumerable Inheritance object Series<double> DataSeries Implements ISeries<double> IReadOnlyList<double> IReadOnlyCollection<double> IEnumerable<double> IEnumerable Derived PlotSeries Inherited Members Series<double>.Values Series<double>.Last(int) Series<double>.Append(double) Series<double>.GetEnumerator() Series<double>.Count Series<double>.this[int] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem) Constructors DataSeries() public DataSeries() Properties DefaultValue The default value for the series, which is NaN. protected override double DefaultValue { get; }"
  },
  "api/Tickblaze.Scripts.Api.Models.Font.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Font.html",
    "title": "Class Font | Tickblaze",
    "keywords": "Class Font Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Represents a font with a family name, size, style, and weight. public class Font Inheritance object Font Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Font(string, int, FontStyle, FontWeight) Represents a font with a family name, size, style, and weight. public Font(string familyName = \"Segoe UI\", int size = 12, FontStyle style = FontStyle.Normal, FontWeight weight = FontWeight.Regular) Parameters familyName string The font family name. Defaults to \"Segoe UI\". size int The font size. Defaults to 12. style FontStyle The font style. Defaults to Normal. weight FontWeight The font weight. Defaults to Regular. Properties FamilyName Gets or sets the font family name. public string FamilyName { get; set; } Size Gets or sets the font size. public int Size { get; set; } Style Gets or sets the font style. public FontStyle Style { get; set; } Weight Gets or sets the font weight. public FontWeight Weight { get; set; }"
  },
  "api/Tickblaze.Scripts.Api.Models.Metadata.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Metadata.html",
    "title": "Class Metadata | Tickblaze",
    "keywords": "Class Metadata Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Represents metadata about a given object, including its name, type, assembly, and version. public class Metadata Inheritance object Metadata Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Metadata() Initializes a new instance of the Metadata class. public Metadata() Properties Assembly The assembly name containing the metadata. public string Assembly { get; } Description A description of the metadata. public string Description { get; } Name The name of the metadata. public string Name { get; } ResourceId The resource ID associated with the metadata. public int ResourceId { get; } ShortName The short name of the metadata, typically consisting of uppercase characters from the name. public string ShortName { get; } Type The full type name of the metadata. public string Type { get; } Version The version of the metadata. public string Version { get; }"
  },
  "api/Tickblaze.Scripts.Api.Models.PlotLevel.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.PlotLevel.html",
    "title": "Class PlotLevel | Tickblaze",
    "keywords": "Class PlotLevel Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Represents a level on a plot with configurable value, color, line style, thickness, and visibility. public class PlotLevel : IPlot, ICloneable Inheritance object PlotLevel Implements IPlot ICloneable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PlotLevel(double, string, LineStyle, int) Initializes a new instance of the PlotLevel class with the specified value, color string, line style, and thickness. public PlotLevel(double value, string color, LineStyle lineStyle = LineStyle.Dash, int thickness = 1) Parameters value double The value of the plot level. color string The color string of the plot level. lineStyle LineStyle The line style for the plot level (default is Dash). thickness int The thickness of the plot level line (default is 1). PlotLevel(double, Color, LineStyle, int) Initializes a new instance of the PlotLevel class with the specified value, color, line style, and thickness. public PlotLevel(double value, Color color, LineStyle lineStyle = LineStyle.Dash, int thickness = 1) Parameters value double The value of the plot level. color Color The color of the plot level. lineStyle LineStyle The line style for the plot level (default is Dash). thickness int The thickness of the plot level line (default is 1). PlotLevel(string, double, Color, LineStyle, int, bool) Initializes a new instance of the PlotLevel class with the specified name, value, color, line style, thickness, and visibility. public PlotLevel(string name, double value, Color color, LineStyle lineStyle = LineStyle.Dash, int thickness = 1, bool isVisible = true) Parameters name string The name of the plot level. value double The value of the plot level. color Color The color of the plot level. lineStyle LineStyle The line style for the plot level (default is Dash). thickness int The thickness of the plot level line (default is 1). isVisible bool Indicates whether the plot level is visible (default is true). Properties Color The color of the plot level. public Color Color { get; set; } IsVisible Indicates whether the plot level is visible. public bool IsVisible { get; set; } LineStyle The line style for the plot level. public LineStyle LineStyle { get; set; } Name The name of the plot level. [JsonIgnore] public string Name { get; } Thickness The thickness of the plot level line. public int Thickness { get; set; } Value The value of the plot level. public double Value { get; set; } Methods Clone() Creates a copy of the current PlotLevel instance. public object Clone() Returns object A new instance of PlotLevel with the same values."
  },
  "api/Tickblaze.Scripts.Api.Models.PlotSeries.PlotColors.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.PlotSeries.PlotColors.html",
    "title": "Class PlotSeries.PlotColors | Tickblaze",
    "keywords": "Class PlotSeries.PlotColors Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll A class representing a collection of plot colors for the PlotSeries. public class PlotSeries.PlotColors : Series<Color>, ISeries<Color>, IReadOnlyList<Color>, IReadOnlyCollection<Color>, IEnumerable<Color>, IEnumerable Inheritance object Series<Color> PlotSeries.PlotColors Implements ISeries<Color> IReadOnlyList<Color> IReadOnlyCollection<Color> IEnumerable<Color> IEnumerable Inherited Members Series<Color>.Values Series<Color>.Last(int) Series<Color>.Append(Color) Series<Color>.GetEnumerator() Series<Color>.Count object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem) Constructors PlotColors(PlotSeries) A class representing a collection of plot colors for the PlotSeries. public PlotColors(PlotSeries plotSeries) Parameters plotSeries PlotSeries Properties DefaultValue The default value for the series. protected override Color DefaultValue { get; } this[int] Gets or sets the plot color at the specified index. public override Color this[int index] { get; set; } Parameters index int The index of the color in the series."
  },
  "api/Tickblaze.Scripts.Api.Models.PlotSeries.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.PlotSeries.html",
    "title": "Class PlotSeries | Tickblaze",
    "keywords": "Class PlotSeries Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Represents a series of plot data, including properties for color, line style, thickness, and visibility. public class PlotSeries : DataSeries, ISeries<double>, IReadOnlyList<double>, IReadOnlyCollection<double>, IEnumerable<double>, IEnumerable, IPlot, ICloneable Inheritance object Series<double> DataSeries PlotSeries Implements ISeries<double> IReadOnlyList<double> IReadOnlyCollection<double> IEnumerable<double> IEnumerable IPlot ICloneable Inherited Members DataSeries.DefaultValue Series<double>.Values Series<double>.Last(int) Series<double>.Append(double) Series<double>.GetEnumerator() Series<double>.Count Series<double>.this[int] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem) Constructors PlotSeries() Initializes a new instance of the PlotSeries class. public PlotSeries() PlotSeries(string, Color, PlotStyle, LineStyle, int, bool) Initializes a new instance of the PlotSeries class with the specified name, color, plot style, line style, thickness, and visibility. public PlotSeries(string name, Color color, PlotStyle plotStyle = PlotStyle.Line, LineStyle lineStyle = LineStyle.Solid, int thickness = 1, bool isVisible = true) Parameters name string The name of the plot series. color Color The color of the plot series. plotStyle PlotStyle The style of the plot. lineStyle LineStyle The line style for the plot series. thickness int The thickness of the plot series line. isVisible bool Indicates whether the plot series is visible. PlotSeries(Color) Initializes a new instance of the PlotSeries class with the specified color. public PlotSeries(Color color) Parameters color Color The color of the plot series. PlotSeries(Color, LineStyle, int) Initializes a new instance of the PlotSeries class with the specified color, line style, and thickness. public PlotSeries(Color color, LineStyle lineStyle = LineStyle.Solid, int thickness = 1) Parameters color Color The color of the plot series. lineStyle LineStyle The line style for the plot series. thickness int The thickness of the plot series line. PlotSeries(Color, PlotStyle, int) Initializes a new instance of the PlotSeries class with the specified color, plot style, and thickness. public PlotSeries(Color color, PlotStyle plotStyle = PlotStyle.Line, int thickness = 1) Parameters color Color The color of the plot series. plotStyle PlotStyle The style of the plot. thickness int The thickness of the plot series line. Properties Color The color of the plot series. public Color Color { get; set; } Colors The collection of plot colors. public PlotSeries.PlotColors Colors { get; set; } IsLineBreak A series representing line break points in the plot series. [Obsolete] public Series<bool> IsLineBreak { get; set; } IsVisible Indicates whether the plot series is visible. public bool IsVisible { get; set; } LineStyle The line style for the plot series. public LineStyle LineStyle { get; set; } Name The name of the plot series. [JsonIgnore] public string Name { get; } PlotStyle The style of the plot (line, bars, etc.). public PlotStyle PlotStyle { get; set; } Thickness The thickness of the plot series line. public int Thickness { get; set; } Methods Clone() Creates a copy of the current PlotSeries instance. public object Clone() Returns object A new instance of PlotSeries with the same values."
  },
  "api/Tickblaze.Scripts.Api.Models.Point.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Point.html",
    "title": "Class Point | Tickblaze",
    "keywords": "Class Point Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Represents a point in a 2D space with X and Y coordinates. public class Point : IPoint Inheritance object Point Implements IPoint Derived ChartPoint Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Point() Initializes a new instance of the Point class. public Point() Point(double, double) Initializes a new instance of the Point class with the specified coordinates. public Point(double x, double y) Parameters x double The X coordinate of the point. y double The Y coordinate of the point. Point(IPoint) Initializes a new instance of the Point class with the specified point. public Point(IPoint point) Parameters point IPoint The point to copy coordinates from. Properties X The X coordinate of the point. public virtual double X { get; set; } Y The Y coordinate of the point. public virtual double Y { get; set; } Operators operator +(Point, Point) Adds two points together. public static Point operator +(Point p1, Point p2) Parameters p1 Point The first point. p2 Point The second point. Returns Point A new Point that is the result of adding p1 and p2. operator -(Point, Point) Subtracts one point from another. public static Point operator -(Point p1, Point p2) Parameters p1 Point The point to subtract from. p2 Point The point to subtract. Returns Point A new Point that is the result of subtracting p2 from p1."
  },
  "api/Tickblaze.Scripts.Api.Models.Series-1.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Series-1.html",
    "title": "Class Series<T> | Tickblaze",
    "keywords": "Class Series<T> Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Represents a series of values of type T. Provides methods to append, access, and enumerate over the values in the series. public class Series<T> : ISeries<T>, IReadOnlyList<T?>, IReadOnlyCollection<T?>, IEnumerable<T?>, IEnumerable Type Parameters T The type of the values in the series. Inheritance object Series<T> Implements ISeries<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Derived BarSeries DataSeries PlotSeries.PlotColors Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem) Constructors Series() public Series() Fields Values The list of values in the series. protected List<T?> Values Field Value List<T> Properties Count Gets the count of values in the series. public int Count { get; } DefaultValue The default value for the series. protected virtual T? DefaultValue { get; } this[int] Indexer for accessing values by index. public virtual T? this[int index] { get; set; } Parameters index int The index of the value to retrieve. Methods Append(T?) Appends a value to the series. public void Append(T? value) Parameters value T The value to append. GetEnumerator() Gets an enumerator for the series values. public IEnumerator<T?> GetEnumerator() Returns IEnumerator<T> An enumerator for the series values. Last(int) Gets the last value in the series, offset by the specified number of bars. public T? Last(int barsAgo = 0) Parameters barsAgo int The number of bars ago to retrieve the value for. Returns T The value at the specified index from the end of the series."
  },
  "api/Tickblaze.Scripts.Api.Models.SeriesTransform-2.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.SeriesTransform-2.html",
    "title": "Class SeriesTransform<TSource, TDestination> | Tickblaze",
    "keywords": "Class SeriesTransform<TSource, TDestination> Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Represents a transformation of a source series into a destination series, where each element of the source series is transformed using a selector function. public sealed class SeriesTransform<TSource, TDestination> : ISeries<TDestination>, IReadOnlyList<TDestination?>, IReadOnlyCollection<TDestination?>, IEnumerable<TDestination?>, IEnumerable Type Parameters TSource The type of the elements in the source series. TDestination The type of the elements in the destination series. Inheritance object SeriesTransform<TSource, TDestination> Implements ISeries<TDestination> IReadOnlyList<TDestination> IReadOnlyCollection<TDestination> IEnumerable<TDestination> IEnumerable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods CollectionExtensions.BinarySearch<TItem>(IReadOnlyList<TItem>, TItem) Constructors SeriesTransform(ISeries<TSource>, Func<TSource, TDestination>) Initializes a new instance of the SeriesTransform<TSource, TDestination> class. public SeriesTransform(ISeries<TSource> series, Func<TSource, TDestination> selector) Parameters series ISeries<TSource> The source series to transform. selector Func<TSource, TDestination> The function used to transform each element of the source series. Properties Count The number of elements in the transformed series. public int Count { get; } this[int] Retrieves the element at the specified index in the transformed series. public TDestination? this[int index] { get; } Parameters index int The index of the element to retrieve. Methods GetEnumerator() Returns an enumerator that iterates through the transformed series. public IEnumerator<TDestination?> GetEnumerator() Returns IEnumerator<TDestination> An enumerator for the transformed series. Last(int) Retrieves the last element in the transformed series, offset by the specified number of bars. public TDestination? Last(int barsAgo = 0) Parameters barsAgo int The number of bars ago to retrieve the element from. Returns TDestination The transformed last element."
  },
  "api/Tickblaze.Scripts.Api.Models.Size.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Size.html",
    "title": "Struct Size | Tickblaze",
    "keywords": "Struct Size Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Represents the size of an object with width and height. public struct Size : ISize Implements ISize Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors Size() Initializes a new instance of the Size struct. public Size() Size(double, double) Initializes a new instance of the Size struct with specified width and height. public Size(double width, double height) Parameters width double The width of the size. height double The height of the size. Properties Height The height of the size. public double Height { readonly get; set; } Width The width of the size. public double Width { readonly get; set; }"
  },
  "api/Tickblaze.Scripts.Api.Models.Symbol.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.Symbol.html",
    "title": "Class Symbol | Tickblaze",
    "keywords": "Class Symbol Namespace Tickblaze.Scripts.Api.Models Assembly Tickblaze.Scripts.Api.dll Defines properties and methods related to a symbol, including tick size, point size, and volume normalization. public class Symbol : ISymbol Inheritance object Symbol Implements ISymbol Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties CurrencyCode The currency code of the symbol. public required string CurrencyCode { get; init; } Decimals The number of decimals for the symbol. public required int Decimals { get; init; } Description The description of the symbol. public string Description { get; } ExchangeCalendar The exchange calendar for the symbol. public required IExchangeCalendar ExchangeCalendar { get; init; } MinimumVolume The minimum volume for the symbol. public decimal MinimumVolume { get; init; } Name The name of the symbol. public string Name { get; } PointSize The point size of the symbol. public double PointSize { get; } PointValue The point value of the symbol. public double PointValue { get; } TickSize The tick size of the symbol. public required double TickSize { get; init; } TickValue The tick value of the symbol. public required double TickValue { get; init; } TicksPerPoint The number of ticks per point for the symbol. public double TicksPerPoint { get; } Methods FormatPrice(double) Formats a price as a string for the symbol. public string FormatPrice(double price) Parameters price double The price to format. Returns string The formatted price as a string. NormalizeVolume(double, RoundingMode) Normalizes a volume to the symbol's tradable volume, applying the specified rounding mode. public decimal NormalizeVolume(double volume, RoundingMode roundingMode) Parameters volume double The volume to normalize. roundingMode RoundingMode The rounding mode to apply. Returns decimal The normalized volume. RoundToTick(double) Rounds a value to the nearest tick. public double RoundToTick(double value) Parameters value double The value to round. Returns double The value rounded to the nearest tick."
  },
  "api/Tickblaze.Scripts.Api.Models.html": {
    "href": "api/Tickblaze.Scripts.Api.Models.html",
    "title": "Namespace Tickblaze.Scripts.Api.Models | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api.Models Classes Bar Represents a single bar of market data, including the open, high, low, close prices, volume, and time. BarPeriod Represents the period of a bar, including its source type, period type, and size. BarSeries Represents a series of bars, with various calculated series such as Low, High, Open, Close, and others. BarSeries.BarEventArgs Event arguments for the BarClosed event. ChartPoint Represents a point on a chart with a specific index, time, and value. Used to store data points on the chart, where each point has a unique index and associated time and value. DataSeries Represents a series of double values for data points, with a default value of NaN. Font Represents a font with a family name, size, style, and weight. Metadata Represents metadata about a given object, including its name, type, assembly, and version. PlotLevel Represents a level on a plot with configurable value, color, line style, thickness, and visibility. PlotSeries Represents a series of plot data, including properties for color, line style, thickness, and visibility. PlotSeries.PlotColors A class representing a collection of plot colors for the PlotSeries. Point Represents a point in a 2D space with X and Y coordinates. SeriesTransform<TSource, TDestination> Represents a transformation of a source series into a destination series, where each element of the source series is transformed using a selector function. Series<T> Represents a series of values of type T. Provides methods to append, access, and enumerate over the values in the series. Symbol Defines properties and methods related to a symbol, including tick size, point size, and volume normalization. Structs Color Represents a color with alpha, red, green, and blue values. Size Represents the size of an object with width and height. Enums BarPeriod.PeriodType Defines the different period types for the bar. BarPeriod.SourceType Defines the different source types for the bar."
  },
  "api/Tickblaze.Scripts.Api.Parameter.html": {
    "href": "api/Tickblaze.Scripts.Api.Parameter.html",
    "title": "Class Parameter | Tickblaze",
    "keywords": "Class Parameter Namespace Tickblaze.Scripts.Api Assembly Tickblaze.Scripts.Api.dll Represents a parameter with associated attributes, value, and an optional numeric range and property reference. public class Parameter Inheritance object Parameter Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Parameter() Default constructor for a parameter. public Parameter() Parameter(object, PropertyInfo, ParameterAttribute) Initializes a new instance of the Parameter class with the specified object, property, and attributes. public Parameter(object obj, PropertyInfo property, ParameterAttribute attributes) Parameters obj object The object that owns the property. property PropertyInfo The property representing the parameter. attributes ParameterAttribute The attributes associated with the parameter. Properties Attributes The attributes associated with the parameter. public ParameterAttribute Attributes { get; } IsEnabled Gets or sets a value indicating whether this element is enabled in the user interface (UI). public bool IsEnabled { get; set; } IsVisible Gets or sets a value indicating whether this element is visible in the user interface (UI). public bool IsVisible { get; set; } NumericRange The optional numeric range attribute for the parameter. public NumericRangeAttribute? NumericRange { get; } Property The property information of the parameter if available. public PropertyInfo? Property { get; } Value The value of the parameter. public object Value { get; set; }"
  },
  "api/Tickblaze.Scripts.Api.Parameters.html": {
    "href": "api/Tickblaze.Scripts.Api.Parameters.html",
    "title": "Class Parameters | Tickblaze",
    "keywords": "Class Parameters Namespace Tickblaze.Scripts.Api Assembly Tickblaze.Scripts.Api.dll Represents a collection of parameters, either from an object or a dictionary of key-value pairs. [JsonSerializable(typeof(IReadOnlyDictionary<string, Parameter>))] public class Parameters : IndexedDictionary<string, Parameter>, IDictionary<string, Parameter>, ICollection<KeyValuePair<string, Parameter>>, IDictionary, ICollection, IReadOnlyDictionary<string, Parameter>, IReadOnlyCollection<KeyValuePair<string, Parameter>>, IEnumerable<KeyValuePair<string, Parameter>>, IEnumerable, ISerializable, IDeserializationCallback Inheritance object Dictionary<string, Parameter> IndexedDictionary<string, Parameter> Parameters Implements IDictionary<string, Parameter> ICollection<KeyValuePair<string, Parameter>> IDictionary ICollection IReadOnlyDictionary<string, Parameter> IReadOnlyCollection<KeyValuePair<string, Parameter>> IEnumerable<KeyValuePair<string, Parameter>> IEnumerable ISerializable IDeserializationCallback Inherited Members IndexedDictionary<string, Parameter>.this[int] Dictionary<string, Parameter>.Add(string, Parameter) Dictionary<string, Parameter>.Clear() Dictionary<string, Parameter>.ContainsKey(string) Dictionary<string, Parameter>.ContainsValue(Parameter) Dictionary<string, Parameter>.GetEnumerator() Dictionary<string, Parameter>.OnDeserialization(object) Dictionary<string, Parameter>.Remove(string) Dictionary<string, Parameter>.Remove(string, out Parameter) Dictionary<string, Parameter>.TryGetValue(string, out Parameter) Dictionary<string, Parameter>.TryAdd(string, Parameter) Dictionary<string, Parameter>.EnsureCapacity(int) Dictionary<string, Parameter>.TrimExcess() Dictionary<string, Parameter>.TrimExcess(int) Dictionary<string, Parameter>.Comparer Dictionary<string, Parameter>.Count Dictionary<string, Parameter>.Keys Dictionary<string, Parameter>.Values Dictionary<string, Parameter>.this[string] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Parameters(object?) Initializes a new instance of the Parameters class. public Parameters(object? obj) Parameters obj object The object or dictionary from which parameters are derived."
  },
  "api/Tickblaze.Scripts.Api.html": {
    "href": "api/Tickblaze.Scripts.Api.html",
    "title": "Namespace Tickblaze.Scripts.Api | Tickblaze",
    "keywords": "Namespace Tickblaze.Scripts.Api Classes CollectionExtensions Extensions for collections. IndexedDictionary<TKey, TValue> A dictionary with an indexer that allows accessing elements by their index in addition to the key. Parameter Represents a parameter with associated attributes, value, and an optional numeric range and property reference. Parameters Represents a collection of parameters, either from an object or a dictionary of key-value pairs."
  },
  "docs/get-started/cli.html": {
    "href": "docs/get-started/cli.html",
    "title": "Getting started using CLI | Tickblaze",
    "keywords": "Getting started using CLI Follow these steps to create your first custom indicator for Tickblaze using CLI. Prerequisites Familiarity with the command line Install .NET SDK 8.0 1. Create a New Class Library Create a new class class library targeting .NET 8.0: dotnet new classlib -n CustomIndicator -f net8.0 And navigate to its directory: cd CustomIndicator 2. Add the Tickblaze.Scripts NuGet Package Add the Tickblaze.Scripts.Api NuGet package to your project: dotnet add package Tickblaze.Scripts.Api --version * The --version * ensures you always get the latest version. 3. Create Your Indicator Open the Class1.cs file in your project, and replace its contents with the following code: namespace CustomIndicator; /// <summary> /// A custom indicator that calculates the typical price for a bar. /// </summary> public partial class TypicalPrice : Indicator { [Plot(\"Result\")] public PlotSeries Result { get; set; } = new(Color.Blue, LineStyle.Solid, 1); public TypicalPrice() { Name = \"Typical Price\"; IsOverlay = true; } /// <summary> /// Calculates the typical price for the given bar. /// </summary> protected override void Calculate(int index) { var bar = Bars[index]; Result[index] = (bar.High + bar.Low + bar.Close) / 3; } } This code defines a new indicator called Typical Price that calculates the average of a bar's high, low, and close prices. 4. Build Your Project Build your project to compile the indicator: dotnet build This will generate the necessary output files and prepare your indicator for use in Tickblaze. 5. Run the Indicator in Tickblaze After building your project, the indicator should be automatically imported into Tickblaze. To use it: Right-click on the chart in Tickblaze. Select Indicators and click Add / Edit Settings. From the dropdown menu, select Typical Price. Click the down arrow to add it to the chart. Click the OK button."
  },
  "docs/get-started/vs-code.html": {
    "href": "docs/get-started/vs-code.html",
    "title": "Getting started using VS Code | Tickblaze",
    "keywords": "Getting started using VS Code Follow these steps to create your first custom indicator for Tickblaze using VS Code. Prerequisites VS Code Install .NET SDK 8.0 1. Create a New Class Library Create a new class class library targeting .NET 8.0: dotnet new classlib -n CustomIndicator -f net8.0 And navigate to its directory: cd CustomIndicator 2. Add the Tickblaze.Scripts NuGet Package Add the Tickblaze.Scripts.Api NuGet package to your project: dotnet add package Tickblaze.Scripts.Api --version * The --version * ensures you always get the latest version. 3. Create Your Indicator Open the Class1.cs file in your project, and replace its contents with the following code: namespace CustomIndicator; /// <summary> /// A custom indicator that calculates the typical price for a bar. /// </summary> public partial class TypicalPrice : Indicator { [Plot(\"Result\")] public PlotSeries Result { get; set; } = new(Color.Blue, LineStyle.Solid, 1); public TypicalPrice() { Name = \"Typical Price\"; IsOverlay = true; } /// <summary> /// Calculates the typical price for the given bar. /// </summary> protected override void Calculate(int index) { var bar = Bars[index]; Result[index] = (bar.High + bar.Low + bar.Close) / 3; } } This code defines a new indicator called Typical Price that calculates the average of a bar's high, low, and close prices. 4. Build Your Project Build your project to compile the indicator: dotnet build This will generate the necessary output files and prepare your indicator for use in Tickblaze. 5. Run the Indicator in Tickblaze After building your project, the indicator should be automatically imported into Tickblaze. To use it: Right-click on the chart in Tickblaze. Select Indicators and click Add / Edit Settings. From the dropdown menu, select Typical Price. Click the down arrow to add it to the chart. Click the OK button. 6. Debug the Indicator Start Debugging Run Tickblaze as usual if not running yet. Attach your debugger to the Tickblaze.View.exe process: Open the Run and Debug view in VS Code (Ctrl+Shift+D) Click Create a launch.json file if prompted, and configure it ot attach to an existing .NET process. In the launch.json file and add the following configuration: { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Tickblaze Attach\", \"type\": \"coreclr\", \"request\": \"attach\", \"processName\": \"Tickblaze.View.exe\" } ] } Click the green play button to attach the debugger. Debugging Steps Set breakpoints in your TypicalPrice.cs file by clicking to the left of the line numbers. Trigger the indicator in Tickblaze by adding it to a chart. Use the debugger controls in Visual Studio Code to step through your code, inspect variables, and analyze execution. Stop Debugging When you’re done, stop debugging by clicking the Stop button in Visual Studio Code or by pressing Shift+F5."
  },
  "docs/how-to-debug.html": {
    "href": "docs/how-to-debug.html",
    "title": "How to Debug | Tickblaze",
    "keywords": "How to Debug Debugging your custom indicators and strategies is straightforward: Run Tickblaze as usual. Attach your debugger to the Tickblaze.View.exe process: Open your IDE (e.g., Visual Studio or Rider). Attach to the Tickblaze.View.exe process. Set breakpoints in your code to inspect values or troubleshoot issues."
  },
  "docs/tutorials/aroon-indicator.html": {
    "href": "docs/tutorials/aroon-indicator.html",
    "title": "Writing Aroon Indicator for Tickblaze | Tickblaze",
    "keywords": "Writing Aroon Indicator for Tickblaze This guide walks you through writing the Aroon Indicator (ARN) for Tickblaze. We’ll explain the Tickblaze API syntax in detail to help new developers understand and build their custom indicators. Prerequisite Knowledge Before proceeding, here are a few key concepts: Tickblaze API: A powerful scripting API to build indicators, strategies, and other tools. Bars: Represents a collection of price bars (e.g., candlesticks) with attributes like High, Low, and Close. Indicators: Extend the Indicator base class, allowing you to define parameters, calculations, and plots. Step-by-Step Guide 1. Define the Namespace Start by declaring a namespace for your indicator: namespace MyScripts.Indicators; Why Use a Unique Namespace? Full Type Name: Tickblaze uses the fully qualified type name (e.g., MyScripts.Indicators.Aroon) to uniquely identify your script. Avoid Name Conflicts: A well-structured namespace prevents conflicts with other indicators or scripts in the Tickblaze ecosystem. 2. Create the Aroon Class Define a new class named Aroon and inherit from the Indicator base class. Add the partial modifier to enable automatic constructor generation. public partial class Aroon : Indicator Why Use the partial modifier? The partial modifier signals to the Tickblaze source generator that this class can have its code automatically extended. Specifically, constructors based on parameters ([Parameter]) will be generated for you. 3. Add Parameters Parameters let users configure the indicator. Add a period parameter: [Parameter(\"Period\"), NumericRange(1, int.MaxValue)] public int Period { get; set; } = 14; Breakdown: [Parameter(\"Period\")]: Declares a user-configurable parameter named \"Period\" in the UI. Users can adjust this value when adding the indicator to a chart. [NumericRange(1, int.MaxValue)]: Ensures the parameter value is always between 1 and the maximum possible integer, preventing invalid inputs. public int Period: int specifies this parameter is an integer. The default value is set to 14. 4. Define Output Plots Plots represent lines or values drawn on the chart. Add two plots: Aroon Up and Aroon Down. [Plot(\"Aroon Up\")] public PlotSeries Up { get; set; } = new(Color.Orange, PlotStyle.Line); [Plot(\"Aroon Down\")] public PlotSeries Down { get; set; } = new(Color.Blue, PlotStyle.Line); Breakdown: [Plot(\"Aroon Up\")]: Registers a plot named \"Aroon Up\". Displays this line in the chart’s legend. PlotSeries: Represents the data series plotted on the chart. Accepts parameters like Color and PlotStyle. new(Color.Orange, PlotStyle.Line): Sets the line's color to orange and style to a solid line. 5. Add the Constructor Initialize the indicator with default metadata: public Aroon() { Name = \"Aroon\"; ShortName = \"ARN\"; IsOverlay = false; IsPercentage = true; } Breakdown: Name: The full name of the indicator displayed in the UI. ShortName: A short abbreviation for compact views. IsOverlay: Indicates whether the indicator will overlay the bars or be placed in a new chart panel. IsPercentage: Indicates that the plot values are percentages (0-100). 6. Implement the Calculation Logic The Calculate method contains the main logic for the indicator. Tickblaze automatically calls this method for each bar on the chart. protected override void Calculate(int index) Parameters: int index: Represents the current bar being calculated. You can access the price data for this bar using Bars. Step-by-Step Logic Inside Calculate: 1. Skip Bars Without Enough Data if (index < Period) { return; } Ensures the logic only runs when there are enough bars to calculate the Aroon values. 2. Initialize Variables var currentHigh = Bars.High[index]; var currentLow = Bars.Low[index]; var barsSinceHigh = 0; var barsSinceLow = 0; Bars.High[index]: Fetches the high price of the current bar. Bars.Low[index]: Fetches the low price of the current bar. barsSinceHigh and barsSinceLow: Track how many bars ago the highest and lowest prices occurred. 3. Loop Through the Period for (var i = 0; i < Period; i++) { if (Bars.High[index - i] >= currentHigh) { currentHigh = Bars.High[index - i]; barsSinceHigh = i; } if (Bars.Low[index - i] <= currentLow) { currentLow = Bars.Low[index - i]; barsSinceLow = i; } } Loop: Iterates through the last Period bars. Update High/Low: If a new high or low is found, update currentHigh or currentLow and record the number of bars since it occurred. 4. Calculate Aroon Up and Down Up[index] = (Period - barsSinceHigh - 1) * 100.0 / (Period - 1); Down[index] = (Period - barsSinceLow - 1) * 100.0 / (Period - 1); Aroon Up: The percentage of time since the most recent high. Aroon Down: The percentage of time since the most recent low. Multiply by 100.0 to normalize the values to percentages. Full Source Code For your convenience, the complete source code of the Aroon Indicator is available on GitHub. You can review it, download it, or fork the repository to modify and enhance it further. View the Full Source Code on GitHub"
  },
  "docs/tutorials/custom-rendering.html": {
    "href": "docs/tutorials/custom-rendering.html",
    "title": "Custom Rendering | Tickblaze",
    "keywords": "Custom Rendering In this tutorial, we will learn how to use custom rendering in Tickblaze.Scripts.Api. Custom rendering allows you to draw custom graphics on the chart during each render cycle. Creating a Custom Drawing Let's create a custom drawing tool called ClosePriceLine. This tool will draw a line connecting the close prices of the bars within the selected range. Step 1: Define the Drawing Class First, define the ClosePriceLine class that inherits from the Drawing class. namespace Tickblaze.Scripts.Tests; public class ClosePriceLine : Drawing { [Parameter(\"Line Color\", Description = \"Color of the custom line\")] public Color LineColor { get; set; } = Color.Blue; [Parameter(\"Line Thickness\", Description = \"Thickness of the custom line\"), NumericRange(1)] public int LineThickness { get; set; } = 2; [Parameter(\"Line Style\", Description = \"Style of the custom line\")] public LineStyle LineStyle { get; set; } = LineStyle.Solid; public override int PointsCount => 2; public override void SetPoint(IComparable xDataValue, IComparable yDataValue, int index) { var barIndex = Chart.GetBarIndexByXCoordinate(Points[index].X); var bar = Bars[barIndex]; Points[index].Value = bar.Close; } public override void OnRender(IDrawingContext context) { if (Points.Count < PointsCount) { return; } var points = new List<Point>(); var fromBarIndex = Chart.GetBarIndexByXCoordinate(Points[0].X); var toBarIndex = Chart.GetBarIndexByXCoordinate(Points[1].X); if (fromBarIndex > toBarIndex) { (fromBarIndex, toBarIndex) = (toBarIndex, fromBarIndex); } for (var barIndex = fromBarIndex; barIndex <= toBarIndex; barIndex++) { var point = new Point() { X = Chart.GetXCoordinateByBarIndex(barIndex), Y = ChartScale.GetYCoordinateByValue(Bars[barIndex].Close) }; points.Add(point); } context.DrawPolygon(points, null, LineColor, LineThickness, LineStyle); } } Step 2: Implement the OnRender Method The OnRender method is where you define the custom rendering logic. This method is called during each render cycle, allowing you to draw custom graphics on the chart. In the ClosePriceLine class, the OnRender method draws the close price line between two anchor points. Step 3: Add the Drawing Tool to the Chart To use the custom drawing tool, add it to the chart in the Tickblaze platform. You can do this by selecting the ClosePriceLine tool from the drawing tools menu and placing it on the chart. Applying Custom Rendering to Other Script Types The OnRender method can be overridden in various script types such as Indicators, Strategies, and Drawings. This allows you to apply custom rendering logic across different types of scripts in Tickblaze. Example: Custom Indicator Let's create a custom indicator that uses the OnRender method to draw custom graphics on the chart. namespace Tickblaze.Scripts.Indicators; public partial class ClosePriceLine : Indicator { [Parameter(\"Line Color\", Description = \"Color of the custom line\")] public Color LineColor { get; set; } = Color.Blue; [Parameter(\"Line Thickness\", Description = \"Thickness of the custom line\"), NumericRange(1)] public int LineThickness { get; set; } = 2; [Parameter(\"Line Style\", Description = \"Style of the custom line\")] public LineStyle LineStyle { get; set; } = LineStyle.Solid; public override void OnRender(IDrawingContext context) { var points = new List<Point>(); for (var barIndex = Chart.FirstVisibleBarIndex; barIndex <= Chart.LastVisibleBarIndex; barIndex++) { var point = new Point() { X = Chart.GetXCoordinateByBarIndex(barIndex), Y = ChartScale.GetYCoordinateByValue(Bars[barIndex].Close) }; points.Add(point); } context.DrawPolygon(points, null, LineColor, LineThickness, LineStyle); } } Example: Custom Strategy Similarly, you can create a custom strategy that uses the OnRender method to draw custom graphics on the chart. namespace Tickblaze.Scripts.Strategies; public class ClosePriceLine : Strategy { [Parameter(\"Line Color\", Description = \"Color of the custom line\")] public Color LineColor { get; set; } = Color.Blue; [Parameter(\"Line Thickness\", Description = \"Thickness of the custom line\"), NumericRange(1)] public int LineThickness { get; set; } = 2; [Parameter(\"Line Style\", Description = \"Style of the custom line\")] public LineStyle LineStyle { get; set; } = LineStyle.Solid; public override void OnRender(IDrawingContext context) { var points = new List<Point>(); for (var barIndex = Chart.FirstVisibleBarIndex; barIndex <= Chart.LastVisibleBarIndex; barIndex++) { var point = new Point() { X = Chart.GetXCoordinateByBarIndex(barIndex), Y = ChartScale.GetYCoordinateByValue(Bars[barIndex].Close) }; points.Add(point); } context.DrawPolygon(points, null, LineColor, LineThickness, LineStyle); } } Conclusion Custom rendering in Tickblaze.Scripts.Api is not limited to drawing tools. By overriding the OnRender method, you can apply custom rendering logic to Indicators, Strategies, and other script types. This flexibility allows you to create powerful and visually rich custom scripts for your trading needs."
  },
  "docs/tutorials/ma-crossover-strategy.html": {
    "href": "docs/tutorials/ma-crossover-strategy.html",
    "title": "Writing a Moving Average Crossover Strategy for Tickblaze | Tickblaze",
    "keywords": "Writing a Moving Average Crossover Strategy for Tickblaze This guide walks you through writing the Moving Average Crossover Strategy for Tickblaze. This strategy buys or sells short when a fast moving average crosses above or below a slow moving average. It also closes any existing positions before entering a new one. Prerequisite Knowledge Before proceeding, here are a few key concepts: Tickblaze API: A robust scripting API to build indicators, strategies, and tools. Strategy Class: Extend the Strategy base class to define custom trading strategies. Order Execution: Use API methods like ExecuteMarketOrder to place trades programmatically. Step-by-Step Guide 1. Define the Namespace Start by declaring a namespace for your strategy: namespace MyScripts.Strategies; Why Use a Unique Namespace? Full Type Name: Tickblaze uses the fully qualified type name (e.g., MyScripts.Strategies.MovingAverageCrossover) to uniquely identify your strategy. Avoid Name Conflicts: A unique namespace ensures your strategy won’t conflict with others. 2. Create the Moving Average Crossover Class Define a new class named MovingAverageCrossover and inherit from the Strategy base class: public class MovingAverageCrossover : Strategy 3. Add Parameters Parameters allow users to configure the moving average type and periods used in the strategy. Add the following: [Parameter(\"MA Type\")] public MovingAverageType MovingAverageType { get; set; } = MovingAverageType.Simple; [Parameter(\"Fast Period\")] public int FastPeriod { get; set; } = 20; [Parameter(\"Slow Period\")] public int SlowPeriod { get; set; } = 50; Breakdown: [Parameter(\"MA Type\")]: Lets users select the type of moving average (e.g., Simple, Exponential). [Parameter(\"Fast Period\")]: Specifies the period for the fast moving average. Defaults to 20 bars. [Parameter(\"Slow Period\")]: Specifies the period for the slow moving average. Defaults to 50 bars. 4. Initialize Moving Averages In the Initialize method, set up the fast and slow moving averages: private MovingAverage _fastMovingAverage, _slowMovingAverage; protected override void Initialize() { _fastMovingAverage = new MovingAverage(Bars.Close, FastPeriod, MovingAverageType); _slowMovingAverage = new MovingAverage(Bars.Close, SlowPeriod, MovingAverageType); } Breakdown: Bars.Close: Provides the closing prices of the bars, which are used as input for the moving averages. MovingAverage: Represents a moving average instance. It takes the data series (Bars.Close), period, and type as parameters. 5. Implement the Trading Logic The OnBar method contains the main strategy logic. Tickblaze automatically calls this method whenever a new bar is available. protected override void OnBar(int index) { if (index == 0) { return; } var fastLast = _fastMovingAverage[index]; var fastPrevious = _fastMovingAverage[index - 1]; var slowLast = _slowMovingAverage[index]; var slowPrevious = _slowMovingAverage[index - 1]; var isBullishCrossover = fastLast > slowLast && fastPrevious <= slowPrevious; if (isBullishCrossover) { ClosePosition(); ExecuteMarketOrder(OrderAction.Buy, 1); } var isBearishCrossover = fastLast < slowLast && fastPrevious >= slowPrevious; if (isBearishCrossover) { ClosePosition(); ExecuteMarketOrder(OrderAction.SellShort, 1); } } Step-by-Step Logic Inside OnBar: Skip the First Bar: if (index == 0) { return; } Ensures there’s enough historical data for comparison. Fetch Current and Previous Values: var fastLast = _fastMovingAverage[index]; var fastPrevious = _fastMovingAverage[index - 1]; var slowLast = _slowMovingAverage[index]; var slowPrevious = _slowMovingAverage[index - 1]; Retrieves the current and previous values for both moving averages. Detect Bullish Crossover: var isBullishCrossover = fastLast > slowLast && fastPrevious <= slowPrevious; if (isBullishCrossover) { ClosePosition(); ExecuteMarketOrder(OrderAction.Buy, 1); } A bullish crossover occurs when the fast moving average crosses above the slow moving average. Closes any existing position before entering a buy order. Detect Bearish Crossover: var isBearishCrossover = fastLast < slowLast && fastPrevious >= slowPrevious; if (isBearishCrossover) { ClosePosition(); ExecuteMarketOrder(OrderAction.SellShort, 1); } A bearish crossover occurs when the fast moving average crosses below the slow moving average. Closes any existing position before entering a sell short order. Conclusion You’ve successfully created a Moving Average Crossover Strategy for Tickblaze. This updated logic ensures existing positions are closed before new ones are opened, making the strategy cleaner and more precise. Experiment with different moving average types and periods to optimize performance. Happy coding!"
  },
  "docs/tutorials/ruler-drawing.html": {
    "href": "docs/tutorials/ruler-drawing.html",
    "title": "Writing Ruler Drawing for Tickblaze | Tickblaze",
    "keywords": "Writing Ruler Drawing for Tickblaze This guide walks you through writing the Ruler Drawing Tool for Tickblaze. The Ruler is a powerful drawing tool that measures price change, ticks, bars, and time across three user-defined points on the chart. Prerequisite Knowledge Before proceeding, here are a few key concepts: Tickblaze API: Provides tools for creating custom drawings, indicators, and strategies. Drawing Class: Extend the Drawing base class to create custom graphical tools on the chart. Points: Represents user-defined positions on the chart used for drawing shapes and annotations. Step-by-Step Guide 1. Define the Namespace Start by declaring a namespace for your drawing: namespace MyScripts.Drawings; Why Use a Unique Namespace? Full Type Name: Tickblaze uses the fully qualified type name (e.g., MyScripts.Drawings.Ruler) to uniquely identify your drawing. Avoid Name Conflicts: A well-structured namespace prevents conflicts with other drawings or scripts. 2. Create the Ruler Class Define a new class named Ruler and inherit from the Drawing base class: public partial class Ruler : Drawing 3. Add Parameters Parameters let users customize the appearance and behavior of the Ruler tool. Define the parameters for color, thickness, font, and text styling: [Parameter(\"Line Color\", Description = \"Color and opacity of the drawn lines\")] public Color LineColor { get; set; } = Color.Gray; [Parameter(\"Line Thickness\", Description = \"Thickness of the drawn lines\"), NumericRange(1, 10)] public int LineThickness { get; set; } = 1; [Parameter(\"Lines style\", Description = \"Line style of the drawn lines\")] public LineStyle LineStyle { get; set; } = LineStyle.Dot; [Parameter(\"Text Font\", Description = \"Font name and size for the text\")] public Font TextFont { get; set; } = new(\"Arial\", 10); [Parameter(\"Text Foreground\", Description = \"Color and opacity of the text\")] public Color TextForeground { get; set; } = Color.Silver; [Parameter(\"Text Background\", Description = \"Color and opacity of the background fill\")] public Color TextBackground { get; set; } = \"#33696969\"; Breakdown: [Parameter(\"Line Color\")]: Declares a user-configurable parameter for customizing the line color. [NumericRange(1, 10)]: Restricts the LineThickness parameter to values between 1 and 10. Defaults: LineColor is gray. TextFont defaults to Arial with size 10. TextBackground is a semi-transparent gray color. 4. Define Points Define the required points for the Ruler and specify how many are needed: public override int PointsCount => 3; public IChartPoint PointA => Points[0]; public IChartPoint PointB => Points[1]; public IChartPoint PointC => Points[2]; Breakdown: PointsCount: Specifies that the Ruler requires three points. PointA, PointB, PointC: Provide user-defined locations on the chart for drawing the ruler. 5. Implement the Render Logic The OnRender method contains the main logic for rendering the Ruler on the chart. Here’s the implementation: public override void OnRender(IDrawingContext context) { context.DrawPolygon(Points, null, LineColor, LineThickness, LineStyle); if (Points.Count < PointsCount) { return; } var price = new[] { (double)PointA.Value, (double)PointB.Value }; var change = price[1] - price[0]; var ticks = (int)Math.Round(Symbol.RoundToTick(change) / Symbol.TickSize); var bars = Chart.GetBarIndexByXCoordinate(PointB.X) - Chart.GetBarIndexByXCoordinate(PointA.X); var time = ((DateTime)PointB.Time).Subtract((DateTime)PointA.Time); var text = $\"Bars:\\t{bars}\\nTime:\\t{time}\\nChange:\\t{ChartScale.FormatPrice(change)}\\nTicks:\\t{ticks}\"; var textSize = context.MeasureText(text, TextFont); var textMargin = 5; var textOrigin = new Point(PointC.X + textMargin, PointC.Y + textMargin); var rectPointB = new Point(PointC.X + textSize.Width + textMargin * 2, PointC.Y + textSize.Height + textMargin * 2); if (PointB.X > PointC.X) { textOrigin.X -= textSize.Width + textMargin * 2; rectPointB.X = textOrigin.X - textMargin; } if (PointB.Y > PointC.Y) { textOrigin.Y -= textSize.Height + textMargin * 2; rectPointB.Y = textOrigin.Y - textMargin; } context.DrawRectangle(PointC, rectPointB, TextBackground, LineColor, LineThickness); context.DrawText(textOrigin, text, TextForeground, TextFont); } Breakdown: Drawing Lines: context.DrawPolygon draws the connecting lines between the three points using the specified color, thickness, and style. Measurements: Calculates: Bars: The number of bars between PointA and PointB. Time: The time difference between PointA and PointB. Change: The price difference between PointA and PointB. Ticks: Tick-based change derived using Symbol.RoundToTick. Rendering Text: The calculated measurements are displayed next to PointC using context.DrawText. context.MeasureText calculates the text size to align it correctly within a rectangle background. Full Source Code The full source code for the Ruler Drawing Tool is available on GitHub. You can review, download, and modify it as needed. View the Full Source Code on GitHub Conclusion You’ve successfully created the Ruler drawing tool for Tickblaze. The Ruler measures price, ticks, bars, and time across three points, making it a versatile tool for analyzing chart data. Experiment with parameters and extend it further to fit your trading needs!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Getting started using Visual Studio | Tickblaze",
    "keywords": "Getting started using Visual Studio Follow these steps to create your first custom indicator for Tickblaze using Visual Studio. Prerequisites Visual Studio Install .NET SDK 8.0 1. Create a New Solution and Project Open Visual Studio. Start a New Project: From the Start Window, click on Create a new project. Choose a Class Library C# project template and click Next. Configure the Project: Give your project a name. Choose a location for your project. Set the Solution name as desired. Click Next. Select the .NET 8.0 framework Click Create. 2. Add a NuGet Package Open the NuGet Package Manager: Right-click on the project in the Solution Explorer. Select Manage NuGet Packages.... Browse and Install Packages: Go to the Browse tab in the NuGet Package Manager. Search for a package Tickblaze.Scripts.Api. Select the package and click Install. Accept License Agreements if prompted. 3. Create Your Indicator Create a New Class: In Solution Explorer, right-click on the project. Select Add > Class.... Name the Class: Enter a name for your class (e.g., TypicalPrice.cs) and click Add. Define the Class: Open the new .cs file and replace its contents with: namespace CustomIndicator; /// <summary> /// A custom indicator that calculates the typical price for a bar. /// </summary> public partial class TypicalPrice : Indicator { [Plot(\"Result\")] public PlotSeries Result { get; set; } = new(Color.Blue, LineStyle.Solid, 1); public TypicalPrice() { Name = \"Typical Price\"; IsOverlay = true; } /// <summary> /// Calculates the typical price for the given bar. /// </summary> protected override void Calculate(int index) { var bar = Bars[index]; Result[index] = (bar.High + bar.Low + bar.Close) / 3; } } 4. Build the Solution Build the Project: Go to the Build menu and select Build Solution (or press Ctrl+Shift+B). Check for Errors: Any errors will be displayed in the Error List at the bottom. If there are errors, fix them and then rebuild the solution. 5. Run the Indicator in Tickblaze After building your project, the indicator should be automatically imported into Tickblaze. To run it: Right-click on the chart in Tickblaze. Select Indicators and click Add / Edit Settings. From the dropdown menu, select Typical Price. Click the down arrow to add it to the chart. Click the OK button. 6. Debug the Indicator Start Tickblaze as usual if not running yet. Attach to Tickblaze.View.exe process: Go to the Debug menu in Visual Studio and select Attach to Process.... In the Attach to Process window, locate and select Tickblaze.View.exe from the list of available processes. You can filter the processes by name or use the search box to find Tickblaze.View.exe quickly. Choose the Correct Debugger: In the Attach to section, ensure that the correct type of code is selected (for example, .NET for managed code). Attach: Once selected, click Attach. Set Breakpoints: Set breakpoints in your code by clicking on the left margin next to the line of code where you want the debugger to pause. Debug the Indicator: Once attached, the debugger will stop at breakpoints in your code, allowing you to inspect variables, step through your code, and analyze the indicator's behavior. Stop Debugging: When finished, you can stop debugging by going to the Debug menu and selecting Stop Debugging or pressing Shift+F5."
  }
}